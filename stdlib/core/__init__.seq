@internal
type str(len: int, ptr: ptr[byte]):
    def __new__() -> str:
        return str(cobj(), 0)
    def __new__[T](what: T) -> str: # lowest priority!
        return what.__str__()
    def __str__(what: str) -> str:
        return what
    def __new__(p: ptr[byte], l: int) -> str:
        return (l, p)
    @internal
    def memcpy(dest: ptr[byte], src: ptr[byte], len: int) -> void: pass
    @internal
    def memmove(dest: ptr[byte], src: ptr[byte], len: int) -> void: pass
    @internal
    def memset(dest: ptr[byte], b: byte, len: int) -> void: pass

# function: str, init(ptr)
# tuple: str / iter

extend ptr[T]:
    @internal
    def as_byte(self: ptr[T]) -> ptr[byte]: pass
    @internal
    def __new__() -> ptr[T]: pass
    # @internal
    # def __new__[U](other: ptr[U]) -> ptr[byte]: pass
    @internal
    def __new__(other: ptr[byte]) -> ptr[T]: pass
    @internal
    def __new__(sz: int) -> ptr[T]: pass
    @internal
    def __new__(other: ptr[T]) -> ptr[T]: pass
    @internal
    def __int__(self: ptr[T]) -> int: pass
    @internal
    def __copy__(self: ptr[T]) -> ptr[T]: pass
    @internal
    def __bool__(self: ptr[T]) -> bool: pass
    @internal
    def __getitem__(self: ptr[T], index: int) -> T: pass
    @internal
    def __setitem__(self: ptr[T], index: int, what: T) -> void: pass
    @internal
    def __add__(self: ptr[T], other: int) -> ptr[T]: pass
    @internal
    def __sub__(self: ptr[T], other: ptr[T]) -> int: pass
    @internal
    def __eq__(self: ptr[T], other: ptr[T]) -> bool: pass
    @internal
    def __ne__(self: ptr[T], other: ptr[T]) -> bool: pass
    @internal
    def __lt__(self: ptr[T], other: ptr[T]) -> bool: pass
    @internal
    def __gt__(self: ptr[T], other: ptr[T]) -> bool: pass
    @internal
    def __le__(self: ptr[T], other: ptr[T]) -> bool: pass
    @internal
    def __ge__(self: ptr[T], other: ptr[T]) -> bool: pass
    @internal
    def __prefetch_r0__(self: ptr[T]) -> void: pass
    @internal
    def __prefetch_r1__(self: ptr[T]) -> void: pass
    @internal
    def __prefetch_r2__(self: ptr[T]) -> void: pass
    @internal
    def __prefetch_r3__(self: ptr[T]) -> void: pass
    @internal
    def __prefetch_w0__(self: ptr[T]) -> void: pass
    @internal
    def __prefetch_w1__(self: ptr[T]) -> void: pass
    @internal
    def __prefetch_w2__(self: ptr[T]) -> void: pass
    @internal
    def __prefetch_w3__(self: ptr[T]) -> void: pass

extend bool:
    @internal
    def __new__() -> bool: pass
    def __new__[T](what: T) -> bool: # lowest priority!
        return what.__bool__()
    @internal
    def __str__(self: bool) -> str: pass
    @internal
    def __copy__(self: bool) -> bool: pass
    @internal
    def __bool__(self: bool) -> bool: pass
    @internal
    def __invert__(self: bool) -> bool: pass
    @internal
    def __eq__(self: bool, other: bool) -> bool: pass
    @internal
    def __ne__(self: bool, other: bool) -> bool: pass
    @internal
    def __lt__(self: bool, other: bool) -> bool: pass
    @internal
    def __gt__(self: bool, other: bool) -> bool: pass
    @internal
    def __le__(self: bool, other: bool) -> bool: pass
    @internal
    def __ge__(self: bool, other: bool) -> bool: pass
    @internal
    def __and__(self: bool, other: bool) -> bool: pass
    @internal
    def __or__(self: bool, other: bool) -> bool: pass
    @internal
    def __xor__(self: bool, other: bool) -> bool: pass

extend byte:
    @internal
    def __new__() -> byte: pass
    @internal
    def __new__(b: byte) -> byte: pass
    @internal
    def __new__(i: int) -> byte: pass
    @internal
    def __str__(self: byte) -> str: pass
    @internal
    def __copy__(self: byte) -> byte: pass
    @internal
    def __bool__(self: byte) -> bool: pass
    @internal
    def __eq__(self: byte, other: byte) -> bool: pass
    @internal
    def __ne__(self: byte, other: byte) -> bool: pass
    @internal
    def __lt__(self: byte, other: byte) -> bool: pass
    @internal
    def __gt__(self: byte, other: byte) -> bool: pass
    @internal
    def __le__(self: byte, other: byte) -> bool: pass
    @internal
    def __ge__(self: byte, other: byte) -> bool: pass

extend int:
    @internal
    def __new__() -> int: pass
    def __new__[T](what: T) -> int: # lowest priority!
        return what.__int__()
    @internal
    def __new__(i: int) -> int: pass
    @internal
    def __new__(f: float) -> int: pass
    @internal
    def __new__(b: bool) -> int: pass
    @internal
    def __new__(b: byte) -> int: pass
    @internal
    def __str__(self: int) -> str: pass
    @internal
    def __copy__(self: int) -> int: pass
    @internal
    def __hash__(self: int) -> int: pass
    @internal
    def __bool__(self: int) -> bool: pass
    @internal
    def __pos__(self: int) -> int: pass
    @internal
    def __neg__(self: int) -> int: pass
    @internal
    def __invert__(self: int) -> int: pass
    @internal
    def __abs__(self: int) -> int: pass
    @internal
    def __add__(self: int, other: int) -> int: pass
    @internal
    def __sub__(self: int, other: int) -> int: pass
    @internal
    def __mul__(self: int, other: int) -> int: pass
    @internal
    def __div__(self: int, other: int) -> int: pass
    @internal
    def __truediv__(self: int, other: int) -> float: pass
    @internal
    def __mod__(self: int, other: int) -> int: pass
    @internal
    def __lshift__(self: int, other: int) -> int: pass
    @internal
    def __rshift__(self: int, other: int) -> int: pass
    @internal
    def __eq__(self: int, other: int) -> bool: pass
    @internal
    def __ne__(self: int, other: int) -> bool: pass
    @internal
    def __lt__(self: int, other: int) -> bool: pass
    @internal
    def __gt__(self: int, other: int) -> bool: pass
    @internal
    def __le__(self: int, other: int) -> bool: pass
    @internal
    def __ge__(self: int, other: int) -> bool: pass
    @internal
    def __and__(self: int, other: int) -> int: pass
    @internal
    def __or__(self: int, other: int) -> int: pass
    @internal
    def __xor__(self: int, other: int) -> int: pass
    @internal
    def __add__(self: int, other: float) -> float: pass
    @internal
    def __sub__(self: int, other: float) -> float: pass
    @internal
    def __mul__(self: int, other: float) -> float: pass
    @internal
    def __div__(self: int, other: float) -> float: pass
    @internal
    def __truediv__(self: int, other: float) -> float: pass
    @internal
    def __mod__(self: int, other: float) -> float: pass
    @internal
    def __eq__(self: int, other: float) -> bool: pass
    @internal
    def __ne__(self: int, other: float) -> bool: pass
    @internal
    def __lt__(self: int, other: float) -> bool: pass
    @internal
    def __gt__(self: int, other: float) -> bool: pass
    @internal
    def __le__(self: int, other: float) -> bool: pass
    @internal
    def __ge__(self: int, other: float) -> bool: pass

extend float:
    @internal
    def __new__() -> float: pass
    @internal
    def __new__(f: float) -> float: pass
    @internal
    def __new__(i: int) -> float: pass
    @internal
    def __str__(self: float) -> str: pass
    @internal
    def __copy__(self: float) -> float: pass
    @internal
    def __bool__(self: float) -> bool: pass
    @internal
    def __pos__(self: float) -> float: pass
    @internal
    def __neg__(self: float) -> float: pass
    @internal
    def __abs__(self: float) -> float: pass
    @internal
    def __add__(self: float, other: float) -> float: pass
    @internal
    def __sub__(self: float, other: float) -> float: pass
    @internal
    def __mul__(self: float, other: float) -> float: pass
    @internal
    def __div__(self: float, other: float) -> float: pass
    @internal
    def __truediv__(self: float, other: float) -> float: pass
    @internal
    def __mod__(self: float, other: float) -> float: pass
    @internal
    def __pow__(self: float, other: float) -> float: pass
    @internal
    def __eq__(self: float, other: float) -> bool: pass
    @internal
    def __ne__(self: float, other: float) -> bool: pass
    @internal
    def __lt__(self: float, other: float) -> bool: pass
    @internal
    def __gt__(self: float, other: float) -> bool: pass
    @internal
    def __le__(self: float, other: float) -> bool: pass
    @internal
    def __ge__(self: float, other: float) -> bool: pass
    @internal
    def __add__(self: float, other: int) -> float: pass
    @internal
    def __sub__(self: float, other: int) -> float: pass
    @internal
    def __mul__(self: float, other: int) -> float: pass
    @internal
    def __div__(self: float, other: int) -> float: pass
    @internal
    def __truediv__(self: float, other: int) -> float: pass
    @internal
    def __mod__(self: float, other: int) -> float: pass
    @internal
    def __pow__(self: float, other: int) -> float: pass
    @internal
    def __eq__(self: float, other: int) -> bool: pass
    @internal
    def __ne__(self: float, other: int) -> bool: pass
    @internal
    def __lt__(self: float, other: int) -> bool: pass
    @internal
    def __gt__(self: float, other: int) -> bool: pass
    @internal
    def __le__(self: float, other: int) -> bool: pass
    @internal
    def __ge__(self: float, other: int) -> bool: pass

extend optional[T]:  # type
    @internal
    def __new__() -> optional[T]: pass
    @internal
    def __new__(what: T) -> optional[T]: pass
    @internal
    def __bool__(self: optional[T]) -> bool: pass
    @internal
    def __invert__(self: optional[T]) -> T: pass

extend generator[T]:  # class
    @internal
    def __iter__(self: generator[T]) -> generator[T]: pass
    @internal
    def __raw__(self: generator[T]) -> ptr[byte]: pass
    @internal
    def __done__(self: generator[T]) -> bool: pass
    @internal
    def __promise__(self: generator[T]) -> ptr[T]: pass
    @internal
    def __resume__(self: generator[T]) -> void: pass
    @internal
    def __str__(self: generator[T]) -> str: pass

@internal
type array[T](len: int, ptr: ptr[T]):
    @internal
    def __elemsize__() -> int: pass
    @internal
    def __atomic__() -> bool: pass
    @internal
    def __new__(len: int) -> array[T]: pass
    @internal
    def __new__(data: ptr[T], len: int) -> array[T]: pass
    @internal
    def __copy__(self: array[T]) -> array[T]: pass
    @internal
    def __len__(self: array[T]) -> int: pass
    @internal
    def __bool__(self: array[T]) -> bool: pass
    @internal
    def __getitem__(self: array[T], index: int) -> T: pass
    @internal
    def __slice__(self: array[T], l: int, r: int) -> array[T]: pass
    @internal
    def __slice_left__(self: array[T], r: int) -> array[T]: pass
    @internal
    def __slice_right__(self: array[T], l: int) -> array[T]: pass
    @internal
    def __setitem__(self: array[T], index: int, what: T) -> void: pass

extend Int[N]:
    @internal
    def __new__() -> Int[N]: pass
    @internal
    def __new__(what: Int[N]) -> Int[N]: pass
    @internal
    def __new__(what: int) -> Int[N]: pass
    @internal
    def __new__(what: UInt[N]) -> Int[N]: pass
    @internal
    def __copy__(self: Int[N]) -> Int[N]: pass
    @internal
    def __hash__(self: Int[N]) -> int: pass
    @internal
    def __bool__(self: Int[N]) -> bool: pass
    @internal
    def __pos__(self: Int[N]) -> Int[N]: pass
    @internal
    def __neg__(self: Int[N]) -> Int[N]: pass
    @internal
    def __invert__(self: Int[N]) -> Int[N]: pass
    @internal
    def __add__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __sub__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __mul__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __div__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __truediv__(self: Int[N], other: Int[N]) -> float: pass
    @internal
    def __mod__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __lshift__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __rshift__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __eq__(self: Int[N], other: Int[N]) -> bool: pass
    @internal
    def __ne__(self: Int[N], other: Int[N]) -> bool: pass
    @internal
    def __lt__(self: Int[N], other: Int[N]) -> bool: pass
    @internal
    def __gt__(self: Int[N], other: Int[N]) -> bool: pass
    @internal
    def __le__(self: Int[N], other: Int[N]) -> bool: pass
    @internal
    def __ge__(self: Int[N], other: Int[N]) -> bool: pass
    @internal
    def __and__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __or__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __xor__(self: Int[N], other: Int[N]) -> Int[N]: pass
    @internal
    def __pickle__(self: Int[N], dest: ptr[byte]) -> void: pass
    @internal
    def __unpickle__(self: Int[N], src: ptr[byte]) -> Int[N]: pass
    @internal
    def __str__(self: Int[N]) -> str: pass
    @internal
    def popcnt(self: Int[N]) -> int: pass

    def len() -> int:
        return N

extend UInt[N]:
    @internal
    def __new__() -> UInt[N]: pass
    @internal
    def __new__(what: UInt[N]) -> UInt[N]: pass
    @internal
    def __new__(what: int) -> UInt[N]: pass
    @internal
    def __new__(what: Int[N]) -> UInt[N]: pass
    @internal
    def __copy__(self: UInt[N]) -> UInt[N]: pass
    @internal
    def __hash__(self: UInt[N]) -> int: pass
    @internal
    def __bool__(self: UInt[N]) -> bool: pass
    @internal
    def __pos__(self: UInt[N]) -> UInt[N]: pass
    @internal
    def __neg__(self: UInt[N]) -> UInt[N]: pass
    @internal
    def __invert__(self: UInt[N]) -> UInt[N]: pass
    @internal
    def __add__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __sub__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __mul__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __div__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __truediv__(self: UInt[N], other: UInt[N]) -> float: pass
    @internal
    def __mod__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __lshift__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __rshift__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __eq__(self: UInt[N], other: UInt[N]) -> bool: pass
    @internal
    def __ne__(self: UInt[N], other: UInt[N]) -> bool: pass
    @internal
    def __lt__(self: UInt[N], other: UInt[N]) -> bool: pass
    @internal
    def __gt__(self: UInt[N], other: UInt[N]) -> bool: pass
    @internal
    def __le__(self: UInt[N], other: UInt[N]) -> bool: pass
    @internal
    def __ge__(self: UInt[N], other: UInt[N]) -> bool: pass
    @internal
    def __and__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __or__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __xor__(self: UInt[N], other: UInt[N]) -> UInt[N]: pass
    @internal
    def __pickle__(self: UInt[N], dest: ptr[byte]) -> void: pass
    @internal
    def __unpickle__(self: UInt[N], src: ptr[byte]) -> UInt[N]: pass
    @internal
    def __str__(self: UInt[N]) -> str: pass
    @internal
    def popcnt(self: UInt[N]) -> int: pass

    def len() -> int:
        return N

@internal
type seq(len: int, ptr: ptr[byte]):
    def __new__(s: str) -> seq:
        return (s.len, s.ptr)
    # def __contains__[N](self: seq, what: Kmer[N]) -> void: pass

# from core.aliases import *
# import core.c_stubs as _C
# import core.gc as _gc

# from core.slice import *
# from core.err import *
# from core.optional import unwrap as _unwrap
# from core.range import range
# from core.box import Box

# from core.builtin import *

# from core.collections.list import list
# from core.collections.set import set
# from core.collections.dict import dict

# from core.str import *
# from core.int import *
# from core.float import *

# from core.sort import sorted

# from core.file import File, gzFile, open, gzopen
# from pickle import pickle, unpickle

# from core.dlopen import dlsym as _dlsym


# from core.python import init as _py_init, imp as _py_import, exec as _py_exec, pyobj

# from bio import *
