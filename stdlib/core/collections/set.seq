# set implementation based on klib's khash

import core.collections.khash as khash

def _set_hash(key):
    k = hash(key)
    return (k >> 33) ^ k ^ (k << 11)

class set[K]:
    _n_buckets: int
    _size: int
    _n_occupied: int
    _upper_bound: int

    _flags: ptr[u32]
    _keys: ptr[K]

# Magic methods
    def _init(self: set[K]):
        self._n_buckets = 0
        self._size = 0
        self._n_occupied = 0
        self._upper_bound = 0
        self._flags = ptr[u32]()
        self._keys = ptr[K]()

    def __init__(self: set[K]):
        self._init()

    def __init__(self: set[K], g: generator[K]):
        self._init()
        for a in g:
            self.add(a)

    def __sub__(self: set[K], other: set[K]):
        return self.difference(other)

    def __isub__(self: set[K], other: set[K]):
        self.difference_update(other)
        return self

    def __and__(self: set[K], other: set[K]):
        return self.intersection(other)

    def __iand__(self: set[K], other: set[K]):
        self.intersection_update(other)
        return self

    def __or__(self: set[K], other: set[K]):
        return self.union(other)

    def __ior__(self: set[K], other: set[K]):
        for a in other:
            self.add(a)
        return self

    def __xor__(self: set[K], other: set[K]):
        return self.symmetric_difference(other)

    def __ixor__(self: set[K], other: set[K]):
        self.symmetric_difference_update(other)
        return self

    def __contains__(self: set[K], key: K):
        return self._kh_get(key) != self._kh_end()

    def __eq__(self: set[K], other: set[K]):
        if len(self) != len(other):
            return False
        for k in self:
            if k not in other:
                return False
        return True

    def __ne__(self: set[K], other: set[K]):
        return not (self == other)

    def __le__(self: set[K], other: set[K]):
        return self.issubset(other)

    def __ge__(self: set[K], other: set[K]):
        return self.issuperset(other)

    def __lt__(self: set[K], other: set[K]):
        return self != other and self <= other

    def __gt__(self: set[K], other: set[K]):
        return self != other and self >= other

    def __iter__(self: set[K]):
        i = self._kh_begin()
        while i < self._kh_end():
            if self._kh_exist(i):
                yield self._keys[i]
            i += 1

    def __len__(self: set[K]):
        return self._size

    def __copy__(self: set[K]):
        if len(self) == 0:
            return set[K]()
        n = self._n_buckets
        f = khash.__ac_fsize(n)
        flags_copy = ptr[u32](f)
        keys_copy = ptr[K](n)
        str.memcpy(flags_copy.as_byte(), self._flags.as_byte(), f * _gc.sizeof[u32]())
        str.memcpy(keys_copy.as_byte(), self._keys.as_byte(), n * _gc.sizeof[K]())
        return set[K](n, self._size, self._n_occupied, self._upper_bound, flags_copy, keys_copy)

    def __str__(self: set[K]):
        n = len(self)
        if n == 0:
            return "{}"
        else:
            lst = list[str]()
            lst.append("{")
            first = True
            for k in self:
                if not first:
                    lst.append(", ")
                else:
                    first = False
                lst.append(str(k))
            lst.append("}")
            return str.cat(lst)


# Helper methods

    def resize(self: set[K], new_n_buckets: int):
        self._kh_resize(new_n_buckets)

    def add(self: set[K], key: K):
        self._kh_put(key)

    def update(self: set[K], other: set[K]):
        for k in other:
            self.add(k)

    def remove(self: set[K], key: K):
        x = self._kh_get(key)
        if x != self._kh_end():
            self._kh_del(x)
        else:
            raise KeyError(str(key))

    def pop(self: set[K]):
        if len(self) == 0:
            raise ValueError("empty set")
        for a in self:
            self.remove(a)
            return a

    def discard(self: set[K], key: K):
        x = self._kh_get(key)
        if x != self._kh_end():
            self._kh_del(x)

    def difference(self: set[K], other: set[K]):
        s = set[K]()
        for a in self:
            if a not in other:
                s.add(a)
        return s

    def difference_update(self: set[K], other: set[K]):
        for a in other:
            self.discard(a)

    def intersection(self: set[K], other: set[K]):
        if len(other) < len(self):
            self, other = other, self
        s = set[K]()
        for a in self:
            if a in other:
                s.add(a)
        return s

    def intersection_update(self: set[K], other: set[K]):
        for a in self:
            if a not in other:
                self.discard(a)

    def symmetric_difference(self: set[K], other: set[K]):
        s = set[K]()
        for a in self:
            if a not in other:
                s.add(a)
        for a in other:
            if a not in self:
                s.add(a)
        return s

    def symmetric_difference_update(self: set[K], other: set[K]):
        for a in other:
            if a in self:
                self.discard(a)
        for a in self:
            if a in other:
                self.discard(a)

    def union(self: set[K], other: set[K]):
        s = set[K]()
        s.resize(max2(self._n_buckets, other._n_buckets))
        for a in self:
            s.add(a)
        for a in other:
            s.add(a)
        return s

    def isdisjoint(self: set[K], other: set[K]):
        if len(other) < len(self):
            self, other = other, self
        for a in self:
            if a in other:
                return False
        return True

    def issubset(self: set[K], other: set[K]):
        if len(other) < len(self):
            return False
        for a in self:
            if a not in other:
                return False
        return True

    def issuperset(self: set[K], other: set[K]):
        return other.issubset(self)

    def clear(self: set[K]):
        self._kh_clear()

    def copy(self: set[K]):
        return self.__copy__()


# Internal helpers

    def _kh_clear(self: set[K]):
        if self._flags:
            i = 0
            n = khash.__ac_fsize(self._n_buckets)
            while i < n:
                self._flags[i] = u32(0xaaaaaaaa)
                i += 1
            self._size = 0
            self._n_occupied = 0

    def _kh_get(self: set[K], key: K):
        if self._n_buckets:
            step = 0
            mask = self._n_buckets - 1
            k = _set_hash(key)
            i = k & mask
            last = i
            while not khash.__ac_isempty(self._flags, i) and (khash.__ac_isdel(self._flags, i) or self._keys[i] != key):
                step += 1
                i = (i + step) & mask
                if i == last:
                    return self._n_buckets
            return self._n_buckets if khash.__ac_iseither(self._flags, i) else i
        else:
            return 0

    def _kh_resize(self: set[K], new_n_buckets: int):
        HASH_UPPER = 0.77
        new_flags = ptr[u32]()
        j = 1

        # round up to next power of 2
        new_n_buckets -= 1
        new_n_buckets |= new_n_buckets >> 1
        new_n_buckets |= new_n_buckets >> 2
        new_n_buckets |= new_n_buckets >> 4
        new_n_buckets |= new_n_buckets >> 8
        new_n_buckets |= new_n_buckets >> 16
        new_n_buckets |= new_n_buckets >> 32
        new_n_buckets += 1

        if new_n_buckets < 4:
            new_n_buckets = 4

        if self._size >= int(new_n_buckets*HASH_UPPER + 0.5):
            j = 0
        else:
            fsize = khash.__ac_fsize(new_n_buckets)
            new_flags = ptr[u32](fsize)
            i = 0
            while i < fsize:
                new_flags[i] = u32(0xaaaaaaaa)
                i += 1

            if self._n_buckets < new_n_buckets:
                self._keys = ptr[K](_gc.realloc(self._keys.as_byte(), new_n_buckets * _gc.sizeof[K]()))

        if j:
            j = 0
            while j != self._n_buckets:
                if khash.__ac_iseither(self._flags, j) == 0:
                    key = self._keys[j]
                    new_mask = new_n_buckets - 1
                    khash.__ac_set_isdel_true(self._flags, j)

                    while True:
                        step = 0
                        k = _set_hash(key)
                        i = k & new_mask

                        while not khash.__ac_isempty(new_flags, i):
                            step += 1
                            i = (i + step) & new_mask

                        khash.__ac_set_isempty_false(new_flags, i)
                        if i < self._n_buckets and khash.__ac_iseither(self._flags, i) == 0:
                            self._keys[i], key = key, self._keys[i]
                            khash.__ac_set_isdel_true(self._flags, i)
                        else:
                            self._keys[i] = key
                            break
                j += 1

            if self._n_buckets > new_n_buckets:
                self._keys = ptr[K](_gc.realloc(self._keys.as_byte(), new_n_buckets * _gc.sizeof[K]()))

            self._flags = new_flags
            self._n_buckets = new_n_buckets
            self._n_occupied = self._size
            self._upper_bound = int(self._n_buckets*HASH_UPPER + 0.5)

    def _kh_put(self: set[K], key: K):
        if self._n_occupied >= self._upper_bound:
            if self._n_buckets > (self._size << 1):
                self._kh_resize(self._n_buckets - 1)
            else:
                self._kh_resize(self._n_buckets + 1)

        mask = self._n_buckets - 1
        step = 0
        site = self._n_buckets
        x = site
        k = _set_hash(key)
        i = k & mask
        if khash.__ac_isempty(self._flags, i):
            x = i
        else:
            last = i
            while not khash.__ac_isempty(self._flags, i) and (khash.__ac_isdel(self._flags, i) or self._keys[i] != key):
                if khash.__ac_isdel(self._flags, i):
                    site = i
                step += 1
                i = (i + step) & mask
                if i == last:
                    x = site
                    break

            if x == self._n_buckets:
                if khash.__ac_isempty(self._flags, i) and site != self._n_buckets:
                    x = site
                else:
                    x = i

        ret = 0
        if khash.__ac_isempty(self._flags, x):
            self._keys[x] = key
            khash.__ac_set_isboth_false(self._flags, x)
            self._size += 1
            self._n_occupied += 1
            ret = 1
        elif khash.__ac_isdel(self._flags, x):
            self._keys[x] = key
            khash.__ac_set_isboth_false(self._flags, x)
            self._size += 1
            ret = 2

        return (ret, x)

    def _kh_del(self: set[K], x: int):
        if x != self._n_buckets and not khash.__ac_iseither(self._flags, x):
            khash.__ac_set_isdel_true(self._flags, x)
            self._size -= 1

    def _kh_begin(self: set[K]):
        return 0

    def _kh_end(self: set[K]):
        return self._n_buckets

    def _kh_exist(self: set[K], x: int):
        return not khash.__ac_iseither(self._flags, x)


