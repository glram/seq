class list[T]:
    arr: array[T]
    len: int
    def __init__(self: list[T]): 
        self.arr = array[T]()
        self.len = 0
    def __init__(self: list[T], sz: int): 
        self.arr = array[T](sz)
        self.len = 0
    def append(self: list[T], i: T):
        self.arr[self.len] = i
        self.len += 1
    def __str__(self: list[T]):
        return len.__str__()
    def __iter__(self: list[T]):
        for i in self.arr:
            yield i

=== NoneExpr
a = None 
---
{a : ?1} = {None : ?1}

=== BoolExpr
a = True
---
{a : bool} = {True : bool}

=== IntExpr
a = 1u
---
{a : int} = {1u : int}

=== FloatExpr
a = 1.15
---
{a : float} = {1.15 : float}

=== StringExpr
a = 'test'
---
{a : str} = {'test' : str}

=== FStringExpr & ListExpr
a, b = 'a', 1
c = f'{a} and {b=} &'
---
{$_typ_1 : list[str]} = {{list.__new__ : function[list[str]]}() : list[str]}
{{list.__init__ : function[void,list[str],int]}({$_typ_1 : list[str]}, {5 : int}) : void}
{$_lst_2 : list[str]} = {$_typ_1 : list[str]}
{{list.append : function[void,list[str],str]}({$_lst_2 : list[str]}, {a : str}) : void}
{{list.append : function[void,list[str],str]}({$_lst_2 : list[str]}, {' and ' : str}) : void}
{{list.append : function[void,list[str],str]}({$_lst_2 : list[str]}, {'b=' : str}) : void}
{{list.append : function[void,list[str],str]}({$_lst_2 : list[str]}, {{int.__str__ : function[str, int]}({b : int}) : str}) : void}
{{list.append : function[void,list[str],str]}({$_lst_2 : list[str]}, {' & : str}) : void}
{c : str} = {{str.cat : function[str, list[str]]}({$_lst_2 : list[str]}) : str}

=== KmerExpr
a = k'ACGT'
---
{$_typ_1 : Kmer[4]} = {{Kmer.__init__ : function[Kmer[4], str]}({'ACGT' : str}) : Kmer[4]}
{a : Kmer[4]} = {$_typ_1 : Kmer[4]}

=== SeqExpr
a = s'ACGT'
b = p'UTA'
---
{$_typ_1 : seq} = {{seq.__init__ : function[seq, str]}({'ACGT' : str}) : seq}
{a : seq} = {$_typ_1 : seq}
{$_typ_2 : pseq} = {{pseq.__init__ : function[pseq, str]}({'UTA' : str}) : pseq}
{b : pseq} = {$_typ_2 : pseq}

=== IdExpr & PrintStmt
a = 1
print a
---
{a : int} = {1 : int}
print {{int.__str__ : function[str, int]}({a : int}) : str}
print {"\n" : str}

=== UnpackExpr
???

=== TupleExpr
x = 5.5
a = (1, 's', x)
---
{x : float} = {5.5 : float}
{a : tuple[int, str, float]} = ({1 : int}, {'s' : str}, {x : float})

=== ListExpr
a = []
b = [1, 2]
---
{$_typ_1 : list[?1]} = {{list.__new__ : function[list[?1]]}() : list[?1]}
{{list.__init__ : function[void,list[?1]]}({$_typ_1 : list[?1]}) : void}
{$_lst_2 : list[?1]} = {$_typ_1 : list[?1]}
{a : list[?1]} = {$_lst_2 : list[?1]}
{$_typ_3 : list[int]} = {{list.__new__ : function[list[int]]}() : list[int]}
{{list.__init__ : function[void,list[int],int]}({$_typ_3 : list[int]}, {2 : int}) : void}
{$_lst_4 : list[int]} = {$_typ_3 : list[int]}
{{list.append : function[void,list[int],int]}({$_lst_4 : list[int]}, {1 : int}) : void}
{{list.append : function[void,list[int],int]}({$_lst_4 : list[int]}, {2 : int}) : void}
{b : list[int]} = {$_lst_4 : list[int]}

=== ListExpr & unification
c = []
c.append('s')
---
{$_typ_1 : list[str]} = {{list.__new__ : function[list[str]]}() : list[str]}
{{list.__init__ : function[void,list[str]]}({$_typ_1 : list[str]}) : void}
{$_lst_2 : list[str]} = {$_typ_1 : list[str]}
{c : list[str]} = {$_lst_2 : list[str]}
{{list.append : function[list[str], str]}({}, {'s' : str}) : void}

=== SetExpr
a = {1}
---
{$_typ_1 : set[int]} = {{set.__new__ : function[set[int]]}() : set[int]}
{{set.__init__ : function[void,set[int]]}({$_typ_1 : set[int]}) : void}
{$_set_2 : set[int]} = {$_typ_1 : set[int]}
{{set.add : function[void,set[int],int]}({$_set_2 : set[int]}, {1 : int}) : void}
{a : set[int]} = {$_set_2 : set[int]}
