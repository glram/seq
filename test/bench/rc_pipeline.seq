######################
# Pipeline benchmark #
######################
from sys import argv
from time import timing

n = 0
def update[K](kmer: K):
    global n
    x = K() |> base(len(kmer) // 2, k'T')
    if kmer > x:
        n += 1

def test_fast[K]():
    global n
    n = 0
    with timing(f'{K.len()}-mer (fast)'):
        FASTA(argv[1]) |> seqs |> kmers[K](step=1) |> revcomp |> update
    print n


def test_slow[K]():
    global n
    n = 0
    with timing(f'{K.len()}-mer (slow)'):
        for a in seqs(FASTA(argv[1])):
            for b in kmers[K](a, step=1):
                c = revcomp(b)
                update(c)
    print n

def test_super_slow[K]():
    global n
    n = 0
    with timing(f'{K.len()}-mer (super slow)'):
        for a in seqs(FASTA(argv[1])):
            for b in split(a, K.len(), step=1):
                if not b.N():
                    c = K(b)
                    d = revcomp(c)
                    update(d)
    print n

test_fast[Kmer[4]]()
test_slow[Kmer[4]]()
test_super_slow[Kmer[4]]()

test_fast[Kmer[8]]()
test_slow[Kmer[8]]()
test_super_slow[Kmer[8]]()

test_fast[Kmer[16]]()
test_slow[Kmer[16]]()
test_super_slow[Kmer[16]]()

test_fast[Kmer[32]]()
test_slow[Kmer[32]]()
test_super_slow[Kmer[32]]()

test_fast[Kmer[64]]()
test_slow[Kmer[64]]()
test_super_slow[Kmer[64]]()

test_fast[Kmer[128]]()
test_slow[Kmer[128]]()
test_super_slow[Kmer[128]]()
