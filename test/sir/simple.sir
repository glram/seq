module module{
def f$base#0(
) -> void#6 [
$#1424: str#0; [];
$#1425: str#0; [];
]{
bb#0 {
$.RTLD_NOW#558 = 2; [];
$.RTLD_GLOBAL#559 = 8; [];
$.BLOCK_SIZE#1352 = 64; [];
$.CACHELINE_SIZE#1353 = 64; [];
$.MIN_GALLOP#1354 = 7; [];
$.INSERTION_SORT_THRESHOLD#1355 = 24; [];
$.NINTHER_THRESHOLD#1356 = 128; [];
$.PARTIAL_INSERTION_SORT_LIMIT#1357 = 8; [];
$.e#1358 = 2.718282; [];
$.pi#1359 = 3.141593; [];
$.tau#1360 = 6.283185; [];
$.inf#1361 = f$3#61('inf'); [];
$.nan#1362 = f$3#61('nan'); [];
$._typ_228#1363 = f$__new__#6(); [];
f$3#4($._typ_228#1363, 21); [];
$._lst_175#1364 = $._typ_228#1363; [];
f$append#49($._lst_175#1364, 1); [];
f$append#49($._lst_175#1364, 1); [];
f$append#49($._lst_175#1364, 2); [];
f$append#49($._lst_175#1364, 6); [];
f$append#49($._lst_175#1364, 24); [];
f$append#49($._lst_175#1364, 120); [];
f$append#49($._lst_175#1364, 720); [];
f$append#49($._lst_175#1364, 5040); [];
f$append#49($._lst_175#1364, 40320); [];
f$append#49($._lst_175#1364, 362880); [];
f$append#49($._lst_175#1364, 3628800); [];
f$append#49($._lst_175#1364, 39916800); [];
f$append#49($._lst_175#1364, 479001600); [];
f$append#49($._lst_175#1364, 6227020800); [];
f$append#49($._lst_175#1364, 87178291200); [];
f$append#49($._lst_175#1364, 1307674368000); [];
f$append#49($._lst_175#1364, 20922789888000); [];
f$append#49($._lst_175#1364, 355687428096000); [];
f$append#49($._lst_175#1364, 6402373705728000); [];
f$append#49($._lst_175#1364, 121645100408832000); [];
f$append#49($._lst_175#1364, 2432902008176640000); [];
$._F#1365 = $._lst_175#1364; [];
$._typ_229#1368 = f$__new__#145(); [];
f$1#35($._typ_229#1368); [];
$._DLOPEN_CACHE#1369 = $._typ_229#1368; [];
$._typ_230#1370 = f$__new__#145(); [];
f$1#35($._typ_230#1370); [];
$._DLSYM_CACHE#1371 = $._typ_230#1370; [];
$.SEEK_SET#1372 = 0; [];
$.SEEK_CUR#1373 = 1; [];
$.SEEK_END#1374 = 2; [];
$.environ#1416 = f$1#182(); [];
$#1424 = f$dlext#30(); [];
$#1425 = f$__add__#141('libpython.', $#1424); [];
$.LD#1423 = f$getenv#28('SEQ_PYTHON', $#1425); [];
$._PY_INITIALIZED#1426 = false; [];
$._typ_234#1427 = f$__new__#144(); [];
f$1#34($._typ_234#1427); [];
$._PY_MODULE_CACHE#1428 = $._typ_234#1427; [];
f$hello_name#158('Bob'); [];
f$hello_name#158('Alice'); [];
noterm;
}; []
}; []
def f$__new__#2(
$len#400: int#4; [];
) -> Array[int]#9 [
]{
internal: Array[int]#9.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#3(
$len#401: int#4; [];
) -> Array[str]#11 [
]{
internal: Array[str]#11.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$3#4(
$self#857: .list#13; [];
$capacity#858: int#4; [];
) -> void#6 [
]{
bb#3 {
$self#857.self = f$__new__#2($capacity#858); [];
$self#857.self = 0; [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$3#5(
$self#859: .list#15; [];
$capacity#860: int#4; [];
) -> void#6 [
]{
bb#4 {
$self#859.self = f$__new__#3($capacity#860); [];
$self#859.self = 0; [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#6(
) -> .list#13 [
]{
internal: .list#13.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#7(
) -> .list#15 [
]{
internal: .list#15.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$cat#8(
$v#1311: .list#15; [];
) -> str#0 [
$total#1312: int#4; [];
$._for_done#1314: bool#1; [];
$s#1315: str#0; [];
$#1316: int#4; [];
$p#1317: Pointer[byte]#43; [];
$n#1318: int#4; [];
$._for_done#1320: bool#1; [];
$s#1321: str#0; [];
$#1322: Pointer[byte]#43; [];
$#1323: str#0; [];
$#1324: str#0; [];
$#1325: str#0; [];
$#1326: str#0; [];
]{
bb#7 {
$total#1312 = 0; [];
$._gen_104#1313 = f$__iter__#85($v#1311); [];
jmp bb#549; [];
}; []
bb#549 {
$._for_done#1314 = f$done#180($._gen_104#1313); [];
jmp bb#550; [];
}; []
bb#550 {
condjump ($._for_done#1314) bb#552 bb#551; [];
}; []
bb#551 {
$s#1315 = f$next#218($._gen_104#1313); [];
$#1316 = f$len#175($s#1315); [];
$total#1312 = f$__add__#264($total#1312, $#1316); [];
$._for_done#1314 = f$done#180($._gen_104#1313); [];
jmp bb#550; [];
}; [loopAttribute: loop(bb#549, bb#550, bb#551, none, bb#552), ]
bb#552 {
$p#1317 = f$2#211($total#1312); [];
$n#1318 = 0; [];
$._gen_105#1319 = f$__iter__#85($v#1311); [];
jmp bb#553; [];
}; []
bb#553 {
$._for_done#1320 = f$done#180($._gen_105#1319); [];
jmp bb#554; [];
}; []
bb#554 {
condjump ($._for_done#1320) bb#556 bb#555; [];
}; []
bb#555 {
$s#1321 = f$next#218($._gen_105#1319); [];
$#1322 = f$__add__#127($p#1317, $n#1318); [];
$#1323 = $s#1321.ptr; [];
$#1324 = $s#1321.len; [];
f$memcpy#130($#1322, $#1323, $#1324); [];
$#1325 = $s#1321.len; [];
$n#1318 = f$__add__#264($n#1318, $#1325); [];
$._for_done#1320 = f$done#180($._gen_105#1319); [];
jmp bb#554; [];
}; [loopAttribute: loop(bb#553, bb#554, bb#555, none, bb#556), ]
bb#556 {
$#1326 = f$__new__#160($p#1317, $total#1312); [];
return $#1326; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$1#9(
$self#1412: .EnvMap#24; [];
$key#1413: str#0; [];
) -> bool#1 [
$#1414: .EnvMap#24; [];
$#1415: bool#1; [];
]{
bb#8 {
f$_init_if_needed#25($self#1412); [];
$#1414 = $self#1412._map; [];
$#1415 = f$__contains__#204($#1414, $key#1413); [];
return $#1415; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#10(
) -> .KeyError#27 [
]{
internal: .KeyError#27.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_set_isboth_false#11(
$flag#957: Pointer[UInt32]#21; [];
$i#958: int#4; [];
) -> void#6 [
$#959: int#4; [];
$#960: int#4; [];
$#961: UInt32#20; [];
$#962: int#4; [];
$#963: int#4; [];
$#964: int#4; [];
$#965: int#4; [];
$#966: UInt32#20; [];
$#967: UInt32#20; [];
]{
bb#10 {
$#959 = f$__rshift__#121($i#958, 4); [];
$#960 = f$__rshift__#121($i#958, 4); [];
$#961 = f$__getitem__#283($flag#957, $#960); [];
$#962 = f$__and__#16($i#958, 15); [];
$#963 = f$__lshift__#134($#962, 1); [];
$#964 = f$__lshift__#134(3, $#963); [];
$#965 = f$__invert__#74($#964); [];
$#966 = f$2#213($#965); [];
$#967 = f$__and__#105($#961, $#966); [];
f$__setitem__#78($flag#957, $#959, $#967); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$_kh_get#12(
$self#1019: .dict#23; [];
$key#1020: str#0; [];
) -> int#4 [
$#1021: .dict#23; [];
$#1022: bool#1; [];
$step#1023: int#4; [];
$mask#1024: int#4; [];
$#1025: .dict#23; [];
$k#1026: int#4; [];
$i#1027: int#4; [];
$last#1028: int#4; [];
$._bin_res#1029: bool#1; [];
$#1030: .dict#23; [];
$#1031: int#4; [];
$#1032: bool#1; [];
$#1033: bool#1; [];
$#1034: bool#1; [];
$._bin_res#1035: bool#1; [];
$#1036: .dict#23; [];
$#1037: int#4; [];
$#1038: bool#1; [];
$#1039: .dict#23; [];
$#1040: str#0; [];
$#1041: bool#1; [];
$#1042: bool#1; [];
$#1043: bool#1; [];
$#1044: bool#1; [];
$#1045: int#4; [];
$#1046: bool#1; [];
$#1047: bool#1; [];
$#1048: .dict#23; [];
$._if_res#1049: int#4; [];
$#1050: .dict#23; [];
$#1051: int#4; [];
$#1052: bool#1; [];
$#1053: .dict#23; [];
]{
bb#11 {
jmp bb#408; [];
}; []
bb#408 {
$#1021 = $self#1019._n_buckets; [];
$#1022 = f$__bool__#17($#1021); [];
condjump ($#1022) bb#411 bb#410; [];
}; []
bb#409 {
return; [];
}; []
bb#410 {
return 0; [];
}; []
bb#411 {
$step#1023 = 0; [];
$#1025 = $self#1019._n_buckets; [];
$mask#1024 = f$__sub__#140($#1025, 1); [];
$k#1026 = f$_dict_hash#95($key#1020); [];
$i#1027 = f$__and__#16($k#1026, $mask#1024); [];
$last#1028 = $i#1027; [];
jmp bb#412; [];
}; []
bb#412 {
$#1030 = $self#1019._flags; [];
$#1031 = f$__ac_isempty#143($#1030, $i#1027); [];
$#1032 = f$__bool__#17($#1031); [];
$#1033 = f$__invert__#63($#1032); [];
$#1034 = f$__bool__#276($#1033); [];
condjump ($#1034) bb#418 bb#416; [];
}; []
bb#413 {
$step#1023 = f$__add__#264($step#1023, 1); [];
$#1045 = f$__add__#264($i#1027, $step#1023); [];
$i#1027 = f$__and__#16($#1045, $mask#1024); [];
jmp bb#423; [];
}; [loopAttribute: loop(none, bb#412, bb#413, none, bb#414), ]
bb#414 {
$#1050 = $self#1019._flags; [];
$#1051 = f$__ac_iseither#68($#1050, $i#1027); [];
$#1052 = f$__bool__#17($#1051); [];
condjump ($#1052) bb#427 bb#428; [];
}; []
bb#415 {
$._bin_res#1029 = true; [];
jmp bb#417; [];
}; []
bb#416 {
$._bin_res#1029 = false; [];
jmp bb#417; [];
}; []
bb#417 {
$#1044 = f$__bool__#276($._bin_res#1029); [];
condjump ($#1044) bb#413 bb#414; [];
}; []
bb#418 {
$#1036 = $self#1019._flags; [];
$#1037 = f$__ac_isdel#80($#1036, $i#1027); [];
$#1038 = f$__bool__#17($#1037); [];
condjump ($#1038) bb#419 bb#422; [];
}; []
bb#419 {
$._bin_res#1035 = true; [];
jmp bb#421; [];
}; []
bb#420 {
$._bin_res#1035 = false; [];
jmp bb#421; [];
}; []
bb#421 {
$#1043 = f$__bool__#276($._bin_res#1035); [];
condjump ($#1043) bb#415 bb#416; [];
}; []
bb#422 {
$#1039 = $self#1019._keys; [];
$#1040 = f$__getitem__#286($#1039, $i#1027); [];
$#1041 = f$__ne__#13($#1040, $key#1020); [];
$#1042 = f$__bool__#276($#1041); [];
condjump ($#1042) bb#419 bb#420; [];
}; []
bb#423 {
$#1046 = f$__eq__#45($i#1027, $last#1028); [];
$#1047 = f$__bool__#276($#1046); [];
condjump ($#1047) bb#426 bb#425; [];
}; [loopAttribute: loop(none, bb#412, bb#413, none, bb#414), ]
bb#424 {
jmp bb#412; [];
}; [loopAttribute: loop(none, bb#412, bb#413, none, bb#414), ]
bb#425 {
jmp bb#424; [];
}; [loopAttribute: loop(none, bb#412, bb#413, none, bb#414), ]
bb#426 {
$#1048 = $self#1019._n_buckets; [];
return $#1048; [];
}; [loopAttribute: loop(none, bb#412, bb#413, none, bb#414), ]
bb#427 {
$#1053 = $self#1019._n_buckets; [];
$._if_res#1049 = $#1053; [];
jmp bb#429; [];
}; []
bb#428 {
$._if_res#1049 = $i#1027; [];
jmp bb#429; [];
}; []
bb#429 {
return $._if_res#1049; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ne__#13(
$self#1257: str#0; [];
$other#1258: str#0; [];
) -> bool#1 [
$#1259: bool#1; [];
$#1260: bool#1; [];
$#1261: bool#1; [];
]{
bb#12 {
$#1259 = f$__eq__#97($self#1257, $other#1258); [];
$#1260 = f$__bool__#276($#1259); [];
$#1261 = f$__invert__#63($#1260); [];
return $#1261; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_set_isdel_true#14(
$flag#968: Pointer[UInt32]#21; [];
$i#969: int#4; [];
) -> void#6 [
$#970: int#4; [];
$#971: int#4; [];
$#972: UInt32#20; [];
$#973: int#4; [];
$#974: int#4; [];
$#975: int#4; [];
$#976: UInt32#20; [];
$#977: UInt32#20; [];
]{
bb#13 {
$#970 = f$__rshift__#121($i#969, 4); [];
$#971 = f$__rshift__#121($i#969, 4); [];
$#972 = f$__getitem__#283($flag#968, $#971); [];
$#973 = f$__and__#16($i#969, 15); [];
$#974 = f$__lshift__#134($#973, 1); [];
$#975 = f$__lshift__#134(1, $#974); [];
$#976 = f$2#213($#975); [];
$#977 = f$__or__#153($#972, $#976); [];
f$__setitem__#78($flag#968, $#970, $#977); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__rshift__#15(
$self#416: UInt32#20; [];
$other#417: UInt32#20; [];
) -> UInt32#20 [
]{
internal: UInt32#20.__rshift__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__and__#16(
$self#367: int#4; [];
$other#368: int#4; [];
) -> int#4 [
]{
internal: int#4.__and__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#17(
$self#340: int#4; [];
) -> bool#1 [
]{
internal: int#4.__bool__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#18(
) -> Optional[int]#35 [
]{
internal: Optional[int]#35.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#19(
$a1#295: int#4; [];
$a2#296: int#4; [];
$a3#297: int#4; [];
$a4#298: int#4; [];
) -> .Tuple.4#37 [
]{
internal: .Tuple.4#37.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$2#20(
$self#1280: str#0; [];
$s#1281: .slice#39; [];
) -> str#0 [
$#1283: int#4; [];
$#1284: .slice#39; [];
$#1285: Optional[int]#35; [];
$#1286: .slice#39; [];
$#1287: Optional[int]#35; [];
$#1288: Optional[int]#35; [];
$start#1289: int#4; [];
$stop#1290: int#4; [];
$step#1291: int#4; [];
$length#1292: int#4; [];
$#1293: str#0; [];
$#1294: Pointer[byte]#43; [];
$#1295: str#0; [];
]{
bb#19 {
$#1283 = f$len#175($self#1280); [];
$#1284 = $s#1281.start; [];
$#1285 = f$1#151($#1284); [];
$#1286 = $s#1281.end; [];
$#1287 = f$1#151($#1286); [];
$#1288 = f$__new__#18(); [];
$._assign_95#1282 = f$adjust_indices#132($#1283, $#1285, $#1287, $#1288); [];
$start#1289 = $._assign_95#1282.a1; [];
$stop#1290 = $._assign_95#1282.a2; [];
$step#1291 = $._assign_95#1282.a3; [];
$length#1292 = $._assign_95#1282.a4; [];
$#1293 = $self#1280.ptr; [];
$#1294 = f$__add__#127($#1293, $start#1289); [];
$#1295 = f$__new__#160($#1294, $length#1292); [];
return $#1295; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#21(
$start#663: int#4; [];
$end#664: int#4; [];
) -> .slice#39 [
]{
internal: .slice#39.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#22(
$self#1262: str#0; [];
$idx#1263: int#4; [];
) -> str#0 [
$#1264: bool#1; [];
$#1265: bool#1; [];
$#1266: int#4; [];
$._bin_res#1267: bool#1; [];
$#1268: bool#1; [];
$#1269: bool#1; [];
$#1270: int#4; [];
$#1271: bool#1; [];
$#1272: bool#1; [];
$#1273: bool#1; [];
$#1274: bool#1; [];
$#1275: bool#1; [];
$#1277: str#0; [];
$#1278: Pointer[byte]#43; [];
$#1279: str#0; [];
]{
bb#21 {
jmp bb#537; [];
}; []
bb#537 {
$#1264 = f$__lt__#287($idx#1263, 0); [];
$#1265 = f$__bool__#276($#1264); [];
condjump ($#1265) bb#540 bb#539; [];
}; []
bb#538 {
jmp bb#541; [];
}; []
bb#539 {
jmp bb#538; [];
}; []
bb#540 {
$#1266 = f$len#175($self#1262); [];
$idx#1263 = f$__add__#264($idx#1263, $#1266); [];
jmp bb#538; [];
}; []
bb#541 {
$#1268 = f$__le__#107(0, $idx#1263); [];
$#1269 = f$__bool__#276($#1268); [];
condjump ($#1269) bb#548 bb#546; [];
}; []
bb#542 {
$#1277 = $self#1262.ptr; [];
$#1278 = f$__add__#127($#1277, $idx#1263); [];
$#1279 = f$__new__#160($#1278, 1); [];
return $#1279; [];
}; []
bb#543 {
jmp bb#542; [];
}; []
bb#544 {
$._typ_232#1276 = f$__new__#271(); [];
f$2#265($._typ_232#1276, 'string index out of range'); [];
throw ($._typ_232#1276); [];
}; []
bb#545 {
$._bin_res#1267 = true; [];
jmp bb#547; [];
}; []
bb#546 {
$._bin_res#1267 = false; [];
jmp bb#547; [];
}; []
bb#547 {
$#1273 = f$__bool__#276($._bin_res#1267); [];
$#1274 = f$__invert__#63($#1273); [];
$#1275 = f$__bool__#276($#1274); [];
condjump ($#1275) bb#544 bb#543; [];
}; []
bb#548 {
$#1270 = f$len#175($self#1262); [];
$#1271 = f$__lt__#287($idx#1263, $#1270); [];
$#1272 = f$__bool__#276($#1271); [];
condjump ($#1272) bb#545 bb#546; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$from_ptr#23(
$t#1327: Pointer[byte]#43; [];
) -> str#0 [
$n#1328: int#4; [];
$p#1329: Pointer[byte]#43; [];
$#1330: str#0; [];
]{
bb#22 {
$n#1328 = f$strlen#119($t#1327); [];
$p#1329 = f$2#211($n#1328); [];
f$memcpy#130($p#1329, $t#1327, $n#1328); [];
$#1330 = f$__new__#160($p#1329, $n#1328); [];
return $#1330; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__len__#24(
$self#1017: .dict#23; [];
) -> int#4 [
$#1018: .dict#23; [];
]{
bb#23 {
$#1018 = $self#1017._size; [];
return $#1018; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_init_if_needed#25(
$self#1377: .EnvMap#24; [];
) -> void#6 [
$#1378: .EnvMap#24; [];
$#1379: int#4; [];
$#1380: bool#1; [];
$#1381: bool#1; [];
$env#1382: Pointer[Pointer[byte]]#52; [];
$p#1383: Pointer[byte]#43; [];
$i#1384: int#4; [];
$#1385: bool#1; [];
$s#1386: str#0; [];
$#1387: bool#1; [];
$j#1388: int#4; [];
$found#1389: bool#1; [];
$#1390: int#4; [];
$#1391: bool#1; [];
$#1392: bool#1; [];
$#1393: str#0; [];
$#1394: bool#1; [];
$#1395: bool#1; [];
$k#1396: str#0; [];
$._if_res#1397: str#0; [];
$#1398: bool#1; [];
$#1399: .slice#39; [];
$#1400: str#0; [];
$v#1401: str#0; [];
$._if_res#1402: str#0; [];
$#1403: bool#1; [];
$#1404: int#4; [];
$#1405: .rslice#64; [];
$#1406: str#0; [];
$#1407: .EnvMap#24; [];
]{
bb#24 {
jmp bb#572; [];
}; []
bb#572 {
$#1378 = $self#1377._map; [];
$#1379 = f$len#174($#1378); [];
$#1380 = f$__eq__#45($#1379, 0); [];
$#1381 = f$__bool__#276($#1380); [];
condjump ($#1381) bb#575 bb#574; [];
}; []
bb#573 {
return; [];
}; []
bb#574 {
jmp bb#573; [];
}; []
bb#575 {
$env#1382 = f$seq_env#147(); [];
$p#1383 = f$__getitem__#284($env#1382, 0); [];
$i#1384 = 0; [];
jmp bb#576; [];
}; []
bb#576 {
$#1385 = f$__bool__#186($p#1383); [];
condjump ($#1385) bb#577 bb#578; [];
}; []
bb#577 {
$s#1386 = f$from_ptr#23($p#1383); [];
jmp bb#579; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#578 {
jmp bb#573; [];
}; []
bb#579 {
$#1387 = f$__bool__#84($s#1386); [];
condjump ($#1387) bb#582 bb#581; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#580 {
$i#1384 = f$__add__#264($i#1384, 1); [];
$p#1383 = f$__getitem__#284($env#1382, $i#1384); [];
jmp bb#576; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#581 {
jmp bb#580; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#582 {
$j#1388 = 0; [];
$found#1389 = false; [];
jmp bb#583; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#583 {
$#1390 = f$len#175($s#1386); [];
$#1391 = f$__lt__#287($j#1388, $#1390); [];
$#1392 = f$__bool__#276($#1391); [];
condjump ($#1392) bb#584 bb#585; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#584 {
jmp bb#586; [];
}; [loopAttribute: loop(none, bb#583, bb#584, none, bb#585), ]
bb#585 {
$#1398 = f$__bool__#276($found#1389); [];
condjump ($#1398) bb#590 bb#591; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#586 {
$#1393 = f$__getitem__#22($s#1386, $j#1388); [];
$#1394 = f$__eq__#97($#1393, '='); [];
$#1395 = f$__bool__#276($#1394); [];
condjump ($#1395) bb#589 bb#588; [];
}; [loopAttribute: loop(none, bb#583, bb#584, none, bb#585), ]
bb#587 {
$j#1388 = f$__add__#264($j#1388, 1); [];
jmp bb#583; [];
}; [loopAttribute: loop(none, bb#583, bb#584, none, bb#585), ]
bb#588 {
jmp bb#587; [];
}; [loopAttribute: loop(none, bb#583, bb#584, none, bb#585), ]
bb#589 {
$found#1389 = true; [];
jmp bb#585; [];
}; [loopAttribute: loop(none, bb#583, bb#584, none, bb#585), ]
bb#590 {
$#1399 = f$__new__#21(0, $j#1388); [];
$#1400 = f$2#20($s#1386, $#1399); [];
$._if_res#1397 = $#1400; [];
jmp bb#592; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#591 {
$._if_res#1397 = $s#1386; [];
jmp bb#592; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#592 {
$k#1396 = $._if_res#1397; [];
$#1403 = f$__bool__#276($found#1389); [];
condjump ($#1403) bb#593 bb#594; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#593 {
$#1404 = f$__add__#264($j#1388, 1); [];
$#1405 = f$__new__#39($#1404); [];
$#1406 = f$4#155($s#1386, $#1405); [];
$._if_res#1402 = $#1406; [];
jmp bb#595; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#594 {
$._if_res#1402 = ''; [];
jmp bb#595; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
bb#595 {
$v#1401 = $._if_res#1402; [];
$#1407 = $self#1377._map; [];
f$__setitem__#123($#1407, $k#1396, $v#1401); [];
jmp bb#580; [];
}; [loopAttribute: loop(none, bb#576, bb#577, none, bb#578), ]
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$1#26(
$self#1408: .EnvMap#24; [];
$key#1409: str#0; [];
) -> str#0 [
$#1410: .EnvMap#24; [];
$#1411: str#0; [];
]{
bb#25 {
f$_init_if_needed#25($self#1408); [];
$#1410 = $self#1408._map; [];
$#1411 = f$__getitem__#279($#1410, $key#1409); [];
return $#1411; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__add__#27(
$self#393: float#3; [];
$other#394: float#3; [];
) -> float#3 [
]{
internal: float#3.__add__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$getenv#28(
$key#1417: str#0; [];
$default#1418: str#0; [];
) -> str#0 [
$._if_res#1419: str#0; [];
$#1420: bool#1; [];
$#1421: bool#1; [];
$#1422: str#0; [];
]{
bb#27 {
$#1420 = f$1#9($.environ#1416, $key#1417); [];
$#1421 = f$__bool__#276($#1420); [];
condjump ($#1421) bb#596 bb#597; [];
}; []
bb#596 {
$#1422 = f$1#26($.environ#1416, $key#1417); [];
$._if_res#1419 = $#1422; [];
jmp bb#598; [];
}; []
bb#597 {
$._if_res#1419 = $default#1418; [];
jmp bb#598; [];
}; []
bb#598 {
return $._if_res#1419; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__or__#29(
$self#369: int#4; [];
$other#370: int#4; [];
) -> int#4 [
]{
internal: int#4.__or__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$dlext#30(
) -> str#0 [
$#1366: bool#1; [];
$#1367: bool#1; [];
]{
bb#29 {
jmp bb#568; [];
}; []
bb#568 {
$#1366 = f$seq_is_macos#108(); [];
$#1367 = f$__bool__#276($#1366); [];
condjump ($#1367) bb#571 bb#570; [];
}; []
bb#569 {
return; [];
}; []
bb#570 {
return 'so'; [];
}; []
bb#571 {
return 'dylib'; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$_init#31(
$self#989: .dict#53; [];
) -> void#6 [
]{
bb#30 {
$self#989.self = 0; [];
$self#989.self = 0; [];
$self#989.self = 0; [];
$self#989.self = 0; [];
$self#989.self = f$__new__#59(); [];
$self#989.self = f$__new__#58(); [];
$self#989.self = f$__new__#56(); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_init#32(
$self#990: .dict#57; [];
) -> void#6 [
]{
bb#31 {
$self#990.self = 0; [];
$self#990.self = 0; [];
$self#990.self = 0; [];
$self#990.self = 0; [];
$self#990.self = f$__new__#59(); [];
$self#990.self = f$__new__#58(); [];
$self#990.self = f$__new__#55(); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_init#33(
$self#991: .dict#23; [];
) -> void#6 [
]{
bb#32 {
$self#991.self = 0; [];
$self#991.self = 0; [];
$self#991.self = 0; [];
$self#991.self = 0; [];
$self#991.self = f$__new__#59(); [];
$self#991.self = f$__new__#58(); [];
$self#991.self = f$__new__#58(); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#34(
$self#992: .dict#57; [];
) -> void#6 [
]{
bb#33 {
f$_init#32($self#992); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#35(
$self#993: .dict#53; [];
) -> void#6 [
]{
bb#34 {
f$_init#31($self#993); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#36(
$self#994: .dict#23; [];
) -> void#6 [
]{
bb#35 {
f$_init#33($self#994); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#37(
$self#409: Array[str]#11; [];
$index#410: int#4; [];
$what#411: str#0; [];
) -> void#6 [
]{
internal: Array[str]#11.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#38(
$self#412: Array[int]#9; [];
$index#413: int#4; [];
$what#414: int#4; [];
) -> void#6 [
]{
internal: Array[int]#9.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#39(
$start#662: int#4; [];
) -> .rslice#64 [
]{
internal: .rslice#64.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$1#40(
$data#402: Pointer[str]#22; [];
$len#403: int#4; [];
) -> Array[str]#11 [
]{
internal: Array[str]#11.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#41(
$data#404: Pointer[int]#67; [];
$len#405: int#4; [];
) -> Array[int]#9 [
]{
internal: Array[int]#9.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_resize#42(
$self#878: .list#15; [];
$new_cap#879: int#4; [];
) -> void#6 [
$p#880: Pointer[str]#22; [];
$#881: .list#15; [];
$#882: .list#15; [];
$#883: Pointer[byte]#43; [];
$#884: int#4; [];
$#885: int#4; [];
$#886: Pointer[byte]#43; [];
]{
bb#41 {
$#881 = $self#878.arr; [];
$#882 = $#881.ptr; [];
$#883 = f$as_byte#135($#882); [];
$#884 = f$sizeof#229(); [];
$#885 = f$__mul__#235($new_cap#879, $#884); [];
$#886 = f$realloc#116($#883, $#885); [];
$p#880 = f$1#222($#886); [];
$self#878.self = f$1#40($p#880, $new_cap#879); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_resize#43(
$self#887: .list#13; [];
$new_cap#888: int#4; [];
) -> void#6 [
$p#889: Pointer[int]#67; [];
$#890: .list#13; [];
$#891: .list#13; [];
$#892: Pointer[byte]#43; [];
$#893: int#4; [];
$#894: int#4; [];
$#895: Pointer[byte]#43; [];
]{
bb#42 {
$#890 = $self#887.arr; [];
$#891 = $#890.ptr; [];
$#892 = f$as_byte#136($#891); [];
$#893 = f$sizeof#230(); [];
$#894 = f$__mul__#235($new_cap#888, $#893); [];
$#895 = f$realloc#116($#892, $#894); [];
$p#889 = f$1#223($#895); [];
$self#887.self = f$1#41($p#889, $new_cap#888); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__div__#44(
$self#349: int#4; [];
$other#350: int#4; [];
) -> int#4 [
]{
internal: int#4.__div__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__eq__#45(
$self#355: int#4; [];
$other#356: int#4; [];
) -> bool#1 [
]{
internal: int#4.__eq__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$_kh_end#46(
$self#1226: .dict#23; [];
) -> int#4 [
$#1227: .dict#23; [];
]{
bb#45 {
$#1227 = $self#1226._n_buckets; [];
return $#1227; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_fsize#47(
$m#978: int#4; [];
) -> int#4 [
$._if_res#979: int#4; [];
$#980: bool#1; [];
$#981: bool#1; [];
$#982: int#4; [];
]{
bb#46 {
$#980 = f$__lt__#287($m#978, 16); [];
$#981 = f$__bool__#276($#980); [];
condjump ($#981) bb#401 bb#402; [];
}; []
bb#401 {
$._if_res#979 = 1; [];
jmp bb#403; [];
}; []
bb#402 {
$#982 = f$__rshift__#121($m#978, 4); [];
$._if_res#979 = $#982; [];
jmp bb#403; [];
}; []
bb#403 {
return $._if_res#979; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$append#48(
$self#868: .list#15; [];
$x#869: str#0; [];
) -> void#6 [
$#870: .list#15; [];
$#871: .list#15; [];
$#872: .list#15; [];
]{
bb#47 {
f$_resize_if_full#199($self#868); [];
$#870 = $self#868.arr; [];
$#871 = $self#868.len; [];
f$__setitem__#37($#870, $#871, $x#869); [];
$#872 = $self#868.len; [];
$self#868.self = f$__add__#264($#872, 1); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$append#49(
$self#873: .list#13; [];
$x#874: int#4; [];
) -> void#6 [
$#875: .list#13; [];
$#876: .list#13; [];
$#877: .list#13; [];
]{
bb#48 {
f$_resize_if_full#200($self#873); [];
$#875 = $self#873.arr; [];
$#876 = $self#873.len; [];
f$__setitem__#38($#875, $#876, $x#874); [];
$#877 = $self#873.len; [];
$self#873.self = f$__add__#264($#877, 1); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$adjust_indices_helper#50(
$length#669: int#4; [];
$start#670: int#4; [];
$stop#671: int#4; [];
$step#672: int#4; [];
) -> .Tuple.4#37 [
$#673: bool#1; [];
$#674: bool#1; [];
$#675: bool#1; [];
$#676: bool#1; [];
$._if_res#677: int#4; [];
$#678: bool#1; [];
$#679: bool#1; [];
$#680: bool#1; [];
$#681: bool#1; [];
$._if_res#682: int#4; [];
$#683: bool#1; [];
$#684: bool#1; [];
$#685: int#4; [];
$#686: bool#1; [];
$#687: bool#1; [];
$#688: bool#1; [];
$#689: bool#1; [];
$._if_res#690: int#4; [];
$#691: bool#1; [];
$#692: bool#1; [];
$#693: bool#1; [];
$#694: bool#1; [];
$._if_res#695: int#4; [];
$#696: bool#1; [];
$#697: bool#1; [];
$#698: int#4; [];
$#699: bool#1; [];
$#700: bool#1; [];
$#701: bool#1; [];
$#702: bool#1; [];
$#703: int#4; [];
$#704: int#4; [];
$#705: int#4; [];
$#706: int#4; [];
$#707: int#4; [];
$#708: .Tuple.4#37; [];
$#709: bool#1; [];
$#710: bool#1; [];
$#711: int#4; [];
$#712: int#4; [];
$#713: int#4; [];
$#714: int#4; [];
$#715: .Tuple.4#37; [];
$#716: .Tuple.4#37; [];
]{
bb#49 {
jmp bb#291; [];
}; []
bb#291 {
$#673 = f$__lt__#287($start#670, 0); [];
$#674 = f$__bool__#276($#673); [];
condjump ($#674) bb#294 bb#293; [];
}; []
bb#292 {
jmp bb#307; [];
}; []
bb#293 {
$#680 = f$__ge__#224($start#670, $length#669); [];
$#681 = f$__bool__#276($#680); [];
condjump ($#681) bb#303 bb#302; [];
}; []
bb#294 {
$start#670 = f$__add__#264($start#670, $length#669); [];
jmp bb#295; [];
}; []
bb#295 {
$#675 = f$__lt__#287($start#670, 0); [];
$#676 = f$__bool__#276($#675); [];
condjump ($#676) bb#298 bb#297; [];
}; []
bb#296 {
jmp bb#292; [];
}; []
bb#297 {
jmp bb#296; [];
}; []
bb#298 {
$#678 = f$__lt__#287($step#672, 0); [];
$#679 = f$__bool__#276($#678); [];
condjump ($#679) bb#299 bb#300; [];
}; []
bb#299 {
$._if_res#677 = -1; [];
jmp bb#301; [];
}; []
bb#300 {
$._if_res#677 = 0; [];
jmp bb#301; [];
}; []
bb#301 {
$start#670 = $._if_res#677; [];
jmp bb#296; [];
}; []
bb#302 {
jmp bb#292; [];
}; []
bb#303 {
$#683 = f$__lt__#287($step#672, 0); [];
$#684 = f$__bool__#276($#683); [];
condjump ($#684) bb#304 bb#305; [];
}; []
bb#304 {
$#685 = f$__sub__#140($length#669, 1); [];
$._if_res#682 = $#685; [];
jmp bb#306; [];
}; []
bb#305 {
$._if_res#682 = $length#669; [];
jmp bb#306; [];
}; []
bb#306 {
$start#670 = $._if_res#682; [];
jmp bb#292; [];
}; []
bb#307 {
$#686 = f$__lt__#287($stop#671, 0); [];
$#687 = f$__bool__#276($#686); [];
condjump ($#687) bb#310 bb#309; [];
}; []
bb#308 {
jmp bb#323; [];
}; []
bb#309 {
$#693 = f$__ge__#224($stop#671, $length#669); [];
$#694 = f$__bool__#276($#693); [];
condjump ($#694) bb#319 bb#318; [];
}; []
bb#310 {
$stop#671 = f$__add__#264($stop#671, $length#669); [];
jmp bb#311; [];
}; []
bb#311 {
$#688 = f$__lt__#287($stop#671, 0); [];
$#689 = f$__bool__#276($#688); [];
condjump ($#689) bb#314 bb#313; [];
}; []
bb#312 {
jmp bb#308; [];
}; []
bb#313 {
jmp bb#312; [];
}; []
bb#314 {
$#691 = f$__lt__#287($step#672, 0); [];
$#692 = f$__bool__#276($#691); [];
condjump ($#692) bb#315 bb#316; [];
}; []
bb#315 {
$._if_res#690 = -1; [];
jmp bb#317; [];
}; []
bb#316 {
$._if_res#690 = 0; [];
jmp bb#317; [];
}; []
bb#317 {
$stop#671 = $._if_res#690; [];
jmp bb#312; [];
}; []
bb#318 {
jmp bb#308; [];
}; []
bb#319 {
$#696 = f$__lt__#287($step#672, 0); [];
$#697 = f$__bool__#276($#696); [];
condjump ($#697) bb#320 bb#321; [];
}; []
bb#320 {
$#698 = f$__sub__#140($length#669, 1); [];
$._if_res#695 = $#698; [];
jmp bb#322; [];
}; []
bb#321 {
$._if_res#695 = $length#669; [];
jmp bb#322; [];
}; []
bb#322 {
$stop#671 = $._if_res#695; [];
jmp bb#308; [];
}; []
bb#323 {
$#699 = f$__lt__#287($step#672, 0); [];
$#700 = f$__bool__#276($#699); [];
condjump ($#700) bb#326 bb#325; [];
}; []
bb#324 {
$#716 = f$__new__#19($start#670, $stop#671, $step#672, 0); [];
return $#716; [];
}; []
bb#325 {
jmp bb#331; [];
}; []
bb#326 {
jmp bb#327; [];
}; []
bb#327 {
$#701 = f$__lt__#287($stop#671, $start#670); [];
$#702 = f$__bool__#276($#701); [];
condjump ($#702) bb#330 bb#329; [];
}; []
bb#328 {
jmp bb#324; [];
}; []
bb#329 {
jmp bb#328; [];
}; []
bb#330 {
$#703 = f$__sub__#140($start#670, $stop#671); [];
$#704 = f$__sub__#140($#703, 1); [];
$#705 = f$__neg__#88($step#672); [];
$#706 = f$__div__#44($#704, $#705); [];
$#707 = f$__add__#264($#706, 1); [];
$#708 = f$__new__#19($start#670, $stop#671, $step#672, $#707); [];
return $#708; [];
}; []
bb#331 {
$#709 = f$__lt__#287($start#670, $stop#671); [];
$#710 = f$__bool__#276($#709); [];
condjump ($#710) bb#334 bb#333; [];
}; []
bb#332 {
jmp bb#324; [];
}; []
bb#333 {
jmp bb#332; [];
}; []
bb#334 {
$#711 = f$__sub__#140($stop#671, $start#670); [];
$#712 = f$__sub__#140($#711, 1); [];
$#713 = f$__div__#44($#712, $step#672); [];
$#714 = f$__add__#264($#713, 1); [];
$#715 = f$__new__#19($start#670, $stop#671, $step#672, $#714); [];
return $#715; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$2#51(
$self#742: .ValueError#72; [];
$message#743: str#0; [];
) -> void#6 [
]{
bb#50 {
$self#742.self = f$__new__#274('ValueError', $message#743, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$8#52(
$b#338: UInt32#20; [];
) -> int#4 [
]{
internal: int#4.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#53(
) -> .ValueError#72 [
]{
internal: .ValueError#72.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__ne__#54(
$self#334: Pointer[byte]#43; [];
$other#335: Pointer[byte]#43; [];
) -> bool#1 [
]{
internal: Pointer[byte]#43.__ne__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#55(
) -> Pointer[.pyobj]#56 [
]{
internal: Pointer[.pyobj]#56.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#56(
) -> Pointer[Pointer[byte]]#52 [
]{
internal: Pointer[Pointer[byte]]#52.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#57(
) -> Pointer[byte]#43 [
]{
internal: Pointer[byte]#43.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#58(
) -> Pointer[str]#22 [
]{
internal: Pointer[str]#22.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#59(
) -> Pointer[UInt32]#21 [
]{
internal: Pointer[UInt32]#21.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__len__#60(
$self#406: Array[byte]#82; [];
) -> int#4 [
]{
internal: Array[byte]#82.__len__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$3#61(
$s#1331: str#0; [];
) -> float#3 [
$buf#1332: Array[byte]#82; [];
$n#1333: int#4; [];
$need_dyn_alloc#1334: bool#1; [];
$#1335: int#4; [];
$p#1336: Pointer[byte]#43; [];
$._if_res#1337: Pointer[byte]#43; [];
$#1338: bool#1; [];
$#1339: int#4; [];
$#1340: Pointer[byte]#43; [];
$#1341: Array[byte]#82; [];
$#1342: str#0; [];
$#1343: byte#7; [];
$end#1344: Pointer[byte]#43; [];
$result#1345: float#3; [];
$#1346: bool#1; [];
$#1347: Pointer[byte]#43; [];
$#1348: bool#1; [];
$#1349: bool#1; [];
$#1351: str#0; [];
]{
bb#60 {
$buf#1332 = new(Array[byte]#82, 32); [];
$n#1333 = f$len#175($s#1331); [];
$#1335 = f$len#176($buf#1332); [];
$need_dyn_alloc#1334 = f$__ge__#224($n#1333, $#1335); [];
$#1338 = f$__bool__#276($need_dyn_alloc#1334); [];
condjump ($#1338) bb#557 bb#558; [];
}; []
bb#557 {
$#1339 = f$__add__#264($n#1333, 1); [];
$#1340 = f$alloc_atomic#103($#1339); [];
$._if_res#1337 = $#1340; [];
jmp bb#559; [];
}; []
bb#558 {
$#1341 = $buf#1332.ptr; [];
$._if_res#1337 = $#1341; [];
jmp bb#559; [];
}; []
bb#559 {
$p#1336 = $._if_res#1337; [];
$#1342 = $s#1331.ptr; [];
f$memcpy#130($p#1336, $#1342, $n#1333); [];
$#1343 = f$2#259(0); [];
f$__setitem__#77($p#1336, $n#1333, $#1343); [];
$end#1344 = f$__new__#57(); [];
$result#1345 = f$strtod#106($p#1336, &$end#1344); [];
jmp bb#560; [];
}; []
bb#560 {
$#1346 = f$__bool__#276($need_dyn_alloc#1334); [];
condjump ($#1346) bb#563 bb#562; [];
}; []
bb#561 {
jmp bb#564; [];
}; []
bb#562 {
jmp bb#561; [];
}; []
bb#563 {
f$1#277($p#1336); [];
jmp bb#561; [];
}; []
bb#564 {
$#1347 = f$__add__#127($p#1336, $n#1333); [];
$#1348 = f$__ne__#54($end#1344, $#1347); [];
$#1349 = f$__bool__#276($#1348); [];
condjump ($#1349) bb#567 bb#566; [];
}; []
bb#565 {
return $result#1345; [];
}; []
bb#566 {
jmp bb#565; [];
}; []
bb#567 {
$._typ_227#1350 = f$__new__#53(); [];
$#1351 = f$__add__#141('could not convert string to float: ', $s#1331); [];
f$2#51($._typ_227#1350, $#1351); [];
throw ($._typ_227#1350); [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$2#62(
$self#750: .AttributeError#93; [];
$message#751: str#0; [];
) -> void#6 [
]{
bb#61 {
$self#750.self = f$__new__#274('AttributeError', $message#751, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__invert__#63(
$self#389: bool#1; [];
) -> bool#1 [
]{
internal: bool#1.__invert__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$_ensure_not_none#64(
$p#849: Pointer[byte]#43; [];
$memb#850: str#0; [];
) -> void#6 [
$#851: bool#1; [];
$#852: bool#1; [];
$#853: bool#1; [];
$#855: str#0; [];
$#856: str#0; [];
]{
bb#63 {
jmp bb#385; [];
}; []
bb#385 {
$#851 = f$__bool__#186($p#849); [];
$#852 = f$__invert__#63($#851); [];
$#853 = f$__bool__#276($#852); [];
condjump ($#853) bb#388 bb#387; [];
}; []
bb#386 {
return; [];
}; []
bb#387 {
jmp bb#386; [];
}; []
bb#388 {
$._typ_226#854 = f$__new__#258(); [];
$#855 = f$__add__#141(''NoneType' object has no attribute '', $memb#850); [];
$#856 = f$__add__#141($#855, '''); [];
f$2#62($._typ_226#854, $#856); [];
throw ($._typ_226#854); [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$strtoll#65(
$.a0#466: Pointer[byte]#43; [];
$.a1#467: Pointer[Pointer[byte]]#52; [];
$.a2#468: Int32#97; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$sin#66(
$.a0#503: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$acos#67(
$.a0#497: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_iseither#68(
$flag#936: Pointer[UInt32]#21; [];
$i#937: int#4; [];
) -> int#4 [
$#938: int#4; [];
$#939: UInt32#20; [];
$#940: int#4; [];
$#941: int#4; [];
$#942: UInt32#20; [];
$#943: UInt32#20; [];
$#944: int#4; [];
$#945: int#4; [];
]{
bb#67 {
$#938 = f$__rshift__#121($i#937, 4); [];
$#939 = f$__getitem__#283($flag#936, $#938); [];
$#940 = f$__and__#16($i#937, 15); [];
$#941 = f$__lshift__#134($#940, 1); [];
$#942 = f$2#213($#941); [];
$#943 = f$__rshift__#15($#939, $#942); [];
$#944 = f$8#52($#943); [];
$#945 = f$__and__#16($#944, 3); [];
return $#945; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$round#69(
$.a0#496: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$expm1#70(
$.a0#487: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$fopen#71(
$.a0#528: Pointer[byte]#43; [];
$.a1#529: Pointer[byte]#43; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$exp#72(
$.a0#486: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ferror#73(
$.a0#526: Pointer[byte]#43; [];
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__invert__#74(
$self#342: int#4; [];
) -> int#4 [
]{
internal: int#4.__invert__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$fmod#75(
$.a0#484: float#3; [];
$.a1#485: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#76(
$self#323: Pointer[str]#22; [];
$index#324: int#4; [];
$what#325: str#0; [];
) -> void#6 [
]{
internal: Pointer[str]#22.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#77(
$self#326: Pointer[byte]#43; [];
$index#327: int#4; [];
$what#328: byte#7; [];
) -> void#6 [
]{
internal: Pointer[byte]#43.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#78(
$self#329: Pointer[UInt32]#21; [];
$index#330: int#4; [];
$what#331: UInt32#20; [];
) -> void#6 [
]{
internal: Pointer[UInt32]#21.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$pow#79(
$.a0#494: float#3; [];
$.a1#495: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_isdel#80(
$flag#926: Pointer[UInt32]#21; [];
$i#927: int#4; [];
) -> int#4 [
$#928: int#4; [];
$#929: UInt32#20; [];
$#930: int#4; [];
$#931: int#4; [];
$#932: UInt32#20; [];
$#933: UInt32#20; [];
$#934: int#4; [];
$#935: int#4; [];
]{
bb#79 {
$#928 = f$__rshift__#121($i#927, 4); [];
$#929 = f$__getitem__#283($flag#926, $#928); [];
$#930 = f$__and__#16($i#927, 15); [];
$#931 = f$__lshift__#134($#930, 1); [];
$#932 = f$2#213($#931); [];
$#933 = f$__rshift__#15($#929, $#932); [];
$#934 = f$8#52($#933); [];
$#935 = f$__and__#16($#934, 1); [];
return $#935; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$seq_pid#81(
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#82(
$a1#288: .dict#23; [];
) -> .Tuple.1#50 [
]{
internal: .Tuple.1#50.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$tanh#83(
$.a0#507: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#84(
$self#382: str#0; [];
) -> bool#1 [
$#383: str#0; [];
$#384: bool#1; [];
]{
bb#83 {
$#383 = $self#382.len; [];
$#384 = f$__ne__#168($#383, 0); [];
return $#384; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__iter__#85(
$self#861: .list#15; [];
) -> Generator[str]#110 [
$i#862: int#4; [];
$#863: .list#15; [];
$#864: bool#1; [];
$#865: bool#1; [];
$#866: .list#15; [];
$#867: str#0; [];
]{
bb#84 {
$i#862 = 0; [];
jmp bb#389; [];
}; []
bb#389 {
$#863 = $self#861.len; [];
$#864 = f$__lt__#287($i#862, $#863); [];
$#865 = f$__bool__#276($#864); [];
condjump ($#865) bb#390 bb#391; [];
}; []
bb#390 {
$#866 = $self#861.arr; [];
$#867 = f$__getitem__#260($#866, $i#862); [];
yield $#867 bb#392; [];
}; [loopAttribute: loop(none, bb#389, bb#390, none, bb#391), ]
bb#391 {
return; [];
}; []
bb#392 {
$i#862 = f$__add__#264($i#862, 1); [];
jmp bb#389; [];
}; [loopAttribute: loop(none, bb#389, bb#390, none, bb#391), ]
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#86(
$self#396: Optional[int]#35; [];
) -> bool#1 [
]{
internal: Optional[int]#35.__bool__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$floor#87(
$.a0#482: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__neg__#88(
$self#341: int#4; [];
) -> int#4 [
]{
internal: int#4.__neg__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$istitle#89(
$.a0#480: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__elemsize__#90(
) -> int#4 [
]{
internal: Pointer[str]#22.__elemsize__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__elemsize__#91(
) -> int#4 [
]{
internal: Pointer[int]#67.__elemsize__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$log2#92(
$.a0#515: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$fabs#93(
$.a0#483: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$isalpha#94(
$.a0#479: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_dict_hash#95(
$key#983: str#0; [];
) -> int#4 [
$k#984: int#4; [];
$#985: int#4; [];
$#986: int#4; [];
$#987: int#4; [];
$#988: int#4; [];
]{
bb#94 {
$k#984 = f$hash#125($key#983); [];
$#985 = f$__rshift__#121($k#984, 33); [];
$#986 = f$__xor__#209($#985, $k#984); [];
$#987 = f$__lshift__#134($k#984, 11); [];
$#988 = f$__xor__#209($#986, $#987); [];
return $#988; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$sinh#96(
$.a0#506: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__eq__#97(
$self#1241: str#0; [];
$other#1242: str#0; [];
) -> bool#1 [
$#1243: int#4; [];
$#1244: int#4; [];
$#1245: bool#1; [];
$#1246: bool#1; [];
$i#1247: int#4; [];
$#1248: int#4; [];
$#1249: bool#1; [];
$#1250: bool#1; [];
$#1251: str#0; [];
$#1252: byte#7; [];
$#1253: str#0; [];
$#1254: byte#7; [];
$#1255: bool#1; [];
$#1256: bool#1; [];
]{
bb#96 {
jmp bb#526; [];
}; []
bb#526 {
$#1243 = f$len#175($self#1241); [];
$#1244 = f$len#175($other#1242); [];
$#1245 = f$__ne__#168($#1243, $#1244); [];
$#1246 = f$__bool__#276($#1245); [];
condjump ($#1246) bb#529 bb#528; [];
}; []
bb#527 {
$i#1247 = 0; [];
jmp bb#530; [];
}; []
bb#528 {
jmp bb#527; [];
}; []
bb#529 {
return false; [];
}; []
bb#530 {
$#1248 = f$len#175($self#1241); [];
$#1249 = f$__lt__#287($i#1247, $#1248); [];
$#1250 = f$__bool__#276($#1249); [];
condjump ($#1250) bb#531 bb#532; [];
}; []
bb#531 {
jmp bb#533; [];
}; [loopAttribute: loop(none, bb#530, bb#531, none, bb#532), ]
bb#532 {
return true; [];
}; []
bb#533 {
$#1251 = $self#1241.ptr; [];
$#1252 = f$__getitem__#285($#1251, $i#1247); [];
$#1253 = $other#1242.ptr; [];
$#1254 = f$__getitem__#285($#1253, $i#1247); [];
$#1255 = f$__ne__#255($#1252, $#1254); [];
$#1256 = f$__bool__#276($#1255); [];
condjump ($#1256) bb#536 bb#535; [];
}; [loopAttribute: loop(none, bb#530, bb#531, none, bb#532), ]
bb#534 {
$i#1247 = f$__add__#264($i#1247, 1); [];
jmp bb#530; [];
}; [loopAttribute: loop(none, bb#530, bb#531, none, bb#532), ]
bb#535 {
jmp bb#534; [];
}; [loopAttribute: loop(none, bb#530, bb#531, none, bb#532), ]
bb#536 {
return false; [];
}; [loopAttribute: loop(none, bb#530, bb#531, none, bb#532), ]
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$tolower#98(
$.a0#477: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$islower#99(
$.a0#475: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$isspace#100(
$.a0#473: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$tan#101(
$.a0#504: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_realloc#102(
$.a0#446: Pointer[byte]#43; [];
$.a1#447: int#4; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$alloc_atomic#103(
$sz#656: int#4; [];
) -> Pointer[byte]#43 [
$#657: Pointer[byte]#43; [];
]{
bb#102 {
$#657 = f$seq_alloc_atomic#172($sz#656); [];
return $#657; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$isdigit#104(
$.a0#472: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__and__#105(
$self#418: UInt32#20; [];
$other#419: UInt32#20; [];
) -> UInt32#20 [
]{
internal: UInt32#20.__and__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$strtod#106(
$.a0#469: Pointer[byte]#43; [];
$.a1#470: Pointer[Pointer[byte]]#52; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__le__#107(
$self#363: int#4; [];
$other#364: int#4; [];
) -> bool#1 [
]{
internal: int#4.__le__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_is_macos#108(
) -> bool#1 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$status#109(
$self#754: .SystemExit#125; [];
) -> int#4 [
$#755: .SystemExit#125; [];
]{
bb#108 {
$#755 = $self#754._status; [];
return $#755; [];
}; []
}; [funcAttributes: property,.class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_rlock_acquire#110(
$.a0#461: Pointer[byte]#43; [];
$.a1#462: bool#1; [];
$.a2#463: float#3; [];
) -> bool#1 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_rlock_new#111(
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzopen#112(
$.a0#560: Pointer[byte]#43; [];
$.a1#561: Pointer[byte]#43; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__invert__#113(
$self#397: Optional[int]#35; [];
) -> int#4 [
]{
internal: Optional[int]#35.__invert__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_i32_to_float#114(
$.a0#465: Int32#97; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_lock_release#115(
$.a0#460: Pointer[byte]#43; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$realloc#116(
$p#658: Pointer[byte]#43; [];
$sz#659: int#4; [];
) -> Pointer[byte]#43 [
$#660: Pointer[byte]#43; [];
]{
bb#115 {
$#660 = f$seq_realloc#102($p#658, $sz#659); [];
return $#660; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$_test_failed#117(
$file#432: str#0; [];
$line#433: int#4; [];
$msg#434: str#0; [];
) -> void#6 [
$s#435: str#0; [];
$#436: str#0; [];
$#437: str#0; [];
$#438: str#0; [];
$#439: str#0; [];
$#440: bool#1; [];
$#441: str#0; [];
$#442: str#0; [];
$#443: str#0; [];
]{
bb#116 {
$#436 = f$__add__#141('[1;31mTEST FAILED:[0m ', $file#432); [];
$#437 = f$__add__#141($#436, ' (line '); [];
$#438 = f$2#157($line#433); [];
$#439 = f$__add__#141($#437, $#438); [];
$s#435 = f$__add__#141($#439, ')'); [];
jmp bb#287; [];
}; []
bb#287 {
$#440 = f$__bool__#84($msg#434); [];
condjump ($#440) bb#290 bb#289; [];
}; []
bb#288 {
$#442 = f$__str__#170($s#435); [];
f$seq_print#250($#442); [];
$#443 = f$__str__#170('
'); [];
f$seq_print#250($#443); [];
return; [];
}; []
bb#289 {
jmp bb#288; [];
}; []
bb#290 {
$#441 = f$__add__#141(': ', $msg#434); [];
$s#435 = f$__add__#141($s#435, $#441); [];
jmp bb#288; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$atoi#118(
$.a0#552: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$strlen#119(
$.a0#471: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_strdup#120(
$.a0#455: Pointer[byte]#43; [];
) -> str#0 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__rshift__#121(
$self#353: int#4; [];
$other#354: int#4; [];
) -> int#4 [
]{
internal: int#4.__rshift__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align_default#122(
$.a0#619: .seq#162; [];
$.a1#620: .seq#162; [];
$.a2#621: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#123(
$self#1005: .dict#23; [];
$key#1006: str#0; [];
$val#1007: str#0; [];
) -> void#6 [
$ret#1009: int#4; [];
$x#1010: int#4; [];
$#1011: .dict#23; [];
]{
bb#122 {
$._assign_76#1008 = f$_kh_put#242($self#1005, $key#1006); [];
$ret#1009 = $._assign_76#1008.a1; [];
$x#1010 = $._assign_76#1008.a2; [];
$#1011 = $self#1005._vals; [];
f$__setitem__#76($#1011, $x#1010, $val#1007); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_handle_exit#124(
$e#758: .SystemExit#125; [];
) -> void#6 [
$#759: int#4; [];
]{
bb#123 {
$#759 = f$status#109($e#758); [];
f$exit#149($#759); [];
return; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$hash#125(
$x#766: str#0; [];
) -> int#4 [
$#767: int#4; [];
]{
bb#124 {
'
    hash(x)

    Returns hashed value only for immutable objects
    '; [];
$#767 = f$__hash__#234($x#766); [];
return $#767; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$isalnum#126(
$.a0#478: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__add__#127(
$self#332: Pointer[byte]#43; [];
$other#333: int#4; [];
) -> Pointer[byte]#43 [
]{
internal: Pointer[byte]#43.__add__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_gc_add_roots#128(
$.a0#449: Pointer[byte]#43; [];
$.a1#450: Pointer[byte]#43; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$fseek#129(
$.a0#540: Pointer[byte]#43; [];
$.a1#541: int#4; [];
$.a2#542: Int32#97; [];
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$memcpy#130(
$dest#385: Pointer[byte]#43; [];
$src#386: Pointer[byte]#43; [];
$len#387: int#4; [];
) -> void#6 [
]{
internal: str#0.memcpy
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_gc_remove_roots#131(
$.a0#451: Pointer[byte]#43; [];
$.a1#452: Pointer[byte]#43; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$adjust_indices#132(
$length#665: int#4; [];
$start#666: Optional[int]#35; [];
$stop#667: Optional[int]#35; [];
$step#668: Optional[int]#35; [];
) -> .Tuple.4#37 [
$stepx#717: int#4; [];
$._if_res#718: int#4; [];
$#719: bool#1; [];
$#720: int#4; [];
$startx#721: int#4; [];
$stopx#722: int#4; [];
$#723: bool#1; [];
$#724: bool#1; [];
$#725: bool#1; [];
$._if_res#726: int#4; [];
$#727: bool#1; [];
$#728: int#4; [];
$._if_res#729: int#4; [];
$#730: bool#1; [];
$#731: int#4; [];
$._if_res#732: int#4; [];
$#733: bool#1; [];
$#734: int#4; [];
$#735: int#4; [];
$._if_res#736: int#4; [];
$#737: bool#1; [];
$#738: int#4; [];
$#739: int#4; [];
$#740: int#4; [];
$#741: .Tuple.4#37; [];
]{
bb#131 {
$#719 = f$__bool__#86($step#668); [];
condjump ($#719) bb#335 bb#336; [];
}; []
bb#335 {
$#720 = f$__invert__#113($step#668); [];
$._if_res#718 = $#720; [];
jmp bb#337; [];
}; []
bb#336 {
$._if_res#718 = 1; [];
jmp bb#337; [];
}; []
bb#337 {
$stepx#717 = $._if_res#718; [];
$startx#721 = 0; [];
$stopx#722 = 0; [];
$#723 = f$__ne__#168($stepx#717, 0); [];
assert ($#723) bb#338; [];
}; []
bb#338 {
jmp bb#339; [];
}; []
bb#339 {
$#724 = f$__gt__#191($stepx#717, 0); [];
$#725 = f$__bool__#276($#724); [];
condjump ($#725) bb#342 bb#341; [];
}; []
bb#340 {
$#741 = f$adjust_indices_helper#50($length#665, $startx#721, $stopx#722, $stepx#717); [];
return $#741; [];
}; []
bb#341 {
$#733 = f$__bool__#86($start#666); [];
condjump ($#733) bb#349 bb#350; [];
}; []
bb#342 {
$#727 = f$__bool__#86($start#666); [];
condjump ($#727) bb#343 bb#344; [];
}; []
bb#343 {
$#728 = f$__invert__#113($start#666); [];
$._if_res#726 = $#728; [];
jmp bb#345; [];
}; []
bb#344 {
$._if_res#726 = 0; [];
jmp bb#345; [];
}; []
bb#345 {
$startx#721 = $._if_res#726; [];
$#730 = f$__bool__#86($stop#667); [];
condjump ($#730) bb#346 bb#347; [];
}; []
bb#346 {
$#731 = f$__invert__#113($stop#667); [];
$._if_res#729 = $#731; [];
jmp bb#348; [];
}; []
bb#347 {
$._if_res#729 = $length#665; [];
jmp bb#348; [];
}; []
bb#348 {
$stopx#722 = $._if_res#729; [];
jmp bb#340; [];
}; []
bb#349 {
$#734 = f$__invert__#113($start#666); [];
$._if_res#732 = $#734; [];
jmp bb#351; [];
}; []
bb#350 {
$#735 = f$__sub__#140($length#665, 1); [];
$._if_res#732 = $#735; [];
jmp bb#351; [];
}; []
bb#351 {
$startx#721 = $._if_res#732; [];
$#737 = f$__bool__#86($stop#667); [];
condjump ($#737) bb#352 bb#353; [];
}; []
bb#352 {
$#738 = f$__invert__#113($stop#667); [];
$._if_res#736 = $#738; [];
jmp bb#354; [];
}; []
bb#353 {
$#739 = f$__add__#264($length#665, 1); [];
$#740 = f$__neg__#88($#739); [];
$._if_res#736 = $#740; [];
jmp bb#354; [];
}; []
bb#354 {
$stopx#722 = $._if_res#736; [];
jmp bb#340; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__len__#133(
$self#380: str#0; [];
) -> int#4 [
$#381: str#0; [];
]{
bb#132 {
$#381 = $self#380.len; [];
return $#381; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__lshift__#134(
$self#351: int#4; [];
$other#352: int#4; [];
) -> int#4 [
]{
internal: int#4.__lshift__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$as_byte#135(
$self#308: Pointer[str]#22; [];
) -> Pointer[byte]#43 [
]{
internal: Pointer[str]#22.as_byte
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$as_byte#136(
$self#309: Pointer[int]#67; [];
) -> Pointer[byte]#43 [
]{
internal: Pointer[int]#67.as_byte
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$cosh#137(
$.a0#505: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$6#138(
$b#337: byte#7; [];
) -> int#4 [
]{
internal: int#4.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$isupper#139(
$.a0#474: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__sub__#140(
$self#345: int#4; [];
$other#346: int#4; [];
) -> int#4 [
]{
internal: int#4.__sub__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__add__#141(
$self#422: str#0; [];
$other#423: str#0; [];
) -> str#0 [
$len1#424: int#4; [];
$len2#425: int#4; [];
$len3#426: int#4; [];
$p#427: Pointer[byte]#43; [];
$#428: str#0; [];
$#429: Pointer[byte]#43; [];
$#430: str#0; [];
$#431: str#0; [];
]{
bb#140 {
$len1#424 = $self#422.len; [];
$len2#425 = $other#423.len; [];
$len3#426 = f$__add__#264($len1#424, $len2#425); [];
$p#427 = f$2#211($len3#426); [];
$#428 = $self#422.ptr; [];
f$memcpy#130($p#427, $#428, $len1#424); [];
$#429 = f$__add__#127($p#427, $len1#424); [];
$#430 = $other#423.ptr; [];
f$memcpy#130($#429, $#430, $len2#425); [];
$#431 = f$__new__#160($p#427, $len3#426); [];
return $#431; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$atanh#142(
$.a0#510: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_isempty#143(
$flag#916: Pointer[UInt32]#21; [];
$i#917: int#4; [];
) -> int#4 [
$#918: int#4; [];
$#919: UInt32#20; [];
$#920: int#4; [];
$#921: int#4; [];
$#922: UInt32#20; [];
$#923: UInt32#20; [];
$#924: int#4; [];
$#925: int#4; [];
]{
bb#142 {
$#918 = f$__rshift__#121($i#917, 4); [];
$#919 = f$__getitem__#283($flag#916, $#918); [];
$#920 = f$__and__#16($i#917, 15); [];
$#921 = f$__lshift__#134($#920, 1); [];
$#922 = f$2#213($#921); [];
$#923 = f$__rshift__#15($#919, $#922); [];
$#924 = f$8#52($#923); [];
$#925 = f$__and__#16($#924, 2); [];
return $#925; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__new__#144(
) -> .dict#57 [
]{
internal: .dict#57.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#145(
) -> .dict#53 [
]{
internal: .dict#53.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#146(
) -> .dict#23 [
]{
internal: .dict#23.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_env#147(
) -> Pointer[Pointer[byte]]#52 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ldexp#148(
$.a0#488: float#3; [];
$.a1#489: int#4; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$exit#149(
$.a0#549: int#4; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$log2#150(
$.a0#491: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$1#151(
$what#395: int#4; [];
) -> Optional[int]#35 [
]{
internal: Optional[int]#35.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_stdout#152(
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__or__#153(
$self#420: UInt32#20; [];
$other#421: UInt32#20; [];
) -> UInt32#20 [
]{
internal: UInt32#20.__or__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_stderr#154(
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$4#155(
$self#1296: str#0; [];
$s#1297: .rslice#64; [];
) -> str#0 [
$#1299: int#4; [];
$#1300: .rslice#64; [];
$#1301: Optional[int]#35; [];
$#1302: Optional[int]#35; [];
$#1303: Optional[int]#35; [];
$start#1304: int#4; [];
$stop#1305: int#4; [];
$step#1306: int#4; [];
$length#1307: int#4; [];
$#1308: str#0; [];
$#1309: Pointer[byte]#43; [];
$#1310: str#0; [];
]{
bb#154 {
$#1299 = f$len#175($self#1296); [];
$#1300 = $s#1297.start; [];
$#1301 = f$1#151($#1300); [];
$#1302 = f$__new__#18(); [];
$#1303 = f$__new__#18(); [];
$._assign_97#1298 = f$adjust_indices#132($#1299, $#1301, $#1302, $#1303); [];
$start#1304 = $._assign_97#1298.a1; [];
$stop#1305 = $._assign_97#1298.a2; [];
$step#1306 = $._assign_97#1298.a3; [];
$length#1307 = $._assign_97#1298.a4; [];
$#1308 = $self#1296.ptr; [];
$#1309 = f$__add__#127($#1308, $start#1304); [];
$#1310 = f$__new__#160($#1309, $length#1307); [];
return $#1310; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$2#156(
$what#375: str#0; [];
) -> str#0 [
$#376: str#0; [];
]{
bb#155 {
$#376 = f$__str__#170($what#375); [];
return $#376; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$2#157(
$what#377: int#4; [];
) -> str#0 [
$#378: str#0; [];
]{
bb#156 {
$#378 = f$__str__#280($what#377); [];
return $#378; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$hello_name#158(
$name#1429: str#0; [];
) -> void#6 [
$#1432: str#0; [];
$#1433: str#0; [];
$#1434: str#0; [];
$#1435: str#0; [];
]{
bb#157 {
$._typ_235#1430 = f$__new__#7(); [];
f$3#5($._typ_235#1430, 2); [];
$._lst_222#1431 = $._typ_235#1430; [];
f$append#48($._lst_222#1431, 'Hello '); [];
$#1432 = f$2#156($name#1429); [];
f$append#48($._lst_222#1431, $#1432); [];
$#1433 = f$cat#8($._lst_222#1431); [];
$#1434 = f$__str__#170($#1433); [];
f$seq_print#250($#1434); [];
$#1435 = f$__str__#170('
'); [];
f$seq_print#250($#1435); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$seq_time#159(
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#160(
$p#305: Pointer[byte]#43; [];
$l#306: int#4; [];
) -> str#0 [
]{
internal: str#0.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$1#161(
$self#373: int#4; [];
$other#374: float#3; [];
) -> float#3 [
]{
internal: int#4.__mul__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$atan#162(
$.a0#499: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$toupper#163(
$.a0#476: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$acosh#164(
$.a0#508: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_free#165(
$.a0#448: Pointer[byte]#43; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$asinh#166(
$.a0#509: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_gc_exclude_static_roots#167(
$.a0#453: Pointer[byte]#43; [];
$.a1#454: Pointer[byte]#43; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__ne__#168(
$self#357: int#4; [];
$other#358: int#4; [];
) -> bool#1 [
]{
internal: int#4.__ne__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$dlsym#169(
$.a0#555: Pointer[byte]#43; [];
$.a1#556: Pointer[byte]#43; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__str__#170(
$what#379: str#0; [];
) -> str#0 [
]{
bb#169 {
return $what#379; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$omp_get_thread_num#171(
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_alloc_atomic#172(
$.a0#445: int#4; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$log#173(
$.a0#490: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$len#174(
$x#760: .dict#23; [];
) -> int#4 [
$#761: int#4; [];
]{
bb#173 {
'
    len(x)

    Return the length of x
    '; [];
$#761 = f$__len__#24($x#760); [];
return $#761; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$len#175(
$x#762: str#0; [];
) -> int#4 [
$#763: int#4; [];
]{
bb#174 {
'
    len(x)

    Return the length of x
    '; [];
$#763 = f$__len__#133($x#762); [];
return $#763; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$len#176(
$x#764: Array[byte]#82; [];
) -> int#4 [
$#765: int#4; [];
]{
bb#175 {
'
    len(x)

    Return the length of x
    '; [];
$#765 = f$__len__#60($x#764); [];
return $#765; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$sqrt#177(
$.a0#493: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align_splice#178(
$.a0#601: .seq#162; [];
$.a1#602: .seq#162; [];
$.a2#603: Pointer[Int8]#183; [];
$.a3#604: Int8#182; [];
$.a4#605: Int8#182; [];
$.a5#606: Int8#182; [];
$.a6#607: Int8#182; [];
$.a7#608: int#4; [];
$.a8#609: int#4; [];
$.a9#610: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$asin#179(
$.a0#498: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$done#180(
$self#399: Generator[str]#110; [];
) -> bool#1 [
]{
internal: Generator[str]#110.done
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_lock_acquire#181(
$.a0#457: Pointer[byte]#43; [];
$.a1#458: bool#1; [];
$.a2#459: float#3; [];
) -> bool#1 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$1#182(
) -> .EnvMap#24 [
$#1376: .Tuple.1#50; [];
]{
bb#181 {
$._typ_231#1375 = f$__new__#146(); [];
f$1#36($._typ_231#1375); [];
$#1376 = f$__new__#82($._typ_231#1375); [];
return $#1376; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_gc_clear_roots#183(
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_str_ptr#184(
$.a0#456: Pointer[byte]#43; [];
) -> str#0 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_lock_new#185(
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#186(
$self#314: Pointer[byte]#43; [];
) -> bool#1 [
]{
internal: Pointer[byte]#43.__bool__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_stdin#187(
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_make_assert_error#188(
$msg#756: str#0; [];
) -> .AssertionError#148 [
]{
bb#187 {
$._typ_223#757 = f$__new__#203(); [];
f$2#273($._typ_223#757, $msg#756); [];
return $._typ_223#757; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$seq_check_errno#189(
) -> str#0 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_time_monotonic#190(
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__gt__#191(
$self#361: int#4; [];
$other#362: int#4; [];
) -> bool#1 [
]{
internal: int#4.__gt__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$erf#192(
$.a0#516: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$erfc#193(
$.a0#517: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$modf#194(
$.a0#524: float#3; [];
$.a1#525: Pointer[float]#185; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_raw_type_str#195(
$p#822: Pointer[byte]#43; [];
$name#823: str#0; [];
) -> str#0 [
$pstr#824: str#0; [];
$total#825: int#4; [];
$#826: str#0; [];
$#827: int#4; [];
$#828: int#4; [];
$#829: str#0; [];
$#830: int#4; [];
$buf#831: Pointer[byte]#43; [];
$where#832: int#4; [];
$#833: byte#7; [];
$#834: Pointer[byte]#43; [];
$#835: str#0; [];
$#836: str#0; [];
$#837: str#0; [];
$#838: byte#7; [];
$#839: byte#7; [];
$#840: byte#7; [];
$#841: byte#7; [];
$#842: Pointer[byte]#43; [];
$#843: str#0; [];
$#844: str#0; [];
$#845: str#0; [];
$#846: byte#7; [];
$#847: str#0; [];
$#848: str#0; [];
]{
bb#194 {
$pstr#824 = f$seq_str_ptr#184($p#822); [];
$#826 = $name#823.len; [];
$#827 = f$__add__#264(1, $#826); [];
$#828 = f$__add__#264($#827, 4); [];
$#829 = $pstr#824.len; [];
$#830 = f$__add__#264($#828, $#829); [];
$total#825 = f$__add__#264($#830, 1); [];
$buf#831 = f$2#211($total#825); [];
$where#832 = 0; [];
$#833 = f$2#259(60); [];
f$__setitem__#77($buf#831, $where#832, $#833); [];
$where#832 = f$__add__#264($where#832, 1); [];
$#834 = f$__add__#127($buf#831, $where#832); [];
$#835 = $name#823.ptr; [];
$#836 = $name#823.len; [];
f$memcpy#130($#834, $#835, $#836); [];
$#837 = $name#823.len; [];
$where#832 = f$__add__#264($where#832, $#837); [];
$#838 = f$2#259(32); [];
f$__setitem__#77($buf#831, $where#832, $#838); [];
$where#832 = f$__add__#264($where#832, 1); [];
$#839 = f$2#259(97); [];
f$__setitem__#77($buf#831, $where#832, $#839); [];
$where#832 = f$__add__#264($where#832, 1); [];
$#840 = f$2#259(116); [];
f$__setitem__#77($buf#831, $where#832, $#840); [];
$where#832 = f$__add__#264($where#832, 1); [];
$#841 = f$2#259(32); [];
f$__setitem__#77($buf#831, $where#832, $#841); [];
$where#832 = f$__add__#264($where#832, 1); [];
$#842 = f$__add__#127($buf#831, $where#832); [];
$#843 = $pstr#824.ptr; [];
$#844 = $pstr#824.len; [];
f$memcpy#130($#842, $#843, $#844); [];
$#845 = $pstr#824.len; [];
$where#832 = f$__add__#264($where#832, $#845); [];
$#846 = f$2#259(62); [];
f$__setitem__#77($buf#831, $where#832, $#846); [];
$#847 = $pstr#824.ptr; [];
f$1#277($#847); [];
$#848 = f$__new__#160($buf#831, $total#825); [];
return $#848; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$tgamma#196(
$.a0#518: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$remainder#197(
$.a0#520: float#3; [];
$.a1#521: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$frexp#198(
$.a0#522: float#3; [];
$.a1#523: Pointer[Int32]#184; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_resize_if_full#199(
$self#896: .list#15; [];
) -> void#6 [
$#897: .list#15; [];
$#898: .list#15; [];
$#899: .list#15; [];
$#900: bool#1; [];
$#901: bool#1; [];
$new_cap#902: int#4; [];
$#903: .list#15; [];
$#904: int#4; [];
$#905: int#4; [];
]{
bb#198 {
jmp bb#393; [];
}; []
bb#393 {
$#897 = $self#896.len; [];
$#898 = $self#896.arr; [];
$#899 = $#898.len; [];
$#900 = f$__eq__#45($#897, $#899); [];
$#901 = f$__bool__#276($#900); [];
condjump ($#901) bb#396 bb#395; [];
}; []
bb#394 {
return; [];
}; []
bb#395 {
jmp bb#394; [];
}; []
bb#396 {
$#903 = $self#896.len; [];
$#904 = f$__mul__#235(3, $#903); [];
$#905 = f$__add__#264(1, $#904); [];
$new_cap#902 = f$__div__#44($#905, 2); [];
f$_resize#42($self#896, $new_cap#902); [];
jmp bb#394; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_resize_if_full#200(
$self#906: .list#13; [];
) -> void#6 [
$#907: .list#13; [];
$#908: .list#13; [];
$#909: .list#13; [];
$#910: bool#1; [];
$#911: bool#1; [];
$new_cap#912: int#4; [];
$#913: .list#13; [];
$#914: int#4; [];
$#915: int#4; [];
]{
bb#199 {
jmp bb#397; [];
}; []
bb#397 {
$#907 = $self#906.len; [];
$#908 = $self#906.arr; [];
$#909 = $#908.len; [];
$#910 = f$__eq__#45($#907, $#909); [];
$#911 = f$__bool__#276($#910); [];
condjump ($#911) bb#400 bb#399; [];
}; []
bb#398 {
return; [];
}; []
bb#399 {
jmp bb#398; [];
}; []
bb#400 {
$#913 = $self#906.len; [];
$#914 = f$__mul__#235(3, $#913); [];
$#915 = f$__add__#264(1, $#914); [];
$new_cap#912 = f$__div__#44($#915, 2); [];
f$_resize#43($self#906, $new_cap#912); [];
jmp bb#398; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$fclose#201(
$.a0#530: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$fgetc#202(
$.a0#527: Pointer[byte]#43; [];
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#203(
) -> .AssertionError#148 [
]{
internal: .AssertionError#148.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__contains__#204(
$self#1012: .dict#23; [];
$key#1013: str#0; [];
) -> bool#1 [
$#1014: int#4; [];
$#1015: int#4; [];
$#1016: bool#1; [];
]{
bb#203 {
$#1014 = f$_kh_get#12($self#1012, $key#1013); [];
$#1015 = f$_kh_end#46($self#1012); [];
$#1016 = f$__ne__#168($#1014, $#1015); [];
return $#1016; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$fwrite#205(
$.a0#535: Pointer[byte]#43; [];
$.a1#536: int#4; [];
$.a2#537: int#4; [];
$.a3#538: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_palign_dual#206(
$.a0#632: .pseq#216; [];
$.a1#633: .pseq#216; [];
$.a2#634: Pointer[Int8]#183; [];
$.a3#635: Int8#182; [];
$.a4#636: Int8#182; [];
$.a5#637: Int8#182; [];
$.a6#638: Int8#182; [];
$.a7#639: int#4; [];
$.a8#640: int#4; [];
$.a9#641: int#4; [];
$.a10#642: int#4; [];
$.a11#643: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_rlock_release#207(
$.a0#464: Pointer[byte]#43; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ftell#208(
$.a0#539: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__xor__#209(
$self#371: int#4; [];
$other#372: int#4; [];
) -> int#4 [
]{
internal: int#4.__xor__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$2#210(
$sz#312: int#4; [];
) -> Pointer[UInt32]#21 [
]{
internal: Pointer[UInt32]#21.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$2#211(
$sz#313: int#4; [];
) -> Pointer[byte]#43 [
]{
internal: Pointer[byte]#43.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$fgets#212(
$.a0#543: Pointer[byte]#43; [];
$.a1#544: int#4; [];
$.a2#545: Pointer[byte]#43; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$2#213(
$what#415: int#4; [];
) -> UInt32#20 [
]{
internal: UInt32#20.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$getline#214(
$.a0#546: Pointer[Pointer[byte]]#52; [];
$n#547: Pointer[int]#67; [];
$file#548: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$system#215(
$cmd#550: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$2#216(
$self#746: .KeyError#27; [];
$message#747: str#0; [];
) -> void#6 [
]{
bb#215 {
$self#746.self = f$__new__#274('KeyError', $message#747, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$free#217(
$.a0#551: Pointer[byte]#43; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$next#218(
$self#398: Generator[str]#110; [];
) -> str#0 [
]{
internal: Generator[str]#110.next
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$dlerror#219(
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ceil#220(
$.a0#481: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$omp_get_max_threads#221(
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$1#222(
$other#310: Pointer[byte]#43; [];
) -> Pointer[str]#22 [
]{
internal: Pointer[str]#22.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#223(
$other#311: Pointer[byte]#43; [];
) -> Pointer[int]#67 [
]{
internal: Pointer[int]#67.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ge__#224(
$self#365: int#4; [];
$other#366: int#4; [];
) -> bool#1 [
]{
internal: int#4.__ge__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$dlclose#225(
$.a0#557: Pointer[byte]#43; [];
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$atan2#226(
$.a0#500: float#3; [];
$.a1#501: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$lgamma#227(
$.a0#519: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzerror#228(
$.a0#562: Pointer[byte]#43; [];
$.a1#563: Pointer[Int32]#184; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$sizeof#229(
) -> int#4 [
$#654: int#4; [];
]{
bb#228 {
$#654 = f$__elemsize__#90(); [];
return $#654; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$sizeof#230(
) -> int#4 [
$#655: int#4; [];
]{
bb#229 {
$#655 = f$__elemsize__#91(); [];
return $#655; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$log1p#231(
$.a0#513: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzgets#232(
$.a0#565: Pointer[byte]#43; [];
$.a1#566: Pointer[byte]#43; [];
$.a2#567: Int32#97; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzclose#233(
$.a0#568: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__hash__#234(
$self#1228: str#0; [];
) -> int#4 [
$h#1229: int#4; [];
$#1231: str#0; [];
$#1232: str#0; [];
$p#1233: Pointer[byte]#43; [];
$n#1234: int#4; [];
$i#1235: int#4; [];
$#1236: bool#1; [];
$#1237: bool#1; [];
$#1238: int#4; [];
$#1239: byte#7; [];
$#1240: int#4; [];
]{
bb#233 {
$h#1229 = 0; [];
$#1231 = $self#1228.ptr; [];
$#1232 = $self#1228.len; [];
$._assign_93#1230 = f$__new__#253($#1231, $#1232); [];
$p#1233 = $._assign_93#1230.a1; [];
$n#1234 = $._assign_93#1230.a2; [];
$i#1235 = 0; [];
jmp bb#523; [];
}; []
bb#523 {
$#1236 = f$__lt__#287($i#1235, $n#1234); [];
$#1237 = f$__bool__#276($#1236); [];
condjump ($#1237) bb#524 bb#525; [];
}; []
bb#524 {
$#1238 = f$__mul__#235(31, $h#1229); [];
$#1239 = f$__getitem__#285($p#1233, $i#1235); [];
$#1240 = f$6#138($#1239); [];
$h#1229 = f$__add__#264($#1238, $#1240); [];
$i#1235 = f$__add__#264($i#1235, 1); [];
jmp bb#523; [];
}; [loopAttribute: loop(none, bb#523, bb#524, none, bb#525), ]
bb#525 {
return $h#1229; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__mul__#235(
$self#347: int#4; [];
$other#348: int#4; [];
) -> int#4 [
]{
internal: int#4.__mul__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$copysign#236(
$.a0#511: float#3; [];
$.a1#512: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_tuple_fix_index#237(
$idx#784: int#4; [];
$len#785: int#4; [];
) -> int#4 [
$#786: bool#1; [];
$#787: bool#1; [];
$._bin_res#788: bool#1; [];
$#789: bool#1; [];
$#790: bool#1; [];
$#791: bool#1; [];
$#792: bool#1; [];
$#793: bool#1; [];
]{
bb#236 {
jmp bb#359; [];
}; []
bb#359 {
$#786 = f$__lt__#287($idx#784, 0); [];
$#787 = f$__bool__#276($#786); [];
condjump ($#787) bb#362 bb#361; [];
}; []
bb#360 {
jmp bb#363; [];
}; []
bb#361 {
jmp bb#360; [];
}; []
bb#362 {
$idx#784 = f$__add__#264($idx#784, $len#785); [];
jmp bb#360; [];
}; []
bb#363 {
$#789 = f$__lt__#287($idx#784, 0); [];
$#790 = f$__bool__#276($#789); [];
condjump ($#790) bb#367 bb#370; [];
}; []
bb#364 {
return $idx#784; [];
}; []
bb#365 {
jmp bb#364; [];
}; []
bb#366 {
$._typ_225#794 = f$__new__#271(); [];
f$2#265($._typ_225#794, 'tuple index out of range'); [];
throw ($._typ_225#794); [];
}; []
bb#367 {
$._bin_res#788 = true; [];
jmp bb#369; [];
}; []
bb#368 {
$._bin_res#788 = false; [];
jmp bb#369; [];
}; []
bb#369 {
$#793 = f$__bool__#276($._bin_res#788); [];
condjump ($#793) bb#366 bb#365; [];
}; []
bb#370 {
$#791 = f$__ge__#224($idx#784, $len#785); [];
$#792 = f$__bool__#276($#791); [];
condjump ($#792) bb#367 bb#368; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$gzwrite#238(
$.a0#572: Pointer[byte]#43; [];
$.a1#573: Pointer[byte]#43; [];
$.a2#574: UInt32#20; [];
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gztell#239(
$.a0#575: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align#240(
$.a0#579: .seq#162; [];
$.a1#580: .seq#162; [];
$.a2#581: Pointer[Int8]#183; [];
$.a3#582: Int8#182; [];
$.a4#583: Int8#182; [];
$.a5#584: int#4; [];
$.a6#585: int#4; [];
$.a7#586: int#4; [];
$.a8#587: int#4; [];
$.a9#588: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_palign_global#241(
$.a0#644: .pseq#216; [];
$.a1#645: .pseq#216; [];
$.a2#646: Pointer[Int8]#183; [];
$.a3#647: Int8#182; [];
$.a4#648: Int8#182; [];
$.a5#649: int#4; [];
$.a6#650: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_kh_put#242(
$self#1152: .dict#23; [];
$key#1153: str#0; [];
) -> .Tuple.2#88 [
$#1154: .dict#23; [];
$#1155: .dict#23; [];
$#1156: bool#1; [];
$#1157: bool#1; [];
$#1158: .dict#23; [];
$#1159: .dict#23; [];
$#1160: int#4; [];
$#1161: bool#1; [];
$#1162: bool#1; [];
$#1163: .dict#23; [];
$#1164: int#4; [];
$#1165: .dict#23; [];
$#1166: int#4; [];
$mask#1167: int#4; [];
$#1168: .dict#23; [];
$step#1169: int#4; [];
$site#1170: int#4; [];
$x#1171: int#4; [];
$k#1172: int#4; [];
$i#1173: int#4; [];
$#1174: .dict#23; [];
$#1175: int#4; [];
$#1176: bool#1; [];
$last#1177: int#4; [];
$._bin_res#1178: bool#1; [];
$#1179: .dict#23; [];
$#1180: int#4; [];
$#1181: bool#1; [];
$#1182: bool#1; [];
$#1183: bool#1; [];
$._bin_res#1184: bool#1; [];
$#1185: .dict#23; [];
$#1186: int#4; [];
$#1187: bool#1; [];
$#1188: .dict#23; [];
$#1189: str#0; [];
$#1190: bool#1; [];
$#1191: bool#1; [];
$#1192: bool#1; [];
$#1193: bool#1; [];
$#1194: .dict#23; [];
$#1195: int#4; [];
$#1196: bool#1; [];
$#1197: int#4; [];
$#1198: bool#1; [];
$#1199: bool#1; [];
$#1200: .dict#23; [];
$#1201: bool#1; [];
$#1202: bool#1; [];
$._bin_res#1203: bool#1; [];
$#1204: .dict#23; [];
$#1205: int#4; [];
$#1206: bool#1; [];
$#1207: .dict#23; [];
$#1208: bool#1; [];
$#1209: bool#1; [];
$#1210: bool#1; [];
$ret#1211: int#4; [];
$#1212: .dict#23; [];
$#1213: int#4; [];
$#1214: bool#1; [];
$#1215: .dict#23; [];
$#1216: .dict#23; [];
$#1217: .dict#23; [];
$#1218: .dict#23; [];
$#1219: .dict#23; [];
$#1220: int#4; [];
$#1221: bool#1; [];
$#1222: .dict#23; [];
$#1223: .dict#23; [];
$#1224: .dict#23; [];
$#1225: .Tuple.2#88; [];
]{
bb#241 {
jmp bb#474; [];
}; []
bb#474 {
$#1154 = $self#1152._n_occupied; [];
$#1155 = $self#1152._upper_bound; [];
$#1156 = f$__ge__#224($#1154, $#1155); [];
$#1157 = f$__bool__#276($#1156); [];
condjump ($#1157) bb#477 bb#476; [];
}; []
bb#475 {
$#1168 = $self#1152._n_buckets; [];
$mask#1167 = f$__sub__#140($#1168, 1); [];
$step#1169 = 0; [];
$site#1170 = $self#1152._n_buckets; [];
$x#1171 = $site#1170; [];
$k#1172 = f$_dict_hash#95($key#1153); [];
$i#1173 = f$__and__#16($k#1172, $mask#1167); [];
jmp bb#482; [];
}; []
bb#476 {
jmp bb#475; [];
}; []
bb#477 {
jmp bb#478; [];
}; []
bb#478 {
$#1158 = $self#1152._n_buckets; [];
$#1159 = $self#1152._size; [];
$#1160 = f$__lshift__#134($#1159, 1); [];
$#1161 = f$__gt__#191($#1158, $#1160); [];
$#1162 = f$__bool__#276($#1161); [];
condjump ($#1162) bb#481 bb#480; [];
}; []
bb#479 {
jmp bb#475; [];
}; []
bb#480 {
$#1165 = $self#1152._n_buckets; [];
$#1166 = f$__add__#264($#1165, 1); [];
f$_kh_resize#269($self#1152, $#1166); [];
jmp bb#479; [];
}; []
bb#481 {
$#1163 = $self#1152._n_buckets; [];
$#1164 = f$__sub__#140($#1163, 1); [];
f$_kh_resize#269($self#1152, $#1164); [];
jmp bb#479; [];
}; []
bb#482 {
$#1174 = $self#1152._flags; [];
$#1175 = f$__ac_isempty#143($#1174, $i#1173); [];
$#1176 = f$__bool__#17($#1175); [];
condjump ($#1176) bb#485 bb#484; [];
}; []
bb#483 {
$ret#1211 = 0; [];
jmp bb#517; [];
}; []
bb#484 {
$last#1177 = $i#1173; [];
jmp bb#486; [];
}; []
bb#485 {
$x#1171 = $i#1173; [];
jmp bb#483; [];
}; []
bb#486 {
$#1179 = $self#1152._flags; [];
$#1180 = f$__ac_isempty#143($#1179, $i#1173); [];
$#1181 = f$__bool__#17($#1180); [];
$#1182 = f$__invert__#63($#1181); [];
$#1183 = f$__bool__#276($#1182); [];
condjump ($#1183) bb#492 bb#490; [];
}; []
bb#487 {
jmp bb#497; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#488 {
jmp bb#505; [];
}; []
bb#489 {
$._bin_res#1178 = true; [];
jmp bb#491; [];
}; []
bb#490 {
$._bin_res#1178 = false; [];
jmp bb#491; [];
}; []
bb#491 {
$#1193 = f$__bool__#276($._bin_res#1178); [];
condjump ($#1193) bb#487 bb#488; [];
}; []
bb#492 {
$#1185 = $self#1152._flags; [];
$#1186 = f$__ac_isdel#80($#1185, $i#1173); [];
$#1187 = f$__bool__#17($#1186); [];
condjump ($#1187) bb#493 bb#496; [];
}; []
bb#493 {
$._bin_res#1184 = true; [];
jmp bb#495; [];
}; []
bb#494 {
$._bin_res#1184 = false; [];
jmp bb#495; [];
}; []
bb#495 {
$#1192 = f$__bool__#276($._bin_res#1184); [];
condjump ($#1192) bb#489 bb#490; [];
}; []
bb#496 {
$#1188 = $self#1152._keys; [];
$#1189 = f$__getitem__#286($#1188, $i#1173); [];
$#1190 = f$__ne__#13($#1189, $key#1153); [];
$#1191 = f$__bool__#276($#1190); [];
condjump ($#1191) bb#493 bb#494; [];
}; []
bb#497 {
$#1194 = $self#1152._flags; [];
$#1195 = f$__ac_isdel#80($#1194, $i#1173); [];
$#1196 = f$__bool__#17($#1195); [];
condjump ($#1196) bb#500 bb#499; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#498 {
$step#1169 = f$__add__#264($step#1169, 1); [];
$#1197 = f$__add__#264($i#1173, $step#1169); [];
$i#1173 = f$__and__#16($#1197, $mask#1167); [];
jmp bb#501; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#499 {
jmp bb#498; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#500 {
$site#1170 = $i#1173; [];
jmp bb#498; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#501 {
$#1198 = f$__eq__#45($i#1173, $last#1177); [];
$#1199 = f$__bool__#276($#1198); [];
condjump ($#1199) bb#504 bb#503; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#502 {
jmp bb#486; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#503 {
jmp bb#502; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#504 {
$x#1171 = $site#1170; [];
jmp bb#488; [];
}; [loopAttribute: loop(none, bb#486, bb#487, none, bb#488), ]
bb#505 {
$#1200 = $self#1152._n_buckets; [];
$#1201 = f$__eq__#45($x#1171, $#1200); [];
$#1202 = f$__bool__#276($#1201); [];
condjump ($#1202) bb#508 bb#507; [];
}; []
bb#506 {
jmp bb#483; [];
}; []
bb#507 {
jmp bb#506; [];
}; []
bb#508 {
jmp bb#509; [];
}; []
bb#509 {
$#1204 = $self#1152._flags; [];
$#1205 = f$__ac_isempty#143($#1204, $i#1173); [];
$#1206 = f$__bool__#17($#1205); [];
condjump ($#1206) bb#516 bb#514; [];
}; []
bb#510 {
jmp bb#506; [];
}; []
bb#511 {
$x#1171 = $i#1173; [];
jmp bb#510; [];
}; []
bb#512 {
$x#1171 = $site#1170; [];
jmp bb#510; [];
}; []
bb#513 {
$._bin_res#1203 = true; [];
jmp bb#515; [];
}; []
bb#514 {
$._bin_res#1203 = false; [];
jmp bb#515; [];
}; []
bb#515 {
$#1210 = f$__bool__#276($._bin_res#1203); [];
condjump ($#1210) bb#512 bb#511; [];
}; []
bb#516 {
$#1207 = $self#1152._n_buckets; [];
$#1208 = f$__ne__#168($site#1170, $#1207); [];
$#1209 = f$__bool__#276($#1208); [];
condjump ($#1209) bb#513 bb#514; [];
}; []
bb#517 {
$#1212 = $self#1152._flags; [];
$#1213 = f$__ac_isempty#143($#1212, $x#1171); [];
$#1214 = f$__bool__#17($#1213); [];
condjump ($#1214) bb#520 bb#519; [];
}; []
bb#518 {
$#1225 = f$__new__#252($ret#1211, $x#1171); [];
return $#1225; [];
}; []
bb#519 {
$#1219 = $self#1152._flags; [];
$#1220 = f$__ac_isdel#80($#1219, $x#1171); [];
$#1221 = f$__bool__#17($#1220); [];
condjump ($#1221) bb#522 bb#521; [];
}; []
bb#520 {
$#1215 = $self#1152._keys; [];
f$__setitem__#76($#1215, $x#1171, $key#1153); [];
$#1216 = $self#1152._flags; [];
f$__ac_set_isboth_false#11($#1216, $x#1171); [];
$#1217 = $self#1152._size; [];
$self#1152.self = f$__add__#264($#1217, 1); [];
$#1218 = $self#1152._n_occupied; [];
$self#1152.self = f$__add__#264($#1218, 1); [];
$ret#1211 = 1; [];
jmp bb#518; [];
}; []
bb#521 {
jmp bb#518; [];
}; []
bb#522 {
$#1222 = $self#1152._keys; [];
f$__setitem__#76($#1222, $x#1171, $key#1153); [];
$#1223 = $self#1152._flags; [];
f$__ac_set_isboth_false#11($#1223, $x#1171); [];
$#1224 = $self#1152._size; [];
$self#1152.self = f$__add__#264($#1224, 1); [];
$ret#1211 = 2; [];
jmp bb#518; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align_dual#243(
$.a0#589: .seq#162; [];
$.a1#590: .seq#162; [];
$.a2#591: Pointer[Int8]#183; [];
$.a3#592: Int8#182; [];
$.a4#593: Int8#182; [];
$.a5#594: Int8#182; [];
$.a6#595: Int8#182; [];
$.a7#596: int#4; [];
$.a8#597: int#4; [];
$.a9#598: int#4; [];
$.a10#599: int#4; [];
$.a11#600: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$omp_get_num_threads#244(
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align_global#245(
$.a0#611: .seq#162; [];
$.a1#612: .seq#162; [];
$.a2#613: Pointer[Int8]#183; [];
$.a3#614: Int8#182; [];
$.a4#615: Int8#182; [];
$.a5#616: int#4; [];
$.a6#617: bool#1; [];
$.a7#618: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_alloc#246(
$.a0#444: int#4; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_palign#247(
$.a0#622: .pseq#216; [];
$.a1#623: .pseq#216; [];
$.a2#624: Pointer[Int8]#183; [];
$.a3#625: Int8#182; [];
$.a4#626: Int8#182; [];
$.a5#627: int#4; [];
$.a6#628: int#4; [];
$.a7#629: int#4; [];
$.a8#630: int#4; [];
$.a9#631: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_palign_default#248(
$.a0#651: .pseq#216; [];
$.a1#652: .pseq#216; [];
$.a2#653: Pointer[.Alignment]#164; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ord#249(
$s#768: str#0; [];
) -> int#4 [
$#769: int#4; [];
$#770: bool#1; [];
$#771: bool#1; [];
$#773: int#4; [];
$#774: str#0; [];
$#775: str#0; [];
$#776: str#0; [];
$#777: str#0; [];
$#778: byte#7; [];
$#779: int#4; [];
]{
bb#248 {
'
    ord(s)

    Return an integer representing the Unicode code point of s
    '; [];
jmp bb#355; [];
}; []
bb#355 {
$#769 = f$len#175($s#768); [];
$#770 = f$__ne__#168($#769, 1); [];
$#771 = f$__bool__#276($#770); [];
condjump ($#771) bb#358 bb#357; [];
}; []
bb#356 {
$#777 = $s#768.ptr; [];
$#778 = f$__getitem__#285($#777, 0); [];
$#779 = f$6#138($#778); [];
return $#779; [];
}; []
bb#357 {
jmp bb#356; [];
}; []
bb#358 {
$._typ_224#772 = f$__new__#278(); [];
$#773 = f$len#175($s#768); [];
$#774 = f$2#157($#773); [];
$#775 = f$__add__#141('ord() expected a character, but string of length ', $#774); [];
$#776 = f$__add__#141($#775, ' found'); [];
f$2#282($._typ_224#772, $#776); [];
throw ($._typ_224#772); [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$seq_print#250(
$.a0#307: str#0; [];
) -> void#6 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$chr#251(
$i#780: int#4; [];
) -> str#0 [
$p#781: Pointer[byte]#43; [];
$#782: byte#7; [];
$#783: str#0; [];
]{
bb#250 {
'
    chr(i)

    Return a string representing a character whose Unicode
    code point is an integer
    '; [];
$p#781 = f$2#211(1); [];
$#782 = f$2#259($i#780); [];
f$__setitem__#77($p#781, 0, $#782); [];
$#783 = f$__new__#160($p#781, 1); [];
return $#783; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#252(
$a1#289: int#4; [];
$a2#290: int#4; [];
) -> .Tuple.2#88 [
]{
internal: .Tuple.2#88.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#253(
$a1#291: Pointer[byte]#43; [];
$a2#292: int#4; [];
) -> .Tuple.2#87 [
]{
internal: .Tuple.2#87.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#254(
$a1#293: str#0; [];
$a2#294: str#0; [];
) -> .Tuple.2#85 [
]{
internal: .Tuple.2#85.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ne__#255(
$self#391: byte#7; [];
$other#392: byte#7; [];
) -> bool#1 [
]{
internal: byte#7.__ne__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$log10#256(
$.a0#492: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzseek#257(
$.a0#576: Pointer[byte]#43; [];
$.a1#577: int#4; [];
$.a2#578: Int32#97; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#258(
) -> .AttributeError#93 [
]{
internal: .AttributeError#93.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$2#259(
$i#390: int#4; [];
) -> byte#7 [
]{
internal: byte#7.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#260(
$self#407: Array[str]#11; [];
$index#408: int#4; [];
) -> str#0 [
]{
internal: Array[str]#11.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$gzgetc#261(
$.a0#564: Pointer[byte]#43; [];
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$trunc#262(
$.a0#514: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$omp_get_num_procs#263(
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__add__#264(
$self#343: int#4; [];
$other#344: int#4; [];
) -> int#4 [
]{
internal: int#4.__add__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$2#265(
$self#744: .IndexError#151; [];
$message#745: str#0; [];
) -> void#6 [
]{
bb#264 {
$self#744.self = f$__new__#274('IndexError', $message#745, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$3#266(
$f#336: float#3; [];
) -> int#4 [
]{
internal: int#4.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$_tuple_str#267(
$strs#795: Pointer[str]#22; [];
$n#796: int#4; [];
) -> str#0 [
$total#797: int#4; [];
$i#798: int#4; [];
$#799: bool#1; [];
$#800: bool#1; [];
$#801: str#0; [];
$#802: str#0; [];
$#803: int#4; [];
$#804: bool#1; [];
$#805: bool#1; [];
$buf#806: Pointer[byte]#43; [];
$where#807: int#4; [];
$#808: byte#7; [];
$#809: bool#1; [];
$#810: bool#1; [];
$s#811: str#0; [];
$l#812: int#4; [];
$#813: Pointer[byte]#43; [];
$#814: str#0; [];
$#815: int#4; [];
$#816: bool#1; [];
$#817: bool#1; [];
$#818: byte#7; [];
$#819: byte#7; [];
$#820: byte#7; [];
$#821: str#0; [];
]{
bb#266 {
$total#797 = 2; [];
$i#798 = 0; [];
jmp bb#371; [];
}; []
bb#371 {
$#799 = f$__lt__#287($i#798, $n#796); [];
$#800 = f$__bool__#276($#799); [];
condjump ($#800) bb#372 bb#373; [];
}; []
bb#372 {
$#801 = f$__getitem__#286($strs#795, $i#798); [];
$#802 = $#801.len; [];
$total#797 = f$__add__#264($total#797, $#802); [];
jmp bb#374; [];
}; [loopAttribute: loop(none, bb#371, bb#372, none, bb#373), ]
bb#373 {
$buf#806 = f$2#211($total#797); [];
$where#807 = 0; [];
$#808 = f$2#259(40); [];
f$__setitem__#77($buf#806, $where#807, $#808); [];
$where#807 = f$__add__#264($where#807, 1); [];
$i#798 = 0; [];
jmp bb#378; [];
}; []
bb#374 {
$#803 = f$__sub__#140($n#796, 1); [];
$#804 = f$__lt__#287($i#798, $#803); [];
$#805 = f$__bool__#276($#804); [];
condjump ($#805) bb#377 bb#376; [];
}; [loopAttribute: loop(none, bb#371, bb#372, none, bb#373), ]
bb#375 {
$i#798 = f$__add__#264($i#798, 1); [];
jmp bb#371; [];
}; [loopAttribute: loop(none, bb#371, bb#372, none, bb#373), ]
bb#376 {
jmp bb#375; [];
}; [loopAttribute: loop(none, bb#371, bb#372, none, bb#373), ]
bb#377 {
$total#797 = f$__add__#264($total#797, 2); [];
jmp bb#375; [];
}; [loopAttribute: loop(none, bb#371, bb#372, none, bb#373), ]
bb#378 {
$#809 = f$__lt__#287($i#798, $n#796); [];
$#810 = f$__bool__#276($#809); [];
condjump ($#810) bb#379 bb#380; [];
}; []
bb#379 {
$s#811 = f$__getitem__#286($strs#795, $i#798); [];
$l#812 = $s#811.len; [];
$#813 = f$__add__#127($buf#806, $where#807); [];
$#814 = $s#811.ptr; [];
f$memcpy#130($#813, $#814, $l#812); [];
$where#807 = f$__add__#264($where#807, $l#812); [];
jmp bb#381; [];
}; [loopAttribute: loop(none, bb#378, bb#379, none, bb#380), ]
bb#380 {
$#820 = f$2#259(41); [];
f$__setitem__#77($buf#806, $where#807, $#820); [];
$#821 = f$__new__#160($buf#806, $total#797); [];
return $#821; [];
}; []
bb#381 {
$#815 = f$__sub__#140($n#796, 1); [];
$#816 = f$__lt__#287($i#798, $#815); [];
$#817 = f$__bool__#276($#816); [];
condjump ($#817) bb#384 bb#383; [];
}; [loopAttribute: loop(none, bb#378, bb#379, none, bb#380), ]
bb#382 {
$i#798 = f$__add__#264($i#798, 1); [];
jmp bb#378; [];
}; [loopAttribute: loop(none, bb#378, bb#379, none, bb#380), ]
bb#383 {
jmp bb#382; [];
}; [loopAttribute: loop(none, bb#378, bb#379, none, bb#380), ]
bb#384 {
$#818 = f$2#259(44); [];
f$__setitem__#77($buf#806, $where#807, $#818); [];
$where#807 = f$__add__#264($where#807, 1); [];
$#819 = f$2#259(32); [];
f$__setitem__#77($buf#806, $where#807, $#819); [];
$where#807 = f$__add__#264($where#807, 1); [];
jmp bb#382; [];
}; [loopAttribute: loop(none, bb#378, bb#379, none, bb#380), ]
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$dlopen#268(
$.a0#553: Pointer[byte]#43; [];
$.a1#554: int#4; [];
) -> Pointer[byte]#43 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_kh_resize#269(
$self#1054: .dict#23; [];
$new_n_buckets#1055: int#4; [];
) -> void#6 [
$HASH_UPPER#1056: float#3; [];
$new_flags#1057: Pointer[UInt32]#21; [];
$j#1058: int#4; [];
$#1059: int#4; [];
$#1060: int#4; [];
$#1061: int#4; [];
$#1062: int#4; [];
$#1063: int#4; [];
$#1064: int#4; [];
$#1065: bool#1; [];
$#1066: bool#1; [];
$#1067: .dict#23; [];
$#1068: float#3; [];
$#1069: float#3; [];
$#1070: int#4; [];
$#1071: bool#1; [];
$#1072: bool#1; [];
$fsize#1073: int#4; [];
$i#1074: int#4; [];
$#1075: bool#1; [];
$#1076: bool#1; [];
$#1077: UInt32#20; [];
$#1078: .dict#23; [];
$#1079: bool#1; [];
$#1080: bool#1; [];
$#1081: .dict#23; [];
$#1082: Pointer[byte]#43; [];
$#1083: int#4; [];
$#1084: int#4; [];
$#1085: Pointer[byte]#43; [];
$#1086: .dict#23; [];
$#1087: Pointer[byte]#43; [];
$#1088: int#4; [];
$#1089: int#4; [];
$#1090: Pointer[byte]#43; [];
$#1091: bool#1; [];
$#1092: .dict#23; [];
$#1093: bool#1; [];
$#1094: bool#1; [];
$#1095: .dict#23; [];
$#1096: int#4; [];
$#1097: bool#1; [];
$#1098: bool#1; [];
$key#1099: str#0; [];
$#1100: .dict#23; [];
$val#1101: str#0; [];
$#1102: .dict#23; [];
$new_mask#1103: int#4; [];
$#1104: .dict#23; [];
$#1105: bool#1; [];
$step#1106: int#4; [];
$k#1107: int#4; [];
$i#1108: int#4; [];
$#1109: int#4; [];
$#1110: bool#1; [];
$#1111: bool#1; [];
$#1112: bool#1; [];
$#1113: int#4; [];
$._bin_res#1114: bool#1; [];
$#1115: .dict#23; [];
$#1116: bool#1; [];
$#1117: bool#1; [];
$#1118: .dict#23; [];
$#1119: int#4; [];
$#1120: bool#1; [];
$#1121: bool#1; [];
$#1122: bool#1; [];
$#1124: .dict#23; [];
$#1125: str#0; [];
$#1126: .dict#23; [];
$#1127: .Tuple.2#85; [];
$#1129: .dict#23; [];
$#1130: str#0; [];
$#1131: .dict#23; [];
$#1132: .Tuple.2#85; [];
$#1133: .dict#23; [];
$#1134: .dict#23; [];
$#1135: .dict#23; [];
$#1136: .dict#23; [];
$#1137: bool#1; [];
$#1138: bool#1; [];
$#1139: .dict#23; [];
$#1140: Pointer[byte]#43; [];
$#1141: int#4; [];
$#1142: int#4; [];
$#1143: Pointer[byte]#43; [];
$#1144: .dict#23; [];
$#1145: Pointer[byte]#43; [];
$#1146: int#4; [];
$#1147: int#4; [];
$#1148: Pointer[byte]#43; [];
$#1149: .dict#23; [];
$#1150: float#3; [];
$#1151: float#3; [];
]{
bb#268 {
$HASH_UPPER#1056 = 0.770000; [];
$new_flags#1057 = f$__new__#59(); [];
$j#1058 = 1; [];
$new_n_buckets#1055 = f$__sub__#140($new_n_buckets#1055, 1); [];
$#1059 = f$__rshift__#121($new_n_buckets#1055, 1); [];
$new_n_buckets#1055 = f$__or__#29($new_n_buckets#1055, $#1059); [];
$#1060 = f$__rshift__#121($new_n_buckets#1055, 2); [];
$new_n_buckets#1055 = f$__or__#29($new_n_buckets#1055, $#1060); [];
$#1061 = f$__rshift__#121($new_n_buckets#1055, 4); [];
$new_n_buckets#1055 = f$__or__#29($new_n_buckets#1055, $#1061); [];
$#1062 = f$__rshift__#121($new_n_buckets#1055, 8); [];
$new_n_buckets#1055 = f$__or__#29($new_n_buckets#1055, $#1062); [];
$#1063 = f$__rshift__#121($new_n_buckets#1055, 16); [];
$new_n_buckets#1055 = f$__or__#29($new_n_buckets#1055, $#1063); [];
$#1064 = f$__rshift__#121($new_n_buckets#1055, 32); [];
$new_n_buckets#1055 = f$__or__#29($new_n_buckets#1055, $#1064); [];
$new_n_buckets#1055 = f$__add__#264($new_n_buckets#1055, 1); [];
jmp bb#430; [];
}; []
bb#430 {
$#1065 = f$__lt__#287($new_n_buckets#1055, 4); [];
$#1066 = f$__bool__#276($#1065); [];
condjump ($#1066) bb#433 bb#432; [];
}; []
bb#431 {
jmp bb#434; [];
}; []
bb#432 {
jmp bb#431; [];
}; []
bb#433 {
$new_n_buckets#1055 = 4; [];
jmp bb#431; [];
}; []
bb#434 {
$#1067 = $self#1054._size; [];
$#1068 = f$1#161($new_n_buckets#1055, $HASH_UPPER#1056); [];
$#1069 = f$__add__#27($#1068, 0.500000); [];
$#1070 = f$3#266($#1069); [];
$#1071 = f$__ge__#224($#1067, $#1070); [];
$#1072 = f$__bool__#276($#1071); [];
condjump ($#1072) bb#437 bb#436; [];
}; []
bb#435 {
jmp bb#445; [];
}; []
bb#436 {
$fsize#1073 = f$__ac_fsize#47($new_n_buckets#1055); [];
$new_flags#1057 = f$2#210($fsize#1073); [];
$i#1074 = 0; [];
jmp bb#438; [];
}; []
bb#437 {
$j#1058 = 0; [];
jmp bb#435; [];
}; []
bb#438 {
$#1075 = f$__lt__#287($i#1074, $fsize#1073); [];
$#1076 = f$__bool__#276($#1075); [];
condjump ($#1076) bb#439 bb#440; [];
}; []
bb#439 {
$#1077 = f$2#213(2863311530); [];
f$__setitem__#78($new_flags#1057, $i#1074, $#1077); [];
$i#1074 = f$__add__#264($i#1074, 1); [];
jmp bb#438; [];
}; [loopAttribute: loop(none, bb#438, bb#439, none, bb#440), ]
bb#440 {
jmp bb#441; [];
}; []
bb#441 {
$#1078 = $self#1054._n_buckets; [];
$#1079 = f$__lt__#287($#1078, $new_n_buckets#1055); [];
$#1080 = f$__bool__#276($#1079); [];
condjump ($#1080) bb#444 bb#443; [];
}; []
bb#442 {
jmp bb#435; [];
}; []
bb#443 {
jmp bb#442; [];
}; []
bb#444 {
$#1081 = $self#1054._keys; [];
$#1082 = f$as_byte#135($#1081); [];
$#1083 = f$sizeof#229(); [];
$#1084 = f$__mul__#235($new_n_buckets#1055, $#1083); [];
$#1085 = f$realloc#116($#1082, $#1084); [];
$self#1054.self = f$1#222($#1085); [];
$#1086 = $self#1054._vals; [];
$#1087 = f$as_byte#135($#1086); [];
$#1088 = f$sizeof#229(); [];
$#1089 = f$__mul__#235($new_n_buckets#1055, $#1088); [];
$#1090 = f$realloc#116($#1087, $#1089); [];
$self#1054.self = f$1#222($#1090); [];
jmp bb#442; [];
}; []
bb#445 {
$#1091 = f$__bool__#17($j#1058); [];
condjump ($#1091) bb#448 bb#447; [];
}; []
bb#446 {
return; [];
}; []
bb#447 {
jmp bb#446; [];
}; []
bb#448 {
$j#1058 = 0; [];
jmp bb#449; [];
}; []
bb#449 {
$#1092 = $self#1054._n_buckets; [];
$#1093 = f$__ne__#168($j#1058, $#1092); [];
$#1094 = f$__bool__#276($#1093); [];
condjump ($#1094) bb#450 bb#451; [];
}; []
bb#450 {
jmp bb#452; [];
}; [loopAttribute: loop(none, bb#449, bb#450, none, bb#451), ]
bb#451 {
jmp bb#470; [];
}; []
bb#452 {
$#1095 = $self#1054._flags; [];
$#1096 = f$__ac_iseither#68($#1095, $j#1058); [];
$#1097 = f$__eq__#45($#1096, 0); [];
$#1098 = f$__bool__#276($#1097); [];
condjump ($#1098) bb#455 bb#454; [];
}; [loopAttribute: loop(none, bb#449, bb#450, none, bb#451), ]
bb#453 {
$j#1058 = f$__add__#264($j#1058, 1); [];
jmp bb#449; [];
}; [loopAttribute: loop(none, bb#449, bb#450, none, bb#451), ]
bb#454 {
jmp bb#453; [];
}; [loopAttribute: loop(none, bb#449, bb#450, none, bb#451), ]
bb#455 {
$#1100 = $self#1054._keys; [];
$key#1099 = f$__getitem__#286($#1100, $j#1058); [];
$#1102 = $self#1054._vals; [];
$val#1101 = f$__getitem__#286($#1102, $j#1058); [];
$new_mask#1103 = f$__sub__#140($new_n_buckets#1055, 1); [];
$#1104 = $self#1054._flags; [];
f$__ac_set_isdel_true#14($#1104, $j#1058); [];
jmp bb#456; [];
}; [loopAttribute: loop(none, bb#449, bb#450, none, bb#451), ]
bb#456 {
$#1105 = f$__bool__#276(true); [];
condjump ($#1105) bb#457 bb#458; [];
}; [loopAttribute: loop(none, bb#449, bb#450, none, bb#451), ]
bb#457 {
$step#1106 = 0; [];
$k#1107 = f$_dict_hash#95($key#1099); [];
$i#1108 = f$__and__#16($k#1107, $new_mask#1103); [];
jmp bb#459; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#458 {
jmp bb#453; [];
}; [loopAttribute: loop(none, bb#449, bb#450, none, bb#451), ]
bb#459 {
$#1109 = f$__ac_isempty#143($new_flags#1057, $i#1108); [];
$#1110 = f$__bool__#17($#1109); [];
$#1111 = f$__invert__#63($#1110); [];
$#1112 = f$__bool__#276($#1111); [];
condjump ($#1112) bb#460 bb#461; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#460 {
$step#1106 = f$__add__#264($step#1106, 1); [];
$#1113 = f$__add__#264($i#1108, $step#1106); [];
$i#1108 = f$__and__#16($#1113, $new_mask#1103); [];
jmp bb#459; [];
}; [loopAttribute: loop(none, bb#459, bb#460, none, bb#461), ]
bb#461 {
f$__ac_set_isempty_false#270($new_flags#1057, $i#1108); [];
jmp bb#462; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#462 {
$#1115 = $self#1054._n_buckets; [];
$#1116 = f$__lt__#287($i#1108, $#1115); [];
$#1117 = f$__bool__#276($#1116); [];
condjump ($#1117) bb#469 bb#467; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#463 {
jmp bb#456; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#464 {
$#1134 = $self#1054._keys; [];
f$__setitem__#76($#1134, $i#1108, $key#1099); [];
$#1135 = $self#1054._vals; [];
f$__setitem__#76($#1135, $i#1108, $val#1101); [];
jmp bb#458; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#465 {
$#1124 = $self#1054._keys; [];
$#1125 = f$__getitem__#286($#1124, $i#1108); [];
$._assign_91#1123 = f$__new__#254($key#1099, $#1125); [];
$#1126 = $self#1054._keys; [];
$#1127 = $._assign_91#1123.a1; [];
f$__setitem__#76($#1126, $i#1108, $#1127); [];
$key#1099 = $._assign_91#1123.a2; [];
$#1129 = $self#1054._vals; [];
$#1130 = f$__getitem__#286($#1129, $i#1108); [];
$._assign_92#1128 = f$__new__#254($val#1101, $#1130); [];
$#1131 = $self#1054._vals; [];
$#1132 = $._assign_92#1128.a1; [];
f$__setitem__#76($#1131, $i#1108, $#1132); [];
$val#1101 = $._assign_92#1128.a2; [];
$#1133 = $self#1054._flags; [];
f$__ac_set_isdel_true#14($#1133, $i#1108); [];
jmp bb#463; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#466 {
$._bin_res#1114 = true; [];
jmp bb#468; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#467 {
$._bin_res#1114 = false; [];
jmp bb#468; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#468 {
$#1122 = f$__bool__#276($._bin_res#1114); [];
condjump ($#1122) bb#465 bb#464; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#469 {
$#1118 = $self#1054._flags; [];
$#1119 = f$__ac_iseither#68($#1118, $i#1108); [];
$#1120 = f$__eq__#45($#1119, 0); [];
$#1121 = f$__bool__#276($#1120); [];
condjump ($#1121) bb#466 bb#467; [];
}; [loopAttribute: loop(none, bb#456, bb#457, none, bb#458), ]
bb#470 {
$#1136 = $self#1054._n_buckets; [];
$#1137 = f$__gt__#191($#1136, $new_n_buckets#1055); [];
$#1138 = f$__bool__#276($#1137); [];
condjump ($#1138) bb#473 bb#472; [];
}; []
bb#471 {
$self#1054.self = $new_flags#1057; [];
$self#1054.self = $new_n_buckets#1055; [];
$self#1054.self = $self#1054._size; [];
$#1149 = $self#1054._n_buckets; [];
$#1150 = f$1#161($#1149, $HASH_UPPER#1056); [];
$#1151 = f$__add__#27($#1150, 0.500000); [];
$self#1054.self = f$3#266($#1151); [];
jmp bb#446; [];
}; []
bb#472 {
jmp bb#471; [];
}; []
bb#473 {
$#1139 = $self#1054._keys; [];
$#1140 = f$as_byte#135($#1139); [];
$#1141 = f$sizeof#229(); [];
$#1142 = f$__mul__#235($new_n_buckets#1055, $#1141); [];
$#1143 = f$realloc#116($#1140, $#1142); [];
$self#1054.self = f$1#222($#1143); [];
$#1144 = $self#1054._vals; [];
$#1145 = f$as_byte#135($#1144); [];
$#1146 = f$sizeof#229(); [];
$#1147 = f$__mul__#235($new_n_buckets#1055, $#1146); [];
$#1148 = f$realloc#116($#1145, $#1147); [];
$self#1054.self = f$1#222($#1148); [];
jmp bb#471; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_set_isempty_false#270(
$flag#946: Pointer[UInt32]#21; [];
$i#947: int#4; [];
) -> void#6 [
$#948: int#4; [];
$#949: int#4; [];
$#950: UInt32#20; [];
$#951: int#4; [];
$#952: int#4; [];
$#953: int#4; [];
$#954: int#4; [];
$#955: UInt32#20; [];
$#956: UInt32#20; [];
]{
bb#269 {
$#948 = f$__rshift__#121($i#947, 4); [];
$#949 = f$__rshift__#121($i#947, 4); [];
$#950 = f$__getitem__#283($flag#946, $#949); [];
$#951 = f$__and__#16($i#947, 15); [];
$#952 = f$__lshift__#134($#951, 1); [];
$#953 = f$__lshift__#134(2, $#952); [];
$#954 = f$__invert__#74($#953); [];
$#955 = f$2#213($#954); [];
$#956 = f$__and__#105($#950, $#955); [];
f$__setitem__#78($flag#946, $#948, $#956); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__new__#271(
) -> .IndexError#151 [
]{
internal: .IndexError#151.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$gzread#272(
$.a0#569: Pointer[byte]#43; [];
$.a1#570: Pointer[byte]#43; [];
$.a2#571: UInt32#20; [];
) -> Int32#97 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$2#273(
$self#752: .AssertionError#148; [];
$message#753: str#0; [];
) -> void#6 [
]{
bb#272 {
$self#752.self = f$__new__#274('AssertionError', $message#753, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#274(
$a1#299: str#0; [];
$a2#300: str#0; [];
$a3#301: str#0; [];
$a4#302: str#0; [];
$a5#303: int#4; [];
$a6#304: int#4; [];
) -> .Tuple.6#200 [
]{
internal: .Tuple.6#200.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$cos#275(
$.a0#502: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#276(
$self#388: bool#1; [];
) -> bool#1 [
]{
internal: bool#1.__bool__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$1#277(
$p#661: Pointer[byte]#43; [];
) -> void#6 [
]{
bb#276 {
f$seq_free#165($p#661); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__new__#278(
) -> .TypeError#159 [
]{
internal: .TypeError#159.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#279(
$self#995: .dict#23; [];
$key#996: str#0; [];
) -> str#0 [
$x#997: int#4; [];
$#998: int#4; [];
$#999: bool#1; [];
$#1000: bool#1; [];
$#1001: .dict#23; [];
$#1002: str#0; [];
$#1004: str#0; [];
]{
bb#278 {
$x#997 = f$_kh_get#12($self#995, $key#996); [];
jmp bb#404; [];
}; []
bb#404 {
$#998 = f$_kh_end#46($self#995); [];
$#999 = f$__ne__#168($x#997, $#998); [];
$#1000 = f$__bool__#276($#999); [];
condjump ($#1000) bb#407 bb#406; [];
}; []
bb#405 {
$._typ_233#1003 = f$__new__#10(); [];
$#1004 = f$2#156($key#996); [];
f$2#216($._typ_233#1003, $#1004); [];
throw ($._typ_233#1003); [];
}; []
bb#406 {
jmp bb#405; [];
}; []
bb#407 {
$#1001 = $self#995._vals; [];
$#1002 = f$__getitem__#286($#1001, $x#997); [];
return $#1002; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__str__#280(
$self#339: int#4; [];
) -> str#0 [
]{
internal: int#4.__str__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$fread#281(
$.a0#531: Pointer[byte]#43; [];
$.a1#532: int#4; [];
$.a2#533: int#4; [];
$.a3#534: Pointer[byte]#43; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$2#282(
$self#748: .TypeError#159; [];
$message#749: str#0; [];
) -> void#6 [
]{
bb#281 {
$self#748.self = f$__new__#274('TypeError', $message#749, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#283(
$self#315: Pointer[UInt32]#21; [];
$index#316: int#4; [];
) -> UInt32#20 [
]{
internal: Pointer[UInt32]#21.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#284(
$self#317: Pointer[Pointer[byte]]#52; [];
$index#318: int#4; [];
) -> Pointer[byte]#43 [
]{
internal: Pointer[Pointer[byte]]#52.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#285(
$self#319: Pointer[byte]#43; [];
$index#320: int#4; [];
) -> byte#7 [
]{
internal: Pointer[byte]#43.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#286(
$self#321: Pointer[str]#22; [];
$index#322: int#4; [];
) -> str#0 [
]{
internal: Pointer[str]#22.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__lt__#287(
$self#359: int#4; [];
$other#360: int#4; [];
) -> bool#1 [
]{
internal: int#4.__lt__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
$.RTLD_NOW#558: int#4; [];
$.RTLD_GLOBAL#559: int#4; [];
$._typ_223#757: .AssertionError#148; [];
$._typ_224#772: .TypeError#159; [];
$._typ_225#794: .IndexError#151; [];
$._typ_226#854: .AttributeError#93; [];
$._typ_233#1003: .KeyError#27; [];
$._assign_76#1008: .Tuple.2#88; [];
$._assign_91#1123: .Tuple.2#85; [];
$._assign_92#1128: .Tuple.2#85; [];
$._assign_93#1230: .Tuple.2#87; [];
$._typ_232#1276: .IndexError#151; [];
$._assign_95#1282: .Tuple.4#37; [];
$._assign_97#1298: .Tuple.4#37; [];
$._gen_104#1313: Generator[str]#110; [];
$._gen_105#1319: Generator[str]#110; [];
$._typ_227#1350: .ValueError#72; [];
$.BLOCK_SIZE#1352: int#4; [];
$.CACHELINE_SIZE#1353: int#4; [];
$.MIN_GALLOP#1354: int#4; [];
$.INSERTION_SORT_THRESHOLD#1355: int#4; [];
$.NINTHER_THRESHOLD#1356: int#4; [];
$.PARTIAL_INSERTION_SORT_LIMIT#1357: int#4; [];
$.e#1358: float#3; [];
$.pi#1359: float#3; [];
$.tau#1360: float#3; [];
$.inf#1361: float#3; [];
$.nan#1362: float#3; [];
$._typ_228#1363: .list#13; [];
$._lst_175#1364: .list#13; [];
$._F#1365: .list#13; [];
$._typ_229#1368: .dict#53; [];
$._DLOPEN_CACHE#1369: .dict#53; [];
$._typ_230#1370: .dict#53; [];
$._DLSYM_CACHE#1371: .dict#53; [];
$.SEEK_SET#1372: int#4; [];
$.SEEK_CUR#1373: int#4; [];
$.SEEK_END#1374: int#4; [];
$._typ_231#1375: .dict#23; [];
$.environ#1416: .EnvMap#24; [];
$.LD#1423: str#0; [];
$._PY_INITIALIZED#1426: bool#1; [];
$._typ_234#1427: .dict#57; [];
$._PY_MODULE_CACHE#1428: .dict#57; [];
$._typ_235#1430: .list#15; [];
$._lst_222#1431: .list#15; [];
}; []

try#0[
]{
}; []