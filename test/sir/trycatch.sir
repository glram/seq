module module{
def f$base#0(
) -> void#7 [
$#1355: str#0; [];
$#1356: str#0; [];
$#1362: str#0; [];
$#1363: str#0; [];
$#1364: str#0; [];
$#1365: str#0; [];
$#1366: str#0; [];
]{
bb#0 {
$.RTLD_NOW#535 = 2; [];
$.RTLD_GLOBAL#536 = 8; [];
$.BLOCK_SIZE#1283 = 64; [];
$.CACHELINE_SIZE#1284 = 64; [];
$.MIN_GALLOP#1285 = 7; [];
$.INSERTION_SORT_THRESHOLD#1286 = 24; [];
$.NINTHER_THRESHOLD#1287 = 128; [];
$.PARTIAL_INSERTION_SORT_LIMIT#1288 = 8; [];
$.e#1289 = 2.718282; [];
$.pi#1290 = 3.141593; [];
$.tau#1291 = 6.283185; [];
$.inf#1292 = f$3#53('inf'); [];
$.nan#1293 = f$3#53('nan'); [];
$._typ_698#1294 = f$__new__#4(); [];
f$3#3($._typ_698#1294, 21); [];
$._lst_646#1295 = $._typ_698#1294; [];
f$append#41($._lst_646#1295, 1); [];
f$append#41($._lst_646#1295, 1); [];
f$append#41($._lst_646#1295, 2); [];
f$append#41($._lst_646#1295, 6); [];
f$append#41($._lst_646#1295, 24); [];
f$append#41($._lst_646#1295, 120); [];
f$append#41($._lst_646#1295, 720); [];
f$append#41($._lst_646#1295, 5040); [];
f$append#41($._lst_646#1295, 40320); [];
f$append#41($._lst_646#1295, 362880); [];
f$append#41($._lst_646#1295, 3628800); [];
f$append#41($._lst_646#1295, 39916800); [];
f$append#41($._lst_646#1295, 479001600); [];
f$append#41($._lst_646#1295, 6227020800); [];
f$append#41($._lst_646#1295, 87178291200); [];
f$append#41($._lst_646#1295, 1307674368000); [];
f$append#41($._lst_646#1295, 20922789888000); [];
f$append#41($._lst_646#1295, 355687428096000); [];
f$append#41($._lst_646#1295, 6402373705728000); [];
f$append#41($._lst_646#1295, 121645100408832000); [];
f$append#41($._lst_646#1295, 2432902008176640000); [];
$._F#1296 = $._lst_646#1295; [];
$._typ_699#1299 = f$__new__#137(); [];
f$1#31($._typ_699#1299); [];
$._DLOPEN_CACHE#1300 = $._typ_699#1299; [];
$._typ_700#1301 = f$__new__#137(); [];
f$1#31($._typ_700#1301); [];
$._DLSYM_CACHE#1302 = $._typ_700#1301; [];
$.SEEK_SET#1303 = 0; [];
$.SEEK_CUR#1304 = 1; [];
$.SEEK_END#1305 = 2; [];
$.environ#1347 = f$1#172(); [];
$#1355 = f$dlext#26(); [];
$#1356 = f$__add__#133('libpython.', $#1355); [];
$.LD#1354 = f$getenv#24('SEQ_PYTHON', $#1356); [];
$._PY_INITIALIZED#1357 = false; [];
$._typ_704#1358 = f$__new__#136(); [];
f$1#30($._typ_704#1358); [];
$._PY_MODULE_CACHE#1359 = $._typ_704#1358; [];
noterm;
}; []
bb#570 {
noterm;
}; []
bb#571 {
$._typ_705#1360 = f$__new__#45(); [];
f$2#43($._typ_705#1360, 'fail'); [];
throw ($._typ_705#1360); [];
}; [tryCatchAttribute: try#1, ]
bb#572 {
$#1362 = f$message#129($e#1361); [];
$#1363 = f$__str__#161($#1362); [];
f$seq_print#238($#1363); [];
$#1364 = f$__str__#161('
'); [];
f$seq_print#238($#1364); [];
jmp bb#570; [];
}; []
bb#573 {
$#1365 = f$__str__#161('oof'); [];
f$seq_print#238($#1365); [];
$#1366 = f$__str__#161('
'); [];
f$seq_print#238($#1366); [];
noterm;
}; []
}; []
def f$__new__#2(
$len#385: int#4; [];
) -> Array[int]#477 [
]{
internal: Array[int]#477.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$3#3(
$self#837: .list#479; [];
$capacity#838: int#4; [];
) -> void#7 [
]{
bb#2 {
$self#837.self = f$__new__#2($capacity#838); [];
$self#837.self = 0; [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#4(
) -> .list#479 [
]{
internal: .list#479.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#5(
$self#1343: .EnvMap#486; [];
$key#1344: str#0; [];
) -> bool#1 [
$#1345: .EnvMap#486; [];
$#1346: bool#1; [];
]{
bb#4 {
f$_init_if_needed#21($self#1343); [];
$#1345 = $self#1343._map; [];
$#1346 = f$__contains__#193($#1345, $key#1344); [];
return $#1346; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#6(
) -> .KeyError#489 [
]{
internal: .KeyError#489.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_set_isboth_false#7(
$flag#904: Pointer[UInt32]#483; [];
$i#905: int#4; [];
) -> void#7 [
$#906: int#4; [];
$#907: int#4; [];
$#908: UInt32#482; [];
$#909: int#4; [];
$#910: int#4; [];
$#911: int#4; [];
$#912: int#4; [];
$#913: UInt32#482; [];
$#914: UInt32#482; [];
]{
bb#6 {
$#906 = f$__rshift__#112($i#905, 4); [];
$#907 = f$__rshift__#112($i#905, 4); [];
$#908 = f$__getitem__#270($flag#904, $#907); [];
$#909 = f$__and__#12($i#905, 15); [];
$#910 = f$__lshift__#125($#909, 1); [];
$#911 = f$__lshift__#125(3, $#910); [];
$#912 = f$__invert__#66($#911); [];
$#913 = f$2#202($#912); [];
$#914 = f$__and__#96($#908, $#913); [];
f$__setitem__#70($flag#904, $#906, $#914); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$_kh_get#8(
$self#966: .dict#485; [];
$key#967: str#0; [];
) -> int#4 [
$#968: .dict#485; [];
$#969: bool#1; [];
$step#970: int#4; [];
$mask#971: int#4; [];
$#972: .dict#485; [];
$k#973: int#4; [];
$i#974: int#4; [];
$last#975: int#4; [];
$._bin_res#976: bool#1; [];
$#977: .dict#485; [];
$#978: int#4; [];
$#979: bool#1; [];
$#980: bool#1; [];
$#981: bool#1; [];
$._bin_res#982: bool#1; [];
$#983: .dict#485; [];
$#984: int#4; [];
$#985: bool#1; [];
$#986: .dict#485; [];
$#987: str#0; [];
$#988: bool#1; [];
$#989: bool#1; [];
$#990: bool#1; [];
$#991: bool#1; [];
$#992: int#4; [];
$#993: bool#1; [];
$#994: bool#1; [];
$#995: .dict#485; [];
$._if_res#996: int#4; [];
$#997: .dict#485; [];
$#998: int#4; [];
$#999: bool#1; [];
$#1000: .dict#485; [];
]{
bb#7 {
jmp bb#387; [];
}; []
bb#387 {
$#968 = $self#966._n_buckets; [];
$#969 = f$__bool__#13($#968); [];
condjump ($#969) bb#390 bb#389; [];
}; []
bb#388 {
return; [];
}; []
bb#389 {
return 0; [];
}; []
bb#390 {
$step#970 = 0; [];
$#972 = $self#966._n_buckets; [];
$mask#971 = f$__sub__#132($#972, 1); [];
$k#973 = f$_dict_hash#86($key#967); [];
$i#974 = f$__and__#12($k#973, $mask#971); [];
$last#975 = $i#974; [];
jmp bb#391; [];
}; []
bb#391 {
$#977 = $self#966._flags; [];
$#978 = f$__ac_isempty#135($#977, $i#974); [];
$#979 = f$__bool__#13($#978); [];
$#980 = f$__invert__#55($#979); [];
$#981 = f$__bool__#263($#980); [];
condjump ($#981) bb#397 bb#395; [];
}; []
bb#392 {
$step#970 = f$__add__#251($step#970, 1); [];
$#992 = f$__add__#251($i#974, $step#970); [];
$i#974 = f$__and__#12($#992, $mask#971); [];
jmp bb#402; [];
}; [loopAttribute: loop(none, bb#391, bb#392, none, bb#393), ]
bb#393 {
$#997 = $self#966._flags; [];
$#998 = f$__ac_iseither#60($#997, $i#974); [];
$#999 = f$__bool__#13($#998); [];
condjump ($#999) bb#406 bb#407; [];
}; []
bb#394 {
$._bin_res#976 = true; [];
jmp bb#396; [];
}; []
bb#395 {
$._bin_res#976 = false; [];
jmp bb#396; [];
}; []
bb#396 {
$#991 = f$__bool__#263($._bin_res#976); [];
condjump ($#991) bb#392 bb#393; [];
}; []
bb#397 {
$#983 = $self#966._flags; [];
$#984 = f$__ac_isdel#72($#983, $i#974); [];
$#985 = f$__bool__#13($#984); [];
condjump ($#985) bb#398 bb#401; [];
}; []
bb#398 {
$._bin_res#982 = true; [];
jmp bb#400; [];
}; []
bb#399 {
$._bin_res#982 = false; [];
jmp bb#400; [];
}; []
bb#400 {
$#990 = f$__bool__#263($._bin_res#982); [];
condjump ($#990) bb#394 bb#395; [];
}; []
bb#401 {
$#986 = $self#966._keys; [];
$#987 = f$__getitem__#273($#986, $i#974); [];
$#988 = f$__ne__#9($#987, $key#967); [];
$#989 = f$__bool__#263($#988); [];
condjump ($#989) bb#398 bb#399; [];
}; []
bb#402 {
$#993 = f$__eq__#38($i#974, $last#975); [];
$#994 = f$__bool__#263($#993); [];
condjump ($#994) bb#405 bb#404; [];
}; [loopAttribute: loop(none, bb#391, bb#392, none, bb#393), ]
bb#403 {
jmp bb#391; [];
}; [loopAttribute: loop(none, bb#391, bb#392, none, bb#393), ]
bb#404 {
jmp bb#403; [];
}; [loopAttribute: loop(none, bb#391, bb#392, none, bb#393), ]
bb#405 {
$#995 = $self#966._n_buckets; [];
return $#995; [];
}; [loopAttribute: loop(none, bb#391, bb#392, none, bb#393), ]
bb#406 {
$#1000 = $self#966._n_buckets; [];
$._if_res#996 = $#1000; [];
jmp bb#408; [];
}; []
bb#407 {
$._if_res#996 = $i#974; [];
jmp bb#408; [];
}; []
bb#408 {
return $._if_res#996; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ne__#9(
$self#1204: str#0; [];
$other#1205: str#0; [];
) -> bool#1 [
$#1206: bool#1; [];
$#1207: bool#1; [];
$#1208: bool#1; [];
]{
bb#8 {
$#1206 = f$__eq__#88($self#1204, $other#1205); [];
$#1207 = f$__bool__#263($#1206); [];
$#1208 = f$__invert__#55($#1207); [];
return $#1208; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_set_isdel_true#10(
$flag#915: Pointer[UInt32]#483; [];
$i#916: int#4; [];
) -> void#7 [
$#917: int#4; [];
$#918: int#4; [];
$#919: UInt32#482; [];
$#920: int#4; [];
$#921: int#4; [];
$#922: int#4; [];
$#923: UInt32#482; [];
$#924: UInt32#482; [];
]{
bb#9 {
$#917 = f$__rshift__#112($i#916, 4); [];
$#918 = f$__rshift__#112($i#916, 4); [];
$#919 = f$__getitem__#270($flag#915, $#918); [];
$#920 = f$__and__#12($i#916, 15); [];
$#921 = f$__lshift__#125($#920, 1); [];
$#922 = f$__lshift__#125(1, $#921); [];
$#923 = f$2#202($#922); [];
$#924 = f$__or__#145($#919, $#923); [];
f$__setitem__#70($flag#915, $#917, $#924); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__rshift__#11(
$self#393: UInt32#482; [];
$other#394: UInt32#482; [];
) -> UInt32#482 [
]{
internal: UInt32#482.__rshift__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__and__#12(
$self#354: int#4; [];
$other#355: int#4; [];
) -> int#4 [
]{
internal: int#4.__and__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#13(
$self#327: int#4; [];
) -> bool#1 [
]{
internal: int#4.__bool__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#14(
) -> Optional[int]#497 [
]{
internal: Optional[int]#497.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#15(
$a1#282: int#4; [];
$a2#283: int#4; [];
$a3#284: int#4; [];
$a4#285: int#4; [];
) -> .Tuple.4#499 [
]{
internal: .Tuple.4#499.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$2#16(
$self#1227: str#0; [];
$s#1228: .slice#501; [];
) -> str#0 [
$#1230: int#4; [];
$#1231: .slice#501; [];
$#1232: Optional[int]#497; [];
$#1233: .slice#501; [];
$#1234: Optional[int]#497; [];
$#1235: Optional[int]#497; [];
$start#1236: int#4; [];
$stop#1237: int#4; [];
$step#1238: int#4; [];
$length#1239: int#4; [];
$#1240: str#0; [];
$#1241: Pointer[byte]#505; [];
$#1242: str#0; [];
]{
bb#15 {
$#1230 = f$len#166($self#1227); [];
$#1231 = $s#1228.start; [];
$#1232 = f$1#143($#1231); [];
$#1233 = $s#1228.end; [];
$#1234 = f$1#143($#1233); [];
$#1235 = f$__new__#14(); [];
$._assign_566#1229 = f$adjust_indices#123($#1230, $#1232, $#1234, $#1235); [];
$start#1236 = $._assign_566#1229.a1; [];
$stop#1237 = $._assign_566#1229.a2; [];
$step#1238 = $._assign_566#1229.a3; [];
$length#1239 = $._assign_566#1229.a4; [];
$#1240 = $self#1227.ptr; [];
$#1241 = f$__add__#118($#1240, $start#1236); [];
$#1242 = f$__new__#151($#1241, $length#1239); [];
return $#1242; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#17(
$start#640: int#4; [];
$end#641: int#4; [];
) -> .slice#501 [
]{
internal: .slice#501.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#18(
$self#1209: str#0; [];
$idx#1210: int#4; [];
) -> str#0 [
$#1211: bool#1; [];
$#1212: bool#1; [];
$#1213: int#4; [];
$._bin_res#1214: bool#1; [];
$#1215: bool#1; [];
$#1216: bool#1; [];
$#1217: int#4; [];
$#1218: bool#1; [];
$#1219: bool#1; [];
$#1220: bool#1; [];
$#1221: bool#1; [];
$#1222: bool#1; [];
$#1224: str#0; [];
$#1225: Pointer[byte]#505; [];
$#1226: str#0; [];
]{
bb#17 {
jmp bb#516; [];
}; []
bb#516 {
$#1211 = f$__lt__#274($idx#1210, 0); [];
$#1212 = f$__bool__#263($#1211); [];
condjump ($#1212) bb#519 bb#518; [];
}; []
bb#517 {
jmp bb#520; [];
}; []
bb#518 {
jmp bb#517; [];
}; []
bb#519 {
$#1213 = f$len#166($self#1209); [];
$idx#1210 = f$__add__#251($idx#1210, $#1213); [];
jmp bb#517; [];
}; []
bb#520 {
$#1215 = f$__le__#98(0, $idx#1210); [];
$#1216 = f$__bool__#263($#1215); [];
condjump ($#1216) bb#527 bb#525; [];
}; []
bb#521 {
$#1224 = $self#1209.ptr; [];
$#1225 = f$__add__#118($#1224, $idx#1210); [];
$#1226 = f$__new__#151($#1225, 1); [];
return $#1226; [];
}; []
bb#522 {
jmp bb#521; [];
}; []
bb#523 {
$._typ_702#1223 = f$__new__#258(); [];
f$2#252($._typ_702#1223, 'string index out of range'); [];
throw ($._typ_702#1223); [];
}; []
bb#524 {
$._bin_res#1214 = true; [];
jmp bb#526; [];
}; []
bb#525 {
$._bin_res#1214 = false; [];
jmp bb#526; [];
}; []
bb#526 {
$#1220 = f$__bool__#263($._bin_res#1214); [];
$#1221 = f$__invert__#55($#1220); [];
$#1222 = f$__bool__#263($#1221); [];
condjump ($#1222) bb#523 bb#522; [];
}; []
bb#527 {
$#1217 = f$len#166($self#1209); [];
$#1218 = f$__lt__#274($idx#1210, $#1217); [];
$#1219 = f$__bool__#263($#1218); [];
condjump ($#1219) bb#524 bb#525; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$from_ptr#19(
$t#1258: Pointer[byte]#505; [];
) -> str#0 [
$n#1259: int#4; [];
$p#1260: Pointer[byte]#505; [];
$#1261: str#0; [];
]{
bb#18 {
$n#1259 = f$strlen#110($t#1258); [];
$p#1260 = f$2#200($n#1259); [];
f$memcpy#121($p#1260, $t#1258, $n#1259); [];
$#1261 = f$__new__#151($p#1260, $n#1259); [];
return $#1261; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__len__#20(
$self#964: .dict#485; [];
) -> int#4 [
$#965: .dict#485; [];
]{
bb#19 {
$#965 = $self#964._size; [];
return $#965; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_init_if_needed#21(
$self#1308: .EnvMap#486; [];
) -> void#7 [
$#1309: .EnvMap#486; [];
$#1310: int#4; [];
$#1311: bool#1; [];
$#1312: bool#1; [];
$env#1313: Pointer[Pointer[byte]]#514; [];
$p#1314: Pointer[byte]#505; [];
$i#1315: int#4; [];
$#1316: bool#1; [];
$s#1317: str#0; [];
$#1318: bool#1; [];
$j#1319: int#4; [];
$found#1320: bool#1; [];
$#1321: int#4; [];
$#1322: bool#1; [];
$#1323: bool#1; [];
$#1324: str#0; [];
$#1325: bool#1; [];
$#1326: bool#1; [];
$k#1327: str#0; [];
$._if_res#1328: str#0; [];
$#1329: bool#1; [];
$#1330: .slice#501; [];
$#1331: str#0; [];
$v#1332: str#0; [];
$._if_res#1333: str#0; [];
$#1334: bool#1; [];
$#1335: int#4; [];
$#1336: .rslice#525; [];
$#1337: str#0; [];
$#1338: .EnvMap#486; [];
]{
bb#20 {
jmp bb#543; [];
}; []
bb#543 {
$#1309 = $self#1308._map; [];
$#1310 = f$len#165($#1309); [];
$#1311 = f$__eq__#38($#1310, 0); [];
$#1312 = f$__bool__#263($#1311); [];
condjump ($#1312) bb#546 bb#545; [];
}; []
bb#544 {
return; [];
}; []
bb#545 {
jmp bb#544; [];
}; []
bb#546 {
$env#1313 = f$seq_env#139(); [];
$p#1314 = f$__getitem__#271($env#1313, 0); [];
$i#1315 = 0; [];
jmp bb#547; [];
}; []
bb#547 {
$#1316 = f$__bool__#176($p#1314); [];
condjump ($#1316) bb#548 bb#549; [];
}; []
bb#548 {
$s#1317 = f$from_ptr#19($p#1314); [];
jmp bb#550; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#549 {
jmp bb#544; [];
}; []
bb#550 {
$#1318 = f$__bool__#76($s#1317); [];
condjump ($#1318) bb#553 bb#552; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#551 {
$i#1315 = f$__add__#251($i#1315, 1); [];
$p#1314 = f$__getitem__#271($env#1313, $i#1315); [];
jmp bb#547; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#552 {
jmp bb#551; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#553 {
$j#1319 = 0; [];
$found#1320 = false; [];
jmp bb#554; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#554 {
$#1321 = f$len#166($s#1317); [];
$#1322 = f$__lt__#274($j#1319, $#1321); [];
$#1323 = f$__bool__#263($#1322); [];
condjump ($#1323) bb#555 bb#556; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#555 {
jmp bb#557; [];
}; [loopAttribute: loop(none, bb#554, bb#555, none, bb#556), ]
bb#556 {
$#1329 = f$__bool__#263($found#1320); [];
condjump ($#1329) bb#561 bb#562; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#557 {
$#1324 = f$__getitem__#18($s#1317, $j#1319); [];
$#1325 = f$__eq__#88($#1324, '='); [];
$#1326 = f$__bool__#263($#1325); [];
condjump ($#1326) bb#560 bb#559; [];
}; [loopAttribute: loop(none, bb#554, bb#555, none, bb#556), ]
bb#558 {
$j#1319 = f$__add__#251($j#1319, 1); [];
jmp bb#554; [];
}; [loopAttribute: loop(none, bb#554, bb#555, none, bb#556), ]
bb#559 {
jmp bb#558; [];
}; [loopAttribute: loop(none, bb#554, bb#555, none, bb#556), ]
bb#560 {
$found#1320 = true; [];
jmp bb#556; [];
}; [loopAttribute: loop(none, bb#554, bb#555, none, bb#556), ]
bb#561 {
$#1330 = f$__new__#17(0, $j#1319); [];
$#1331 = f$2#16($s#1317, $#1330); [];
$._if_res#1328 = $#1331; [];
jmp bb#563; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#562 {
$._if_res#1328 = $s#1317; [];
jmp bb#563; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#563 {
$k#1327 = $._if_res#1328; [];
$#1334 = f$__bool__#263($found#1320); [];
condjump ($#1334) bb#564 bb#565; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#564 {
$#1335 = f$__add__#251($j#1319, 1); [];
$#1336 = f$__new__#34($#1335); [];
$#1337 = f$4#147($s#1317, $#1336); [];
$._if_res#1333 = $#1337; [];
jmp bb#566; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#565 {
$._if_res#1333 = ''; [];
jmp bb#566; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
bb#566 {
$v#1332 = $._if_res#1333; [];
$#1338 = $self#1308._map; [];
f$__setitem__#114($#1338, $k#1327, $v#1332); [];
jmp bb#551; [];
}; [loopAttribute: loop(none, bb#547, bb#548, none, bb#549), ]
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$1#22(
$self#1339: .EnvMap#486; [];
$key#1340: str#0; [];
) -> str#0 [
$#1341: .EnvMap#486; [];
$#1342: str#0; [];
]{
bb#21 {
f$_init_if_needed#21($self#1339); [];
$#1341 = $self#1339._map; [];
$#1342 = f$__getitem__#266($#1341, $key#1340); [];
return $#1342; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__add__#23(
$self#380: float#3; [];
$other#381: float#3; [];
) -> float#3 [
]{
internal: float#3.__add__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$getenv#24(
$key#1348: str#0; [];
$default#1349: str#0; [];
) -> str#0 [
$._if_res#1350: str#0; [];
$#1351: bool#1; [];
$#1352: bool#1; [];
$#1353: str#0; [];
]{
bb#23 {
$#1351 = f$1#5($.environ#1347, $key#1348); [];
$#1352 = f$__bool__#263($#1351); [];
condjump ($#1352) bb#567 bb#568; [];
}; []
bb#567 {
$#1353 = f$1#22($.environ#1347, $key#1348); [];
$._if_res#1350 = $#1353; [];
jmp bb#569; [];
}; []
bb#568 {
$._if_res#1350 = $default#1349; [];
jmp bb#569; [];
}; []
bb#569 {
return $._if_res#1350; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__or__#25(
$self#356: int#4; [];
$other#357: int#4; [];
) -> int#4 [
]{
internal: int#4.__or__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$dlext#26(
) -> str#0 [
$#1297: bool#1; [];
$#1298: bool#1; [];
]{
bb#25 {
jmp bb#539; [];
}; []
bb#539 {
$#1297 = f$seq_is_macos#99(); [];
$#1298 = f$__bool__#263($#1297); [];
condjump ($#1298) bb#542 bb#541; [];
}; []
bb#540 {
return; [];
}; []
bb#541 {
return 'so'; [];
}; []
bb#542 {
return 'dylib'; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$_init#27(
$self#936: .dict#515; [];
) -> void#7 [
]{
bb#26 {
$self#936.self = 0; [];
$self#936.self = 0; [];
$self#936.self = 0; [];
$self#936.self = 0; [];
$self#936.self = f$__new__#51(); [];
$self#936.self = f$__new__#50(); [];
$self#936.self = f$__new__#48(); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_init#28(
$self#937: .dict#519; [];
) -> void#7 [
]{
bb#27 {
$self#937.self = 0; [];
$self#937.self = 0; [];
$self#937.self = 0; [];
$self#937.self = 0; [];
$self#937.self = f$__new__#51(); [];
$self#937.self = f$__new__#50(); [];
$self#937.self = f$__new__#47(); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_init#29(
$self#938: .dict#485; [];
) -> void#7 [
]{
bb#28 {
$self#938.self = 0; [];
$self#938.self = 0; [];
$self#938.self = 0; [];
$self#938.self = 0; [];
$self#938.self = f$__new__#51(); [];
$self#938.self = f$__new__#50(); [];
$self#938.self = f$__new__#50(); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#30(
$self#939: .dict#519; [];
) -> void#7 [
]{
bb#29 {
f$_init#28($self#939); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#31(
$self#940: .dict#515; [];
) -> void#7 [
]{
bb#30 {
f$_init#27($self#940); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#32(
$self#941: .dict#485; [];
) -> void#7 [
]{
bb#31 {
f$_init#29($self#941); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#33(
$self#389: Array[int]#477; [];
$index#390: int#4; [];
$what#391: int#4; [];
) -> void#7 [
]{
internal: Array[int]#477.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#34(
$start#639: int#4; [];
) -> .rslice#525 [
]{
internal: .rslice#525.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$1#35(
$data#386: Pointer[int]#527; [];
$len#387: int#4; [];
) -> Array[int]#477 [
]{
internal: Array[int]#477.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_resize#36(
$self#844: .list#479; [];
$new_cap#845: int#4; [];
) -> void#7 [
$p#846: Pointer[int]#527; [];
$#847: .list#479; [];
$#848: .list#479; [];
$#849: Pointer[byte]#505; [];
$#850: int#4; [];
$#851: int#4; [];
$#852: Pointer[byte]#505; [];
]{
bb#35 {
$#847 = $self#844.arr; [];
$#848 = $#847.ptr; [];
$#849 = f$as_byte#127($#848); [];
$#850 = f$sizeof#218(); [];
$#851 = f$__mul__#223($new_cap#845, $#850); [];
$#852 = f$realloc#107($#849, $#851); [];
$p#846 = f$1#211($#852); [];
$self#844.self = f$1#35($p#846, $new_cap#845); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__div__#37(
$self#336: int#4; [];
$other#337: int#4; [];
) -> int#4 [
]{
internal: int#4.__div__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__eq__#38(
$self#342: int#4; [];
$other#343: int#4; [];
) -> bool#1 [
]{
internal: int#4.__eq__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$_kh_end#39(
$self#1173: .dict#485; [];
) -> int#4 [
$#1174: .dict#485; [];
]{
bb#38 {
$#1174 = $self#1173._n_buckets; [];
return $#1174; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_fsize#40(
$m#925: int#4; [];
) -> int#4 [
$._if_res#926: int#4; [];
$#927: bool#1; [];
$#928: bool#1; [];
$#929: int#4; [];
]{
bb#39 {
$#927 = f$__lt__#274($m#925, 16); [];
$#928 = f$__bool__#263($#927); [];
condjump ($#928) bb#380 bb#381; [];
}; []
bb#380 {
$._if_res#926 = 1; [];
jmp bb#382; [];
}; []
bb#381 {
$#929 = f$__rshift__#112($m#925, 4); [];
$._if_res#926 = $#929; [];
jmp bb#382; [];
}; []
bb#382 {
return $._if_res#926; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$append#41(
$self#839: .list#479; [];
$x#840: int#4; [];
) -> void#7 [
$#841: .list#479; [];
$#842: .list#479; [];
$#843: .list#479; [];
]{
bb#40 {
f$_resize_if_full#189($self#839); [];
$#841 = $self#839.arr; [];
$#842 = $self#839.len; [];
f$__setitem__#33($#841, $#842, $x#840); [];
$#843 = $self#839.len; [];
$self#839.self = f$__add__#251($#843, 1); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$adjust_indices_helper#42(
$length#646: int#4; [];
$start#647: int#4; [];
$stop#648: int#4; [];
$step#649: int#4; [];
) -> .Tuple.4#499 [
$#650: bool#1; [];
$#651: bool#1; [];
$#652: bool#1; [];
$#653: bool#1; [];
$._if_res#654: int#4; [];
$#655: bool#1; [];
$#656: bool#1; [];
$#657: bool#1; [];
$#658: bool#1; [];
$._if_res#659: int#4; [];
$#660: bool#1; [];
$#661: bool#1; [];
$#662: int#4; [];
$#663: bool#1; [];
$#664: bool#1; [];
$#665: bool#1; [];
$#666: bool#1; [];
$._if_res#667: int#4; [];
$#668: bool#1; [];
$#669: bool#1; [];
$#670: bool#1; [];
$#671: bool#1; [];
$._if_res#672: int#4; [];
$#673: bool#1; [];
$#674: bool#1; [];
$#675: int#4; [];
$#676: bool#1; [];
$#677: bool#1; [];
$#678: bool#1; [];
$#679: bool#1; [];
$#680: int#4; [];
$#681: int#4; [];
$#682: int#4; [];
$#683: int#4; [];
$#684: int#4; [];
$#685: .Tuple.4#499; [];
$#686: bool#1; [];
$#687: bool#1; [];
$#688: int#4; [];
$#689: int#4; [];
$#690: int#4; [];
$#691: int#4; [];
$#692: .Tuple.4#499; [];
$#693: .Tuple.4#499; [];
]{
bb#41 {
jmp bb#278; [];
}; []
bb#278 {
$#650 = f$__lt__#274($start#647, 0); [];
$#651 = f$__bool__#263($#650); [];
condjump ($#651) bb#281 bb#280; [];
}; []
bb#279 {
jmp bb#294; [];
}; []
bb#280 {
$#657 = f$__ge__#212($start#647, $length#646); [];
$#658 = f$__bool__#263($#657); [];
condjump ($#658) bb#290 bb#289; [];
}; []
bb#281 {
$start#647 = f$__add__#251($start#647, $length#646); [];
jmp bb#282; [];
}; []
bb#282 {
$#652 = f$__lt__#274($start#647, 0); [];
$#653 = f$__bool__#263($#652); [];
condjump ($#653) bb#285 bb#284; [];
}; []
bb#283 {
jmp bb#279; [];
}; []
bb#284 {
jmp bb#283; [];
}; []
bb#285 {
$#655 = f$__lt__#274($step#649, 0); [];
$#656 = f$__bool__#263($#655); [];
condjump ($#656) bb#286 bb#287; [];
}; []
bb#286 {
$._if_res#654 = -1; [];
jmp bb#288; [];
}; []
bb#287 {
$._if_res#654 = 0; [];
jmp bb#288; [];
}; []
bb#288 {
$start#647 = $._if_res#654; [];
jmp bb#283; [];
}; []
bb#289 {
jmp bb#279; [];
}; []
bb#290 {
$#660 = f$__lt__#274($step#649, 0); [];
$#661 = f$__bool__#263($#660); [];
condjump ($#661) bb#291 bb#292; [];
}; []
bb#291 {
$#662 = f$__sub__#132($length#646, 1); [];
$._if_res#659 = $#662; [];
jmp bb#293; [];
}; []
bb#292 {
$._if_res#659 = $length#646; [];
jmp bb#293; [];
}; []
bb#293 {
$start#647 = $._if_res#659; [];
jmp bb#279; [];
}; []
bb#294 {
$#663 = f$__lt__#274($stop#648, 0); [];
$#664 = f$__bool__#263($#663); [];
condjump ($#664) bb#297 bb#296; [];
}; []
bb#295 {
jmp bb#310; [];
}; []
bb#296 {
$#670 = f$__ge__#212($stop#648, $length#646); [];
$#671 = f$__bool__#263($#670); [];
condjump ($#671) bb#306 bb#305; [];
}; []
bb#297 {
$stop#648 = f$__add__#251($stop#648, $length#646); [];
jmp bb#298; [];
}; []
bb#298 {
$#665 = f$__lt__#274($stop#648, 0); [];
$#666 = f$__bool__#263($#665); [];
condjump ($#666) bb#301 bb#300; [];
}; []
bb#299 {
jmp bb#295; [];
}; []
bb#300 {
jmp bb#299; [];
}; []
bb#301 {
$#668 = f$__lt__#274($step#649, 0); [];
$#669 = f$__bool__#263($#668); [];
condjump ($#669) bb#302 bb#303; [];
}; []
bb#302 {
$._if_res#667 = -1; [];
jmp bb#304; [];
}; []
bb#303 {
$._if_res#667 = 0; [];
jmp bb#304; [];
}; []
bb#304 {
$stop#648 = $._if_res#667; [];
jmp bb#299; [];
}; []
bb#305 {
jmp bb#295; [];
}; []
bb#306 {
$#673 = f$__lt__#274($step#649, 0); [];
$#674 = f$__bool__#263($#673); [];
condjump ($#674) bb#307 bb#308; [];
}; []
bb#307 {
$#675 = f$__sub__#132($length#646, 1); [];
$._if_res#672 = $#675; [];
jmp bb#309; [];
}; []
bb#308 {
$._if_res#672 = $length#646; [];
jmp bb#309; [];
}; []
bb#309 {
$stop#648 = $._if_res#672; [];
jmp bb#295; [];
}; []
bb#310 {
$#676 = f$__lt__#274($step#649, 0); [];
$#677 = f$__bool__#263($#676); [];
condjump ($#677) bb#313 bb#312; [];
}; []
bb#311 {
$#693 = f$__new__#15($start#647, $stop#648, $step#649, 0); [];
return $#693; [];
}; []
bb#312 {
jmp bb#318; [];
}; []
bb#313 {
jmp bb#314; [];
}; []
bb#314 {
$#678 = f$__lt__#274($stop#648, $start#647); [];
$#679 = f$__bool__#263($#678); [];
condjump ($#679) bb#317 bb#316; [];
}; []
bb#315 {
jmp bb#311; [];
}; []
bb#316 {
jmp bb#315; [];
}; []
bb#317 {
$#680 = f$__sub__#132($start#647, $stop#648); [];
$#681 = f$__sub__#132($#680, 1); [];
$#682 = f$__neg__#79($step#649); [];
$#683 = f$__div__#37($#681, $#682); [];
$#684 = f$__add__#251($#683, 1); [];
$#685 = f$__new__#15($start#647, $stop#648, $step#649, $#684); [];
return $#685; [];
}; []
bb#318 {
$#686 = f$__lt__#274($start#647, $stop#648); [];
$#687 = f$__bool__#263($#686); [];
condjump ($#687) bb#321 bb#320; [];
}; []
bb#319 {
jmp bb#311; [];
}; []
bb#320 {
jmp bb#319; [];
}; []
bb#321 {
$#688 = f$__sub__#132($stop#648, $start#647); [];
$#689 = f$__sub__#132($#688, 1); [];
$#690 = f$__div__#37($#689, $step#649); [];
$#691 = f$__add__#251($#690, 1); [];
$#692 = f$__new__#15($start#647, $stop#648, $step#649, $#691); [];
return $#692; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$2#43(
$self#719: .ValueError#531; [];
$message#720: str#0; [];
) -> void#7 [
]{
bb#42 {
$self#719.self = f$__new__#261('ValueError', $message#720, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$8#44(
$b#325: UInt32#482; [];
) -> int#4 [
]{
internal: int#4.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#45(
) -> .ValueError#531 [
]{
internal: .ValueError#531.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__ne__#46(
$self#321: Pointer[byte]#505; [];
$other#322: Pointer[byte]#505; [];
) -> bool#1 [
]{
internal: Pointer[byte]#505.__ne__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#47(
) -> Pointer[.pyobj]#518 [
]{
internal: Pointer[.pyobj]#518.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#48(
) -> Pointer[Pointer[byte]]#514 [
]{
internal: Pointer[Pointer[byte]]#514.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#49(
) -> Pointer[byte]#505 [
]{
internal: Pointer[byte]#505.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#50(
) -> Pointer[str]#484 [
]{
internal: Pointer[str]#484.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#51(
) -> Pointer[UInt32]#483 [
]{
internal: Pointer[UInt32]#483.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__len__#52(
$self#388: Array[byte]#541; [];
) -> int#4 [
]{
internal: Array[byte]#541.__len__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$3#53(
$s#1262: str#0; [];
) -> float#3 [
$buf#1263: Array[byte]#541; [];
$n#1264: int#4; [];
$need_dyn_alloc#1265: bool#1; [];
$#1266: int#4; [];
$p#1267: Pointer[byte]#505; [];
$._if_res#1268: Pointer[byte]#505; [];
$#1269: bool#1; [];
$#1270: int#4; [];
$#1271: Pointer[byte]#505; [];
$#1272: Array[byte]#541; [];
$#1273: str#0; [];
$#1274: byte#8; [];
$end#1275: Pointer[byte]#505; [];
$result#1276: float#3; [];
$#1277: bool#1; [];
$#1278: Pointer[byte]#505; [];
$#1279: bool#1; [];
$#1280: bool#1; [];
$#1282: str#0; [];
]{
bb#52 {
$buf#1263 = new(Array[byte]#541, 32); [];
$n#1264 = f$len#166($s#1262); [];
$#1266 = f$len#167($buf#1263); [];
$need_dyn_alloc#1265 = f$__ge__#212($n#1264, $#1266); [];
$#1269 = f$__bool__#263($need_dyn_alloc#1265); [];
condjump ($#1269) bb#528 bb#529; [];
}; []
bb#528 {
$#1270 = f$__add__#251($n#1264, 1); [];
$#1271 = f$alloc_atomic#94($#1270); [];
$._if_res#1268 = $#1271; [];
jmp bb#530; [];
}; []
bb#529 {
$#1272 = $buf#1263.ptr; [];
$._if_res#1268 = $#1272; [];
jmp bb#530; [];
}; []
bb#530 {
$p#1267 = $._if_res#1268; [];
$#1273 = $s#1262.ptr; [];
f$memcpy#121($p#1267, $#1273, $n#1264); [];
$#1274 = f$2#247(0); [];
f$__setitem__#69($p#1267, $n#1264, $#1274); [];
$end#1275 = f$__new__#49(); [];
$result#1276 = f$strtod#97($p#1267, &$end#1275); [];
jmp bb#531; [];
}; []
bb#531 {
$#1277 = f$__bool__#263($need_dyn_alloc#1265); [];
condjump ($#1277) bb#534 bb#533; [];
}; []
bb#532 {
jmp bb#535; [];
}; []
bb#533 {
jmp bb#532; [];
}; []
bb#534 {
f$1#264($p#1267); [];
jmp bb#532; [];
}; []
bb#535 {
$#1278 = f$__add__#118($p#1267, $n#1264); [];
$#1279 = f$__ne__#46($end#1275, $#1278); [];
$#1280 = f$__bool__#263($#1279); [];
condjump ($#1280) bb#538 bb#537; [];
}; []
bb#536 {
return $result#1276; [];
}; []
bb#537 {
jmp bb#536; [];
}; []
bb#538 {
$._typ_697#1281 = f$__new__#45(); [];
$#1282 = f$__add__#133('could not convert string to float: ', $s#1262); [];
f$2#43($._typ_697#1281, $#1282); [];
throw ($._typ_697#1281); [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$2#54(
$self#730: .AttributeError#554; [];
$message#731: str#0; [];
) -> void#7 [
]{
bb#53 {
$self#730.self = f$__new__#261('AttributeError', $message#731, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__invert__#55(
$self#376: bool#1; [];
) -> bool#1 [
]{
internal: bool#1.__invert__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$_ensure_not_none#56(
$p#829: Pointer[byte]#505; [];
$memb#830: str#0; [];
) -> void#7 [
$#831: bool#1; [];
$#832: bool#1; [];
$#833: bool#1; [];
$#835: str#0; [];
$#836: str#0; [];
]{
bb#55 {
jmp bb#372; [];
}; []
bb#372 {
$#831 = f$__bool__#176($p#829); [];
$#832 = f$__invert__#55($#831); [];
$#833 = f$__bool__#263($#832); [];
condjump ($#833) bb#375 bb#374; [];
}; []
bb#373 {
return; [];
}; []
bb#374 {
jmp bb#373; [];
}; []
bb#375 {
$._typ_696#834 = f$__new__#246(); [];
$#835 = f$__add__#133(''NoneType' object has no attribute '', $memb#830); [];
$#836 = f$__add__#133($#835, '''); [];
f$2#54($._typ_696#834, $#836); [];
throw ($._typ_696#834); [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$strtoll#57(
$.a0#443: Pointer[byte]#505; [];
$.a1#444: Pointer[Pointer[byte]]#514; [];
$.a2#445: Int32#558; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$sin#58(
$.a0#480: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$acos#59(
$.a0#474: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_iseither#60(
$flag#883: Pointer[UInt32]#483; [];
$i#884: int#4; [];
) -> int#4 [
$#885: int#4; [];
$#886: UInt32#482; [];
$#887: int#4; [];
$#888: int#4; [];
$#889: UInt32#482; [];
$#890: UInt32#482; [];
$#891: int#4; [];
$#892: int#4; [];
]{
bb#59 {
$#885 = f$__rshift__#112($i#884, 4); [];
$#886 = f$__getitem__#270($flag#883, $#885); [];
$#887 = f$__and__#12($i#884, 15); [];
$#888 = f$__lshift__#125($#887, 1); [];
$#889 = f$2#202($#888); [];
$#890 = f$__rshift__#11($#886, $#889); [];
$#891 = f$8#44($#890); [];
$#892 = f$__and__#12($#891, 3); [];
return $#892; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$round#61(
$.a0#473: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$expm1#62(
$.a0#464: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$fopen#63(
$.a0#505: Pointer[byte]#505; [];
$.a1#506: Pointer[byte]#505; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$exp#64(
$.a0#463: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ferror#65(
$.a0#503: Pointer[byte]#505; [];
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__invert__#66(
$self#329: int#4; [];
) -> int#4 [
]{
internal: int#4.__invert__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$fmod#67(
$.a0#461: float#3; [];
$.a1#462: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#68(
$self#310: Pointer[str]#484; [];
$index#311: int#4; [];
$what#312: str#0; [];
) -> void#7 [
]{
internal: Pointer[str]#484.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#69(
$self#313: Pointer[byte]#505; [];
$index#314: int#4; [];
$what#315: byte#8; [];
) -> void#7 [
]{
internal: Pointer[byte]#505.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#70(
$self#316: Pointer[UInt32]#483; [];
$index#317: int#4; [];
$what#318: UInt32#482; [];
) -> void#7 [
]{
internal: Pointer[UInt32]#483.__setitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$pow#71(
$.a0#471: float#3; [];
$.a1#472: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_isdel#72(
$flag#873: Pointer[UInt32]#483; [];
$i#874: int#4; [];
) -> int#4 [
$#875: int#4; [];
$#876: UInt32#482; [];
$#877: int#4; [];
$#878: int#4; [];
$#879: UInt32#482; [];
$#880: UInt32#482; [];
$#881: int#4; [];
$#882: int#4; [];
]{
bb#71 {
$#875 = f$__rshift__#112($i#874, 4); [];
$#876 = f$__getitem__#270($flag#873, $#875); [];
$#877 = f$__and__#12($i#874, 15); [];
$#878 = f$__lshift__#125($#877, 1); [];
$#879 = f$2#202($#878); [];
$#880 = f$__rshift__#11($#876, $#879); [];
$#881 = f$8#44($#880); [];
$#882 = f$__and__#12($#881, 1); [];
return $#882; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$seq_pid#73(
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#74(
$a1#275: .dict#485; [];
) -> .Tuple.1#512 [
]{
internal: .Tuple.1#512.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$tanh#75(
$.a0#484: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#76(
$self#369: str#0; [];
) -> bool#1 [
$#370: str#0; [];
$#371: bool#1; [];
]{
bb#75 {
$#370 = $self#369.len; [];
$#371 = f$__ne__#159($#370, 0); [];
return $#371; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#77(
$self#383: Optional[int]#497; [];
) -> bool#1 [
]{
internal: Optional[int]#497.__bool__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$floor#78(
$.a0#459: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__neg__#79(
$self#328: int#4; [];
) -> int#4 [
]{
internal: int#4.__neg__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$istitle#80(
$.a0#457: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__elemsize__#81(
) -> int#4 [
]{
internal: Pointer[str]#484.__elemsize__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__elemsize__#82(
) -> int#4 [
]{
internal: Pointer[int]#527.__elemsize__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$log2#83(
$.a0#492: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$fabs#84(
$.a0#460: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$isalpha#85(
$.a0#456: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_dict_hash#86(
$key#930: str#0; [];
) -> int#4 [
$k#931: int#4; [];
$#932: int#4; [];
$#933: int#4; [];
$#934: int#4; [];
$#935: int#4; [];
]{
bb#85 {
$k#931 = f$hash#116($key#930); [];
$#932 = f$__rshift__#112($k#931, 33); [];
$#933 = f$__xor__#198($#932, $k#931); [];
$#934 = f$__lshift__#125($k#931, 11); [];
$#935 = f$__xor__#198($#933, $#934); [];
return $#935; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$sinh#87(
$.a0#483: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__eq__#88(
$self#1188: str#0; [];
$other#1189: str#0; [];
) -> bool#1 [
$#1190: int#4; [];
$#1191: int#4; [];
$#1192: bool#1; [];
$#1193: bool#1; [];
$i#1194: int#4; [];
$#1195: int#4; [];
$#1196: bool#1; [];
$#1197: bool#1; [];
$#1198: str#0; [];
$#1199: byte#8; [];
$#1200: str#0; [];
$#1201: byte#8; [];
$#1202: bool#1; [];
$#1203: bool#1; [];
]{
bb#87 {
jmp bb#505; [];
}; []
bb#505 {
$#1190 = f$len#166($self#1188); [];
$#1191 = f$len#166($other#1189); [];
$#1192 = f$__ne__#159($#1190, $#1191); [];
$#1193 = f$__bool__#263($#1192); [];
condjump ($#1193) bb#508 bb#507; [];
}; []
bb#506 {
$i#1194 = 0; [];
jmp bb#509; [];
}; []
bb#507 {
jmp bb#506; [];
}; []
bb#508 {
return false; [];
}; []
bb#509 {
$#1195 = f$len#166($self#1188); [];
$#1196 = f$__lt__#274($i#1194, $#1195); [];
$#1197 = f$__bool__#263($#1196); [];
condjump ($#1197) bb#510 bb#511; [];
}; []
bb#510 {
jmp bb#512; [];
}; [loopAttribute: loop(none, bb#509, bb#510, none, bb#511), ]
bb#511 {
return true; [];
}; []
bb#512 {
$#1198 = $self#1188.ptr; [];
$#1199 = f$__getitem__#272($#1198, $i#1194); [];
$#1200 = $other#1189.ptr; [];
$#1201 = f$__getitem__#272($#1200, $i#1194); [];
$#1202 = f$__ne__#243($#1199, $#1201); [];
$#1203 = f$__bool__#263($#1202); [];
condjump ($#1203) bb#515 bb#514; [];
}; [loopAttribute: loop(none, bb#509, bb#510, none, bb#511), ]
bb#513 {
$i#1194 = f$__add__#251($i#1194, 1); [];
jmp bb#509; [];
}; [loopAttribute: loop(none, bb#509, bb#510, none, bb#511), ]
bb#514 {
jmp bb#513; [];
}; [loopAttribute: loop(none, bb#509, bb#510, none, bb#511), ]
bb#515 {
return false; [];
}; [loopAttribute: loop(none, bb#509, bb#510, none, bb#511), ]
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$tolower#89(
$.a0#454: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$islower#90(
$.a0#452: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$isspace#91(
$.a0#450: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$tan#92(
$.a0#481: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_realloc#93(
$.a0#423: Pointer[byte]#505; [];
$.a1#424: int#4; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$alloc_atomic#94(
$sz#633: int#4; [];
) -> Pointer[byte]#505 [
$#634: Pointer[byte]#505; [];
]{
bb#93 {
$#634 = f$seq_alloc_atomic#163($sz#633); [];
return $#634; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$isdigit#95(
$.a0#449: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__and__#96(
$self#395: UInt32#482; [];
$other#396: UInt32#482; [];
) -> UInt32#482 [
]{
internal: UInt32#482.__and__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$strtod#97(
$.a0#446: Pointer[byte]#505; [];
$.a1#447: Pointer[Pointer[byte]]#514; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__le__#98(
$self#350: int#4; [];
$other#351: int#4; [];
) -> bool#1 [
]{
internal: int#4.__le__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_is_macos#99(
) -> bool#1 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$status#100(
$self#734: .SystemExit#585; [];
) -> int#4 [
$#735: .SystemExit#585; [];
]{
bb#99 {
$#735 = $self#734._status; [];
return $#735; [];
}; []
}; [funcAttributes: property,.class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_rlock_acquire#101(
$.a0#438: Pointer[byte]#505; [];
$.a1#439: bool#1; [];
$.a2#440: float#3; [];
) -> bool#1 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_rlock_new#102(
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzopen#103(
$.a0#537: Pointer[byte]#505; [];
$.a1#538: Pointer[byte]#505; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__invert__#104(
$self#384: Optional[int]#497; [];
) -> int#4 [
]{
internal: Optional[int]#497.__invert__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_i32_to_float#105(
$.a0#442: Int32#558; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_lock_release#106(
$.a0#437: Pointer[byte]#505; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$realloc#107(
$p#635: Pointer[byte]#505; [];
$sz#636: int#4; [];
) -> Pointer[byte]#505 [
$#637: Pointer[byte]#505; [];
]{
bb#106 {
$#637 = f$seq_realloc#93($p#635, $sz#636); [];
return $#637; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$_test_failed#108(
$file#409: str#0; [];
$line#410: int#4; [];
$msg#411: str#0; [];
) -> void#7 [
$s#412: str#0; [];
$#413: str#0; [];
$#414: str#0; [];
$#415: str#0; [];
$#416: str#0; [];
$#417: bool#1; [];
$#418: str#0; [];
$#419: str#0; [];
$#420: str#0; [];
]{
bb#107 {
$#413 = f$__add__#133('[1;31mTEST FAILED:[0m ', $file#409); [];
$#414 = f$__add__#133($#413, ' (line '); [];
$#415 = f$2#149($line#410); [];
$#416 = f$__add__#133($#414, $#415); [];
$s#412 = f$__add__#133($#416, ')'); [];
jmp bb#274; [];
}; []
bb#274 {
$#417 = f$__bool__#76($msg#411); [];
condjump ($#417) bb#277 bb#276; [];
}; []
bb#275 {
$#419 = f$__str__#161($s#412); [];
f$seq_print#238($#419); [];
$#420 = f$__str__#161('
'); [];
f$seq_print#238($#420); [];
return; [];
}; []
bb#276 {
jmp bb#275; [];
}; []
bb#277 {
$#418 = f$__add__#133(': ', $msg#411); [];
$s#412 = f$__add__#133($s#412, $#418); [];
jmp bb#275; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$atoi#109(
$.a0#529: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$strlen#110(
$.a0#448: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_strdup#111(
$.a0#432: Pointer[byte]#505; [];
) -> str#0 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__rshift__#112(
$self#340: int#4; [];
$other#341: int#4; [];
) -> int#4 [
]{
internal: int#4.__rshift__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align_default#113(
$.a0#596: .seq#621; [];
$.a1#597: .seq#621; [];
$.a2#598: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__setitem__#114(
$self#952: .dict#485; [];
$key#953: str#0; [];
$val#954: str#0; [];
) -> void#7 [
$ret#956: int#4; [];
$x#957: int#4; [];
$#958: .dict#485; [];
]{
bb#113 {
$._assign_547#955 = f$_kh_put#230($self#952, $key#953); [];
$ret#956 = $._assign_547#955.a1; [];
$x#957 = $._assign_547#955.a2; [];
$#958 = $self#952._vals; [];
f$__setitem__#68($#958, $x#957, $val#954); [];
return; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$_handle_exit#115(
$e#738: .SystemExit#585; [];
) -> void#7 [
$#739: int#4; [];
]{
bb#114 {
$#739 = f$status#100($e#738); [];
f$exit#141($#739); [];
return; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$hash#116(
$x#746: str#0; [];
) -> int#4 [
$#747: int#4; [];
]{
bb#115 {
'
    hash(x)

    Returns hashed value only for immutable objects
    '; [];
$#747 = f$__hash__#222($x#746); [];
return $#747; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$isalnum#117(
$.a0#455: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__add__#118(
$self#319: Pointer[byte]#505; [];
$other#320: int#4; [];
) -> Pointer[byte]#505 [
]{
internal: Pointer[byte]#505.__add__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_gc_add_roots#119(
$.a0#426: Pointer[byte]#505; [];
$.a1#427: Pointer[byte]#505; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$fseek#120(
$.a0#517: Pointer[byte]#505; [];
$.a1#518: int#4; [];
$.a2#519: Int32#558; [];
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$memcpy#121(
$dest#372: Pointer[byte]#505; [];
$src#373: Pointer[byte]#505; [];
$len#374: int#4; [];
) -> void#7 [
]{
internal: str#0.memcpy
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_gc_remove_roots#122(
$.a0#428: Pointer[byte]#505; [];
$.a1#429: Pointer[byte]#505; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$adjust_indices#123(
$length#642: int#4; [];
$start#643: Optional[int]#497; [];
$stop#644: Optional[int]#497; [];
$step#645: Optional[int]#497; [];
) -> .Tuple.4#499 [
$stepx#694: int#4; [];
$._if_res#695: int#4; [];
$#696: bool#1; [];
$#697: int#4; [];
$startx#698: int#4; [];
$stopx#699: int#4; [];
$#700: bool#1; [];
$#701: bool#1; [];
$#702: bool#1; [];
$._if_res#703: int#4; [];
$#704: bool#1; [];
$#705: int#4; [];
$._if_res#706: int#4; [];
$#707: bool#1; [];
$#708: int#4; [];
$._if_res#709: int#4; [];
$#710: bool#1; [];
$#711: int#4; [];
$#712: int#4; [];
$._if_res#713: int#4; [];
$#714: bool#1; [];
$#715: int#4; [];
$#716: int#4; [];
$#717: int#4; [];
$#718: .Tuple.4#499; [];
]{
bb#122 {
$#696 = f$__bool__#77($step#645); [];
condjump ($#696) bb#322 bb#323; [];
}; []
bb#322 {
$#697 = f$__invert__#104($step#645); [];
$._if_res#695 = $#697; [];
jmp bb#324; [];
}; []
bb#323 {
$._if_res#695 = 1; [];
jmp bb#324; [];
}; []
bb#324 {
$stepx#694 = $._if_res#695; [];
$startx#698 = 0; [];
$stopx#699 = 0; [];
$#700 = f$__ne__#159($stepx#694, 0); [];
assert ($#700) bb#325; [];
}; []
bb#325 {
jmp bb#326; [];
}; []
bb#326 {
$#701 = f$__gt__#181($stepx#694, 0); [];
$#702 = f$__bool__#263($#701); [];
condjump ($#702) bb#329 bb#328; [];
}; []
bb#327 {
$#718 = f$adjust_indices_helper#42($length#642, $startx#698, $stopx#699, $stepx#694); [];
return $#718; [];
}; []
bb#328 {
$#710 = f$__bool__#77($start#643); [];
condjump ($#710) bb#336 bb#337; [];
}; []
bb#329 {
$#704 = f$__bool__#77($start#643); [];
condjump ($#704) bb#330 bb#331; [];
}; []
bb#330 {
$#705 = f$__invert__#104($start#643); [];
$._if_res#703 = $#705; [];
jmp bb#332; [];
}; []
bb#331 {
$._if_res#703 = 0; [];
jmp bb#332; [];
}; []
bb#332 {
$startx#698 = $._if_res#703; [];
$#707 = f$__bool__#77($stop#644); [];
condjump ($#707) bb#333 bb#334; [];
}; []
bb#333 {
$#708 = f$__invert__#104($stop#644); [];
$._if_res#706 = $#708; [];
jmp bb#335; [];
}; []
bb#334 {
$._if_res#706 = $length#642; [];
jmp bb#335; [];
}; []
bb#335 {
$stopx#699 = $._if_res#706; [];
jmp bb#327; [];
}; []
bb#336 {
$#711 = f$__invert__#104($start#643); [];
$._if_res#709 = $#711; [];
jmp bb#338; [];
}; []
bb#337 {
$#712 = f$__sub__#132($length#642, 1); [];
$._if_res#709 = $#712; [];
jmp bb#338; [];
}; []
bb#338 {
$startx#698 = $._if_res#709; [];
$#714 = f$__bool__#77($stop#644); [];
condjump ($#714) bb#339 bb#340; [];
}; []
bb#339 {
$#715 = f$__invert__#104($stop#644); [];
$._if_res#713 = $#715; [];
jmp bb#341; [];
}; []
bb#340 {
$#716 = f$__add__#251($length#642, 1); [];
$#717 = f$__neg__#79($#716); [];
$._if_res#713 = $#717; [];
jmp bb#341; [];
}; []
bb#341 {
$stopx#699 = $._if_res#713; [];
jmp bb#327; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__len__#124(
$self#367: str#0; [];
) -> int#4 [
$#368: str#0; [];
]{
bb#123 {
$#368 = $self#367.len; [];
return $#368; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__lshift__#125(
$self#338: int#4; [];
$other#339: int#4; [];
) -> int#4 [
]{
internal: int#4.__lshift__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$as_byte#126(
$self#295: Pointer[str]#484; [];
) -> Pointer[byte]#505 [
]{
internal: Pointer[str]#484.as_byte
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$as_byte#127(
$self#296: Pointer[int]#527; [];
) -> Pointer[byte]#505 [
]{
internal: Pointer[int]#527.as_byte
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$cosh#128(
$.a0#482: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$message#129(
$self#721: .ValueError#531; [];
) -> str#0 [
$#722: .ValueError#531; [];
$#723: .ValueError#531; [];
]{
bb#128 {
$#722 = $self#721._hdr; [];
$#723 = $#722.msg; [];
return $#723; [];
}; []
}; [funcAttributes: property,.class, srcInfoAttribute: <internal>:0:0, ]
def f$6#130(
$b#324: byte#8; [];
) -> int#4 [
]{
internal: int#4.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$isupper#131(
$.a0#451: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__sub__#132(
$self#332: int#4; [];
$other#333: int#4; [];
) -> int#4 [
]{
internal: int#4.__sub__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__add__#133(
$self#399: str#0; [];
$other#400: str#0; [];
) -> str#0 [
$len1#401: int#4; [];
$len2#402: int#4; [];
$len3#403: int#4; [];
$p#404: Pointer[byte]#505; [];
$#405: str#0; [];
$#406: Pointer[byte]#505; [];
$#407: str#0; [];
$#408: str#0; [];
]{
bb#132 {
$len1#401 = $self#399.len; [];
$len2#402 = $other#400.len; [];
$len3#403 = f$__add__#251($len1#401, $len2#402); [];
$p#404 = f$2#200($len3#403); [];
$#405 = $self#399.ptr; [];
f$memcpy#121($p#404, $#405, $len1#401); [];
$#406 = f$__add__#118($p#404, $len1#401); [];
$#407 = $other#400.ptr; [];
f$memcpy#121($#406, $#407, $len2#402); [];
$#408 = f$__new__#151($p#404, $len3#403); [];
return $#408; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$atanh#134(
$.a0#487: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_isempty#135(
$flag#863: Pointer[UInt32]#483; [];
$i#864: int#4; [];
) -> int#4 [
$#865: int#4; [];
$#866: UInt32#482; [];
$#867: int#4; [];
$#868: int#4; [];
$#869: UInt32#482; [];
$#870: UInt32#482; [];
$#871: int#4; [];
$#872: int#4; [];
]{
bb#134 {
$#865 = f$__rshift__#112($i#864, 4); [];
$#866 = f$__getitem__#270($flag#863, $#865); [];
$#867 = f$__and__#12($i#864, 15); [];
$#868 = f$__lshift__#125($#867, 1); [];
$#869 = f$2#202($#868); [];
$#870 = f$__rshift__#11($#866, $#869); [];
$#871 = f$8#44($#870); [];
$#872 = f$__and__#12($#871, 2); [];
return $#872; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__new__#136(
) -> .dict#519 [
]{
internal: .dict#519.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#137(
) -> .dict#515 [
]{
internal: .dict#515.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#138(
) -> .dict#485 [
]{
internal: .dict#485.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_env#139(
) -> Pointer[Pointer[byte]]#514 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ldexp#140(
$.a0#465: float#3; [];
$.a1#466: int#4; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$exit#141(
$.a0#526: int#4; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$log2#142(
$.a0#468: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$1#143(
$what#382: int#4; [];
) -> Optional[int]#497 [
]{
internal: Optional[int]#497.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_stdout#144(
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__or__#145(
$self#397: UInt32#482; [];
$other#398: UInt32#482; [];
) -> UInt32#482 [
]{
internal: UInt32#482.__or__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_stderr#146(
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$4#147(
$self#1243: str#0; [];
$s#1244: .rslice#525; [];
) -> str#0 [
$#1246: int#4; [];
$#1247: .rslice#525; [];
$#1248: Optional[int]#497; [];
$#1249: Optional[int]#497; [];
$#1250: Optional[int]#497; [];
$start#1251: int#4; [];
$stop#1252: int#4; [];
$step#1253: int#4; [];
$length#1254: int#4; [];
$#1255: str#0; [];
$#1256: Pointer[byte]#505; [];
$#1257: str#0; [];
]{
bb#146 {
$#1246 = f$len#166($self#1243); [];
$#1247 = $s#1244.start; [];
$#1248 = f$1#143($#1247); [];
$#1249 = f$__new__#14(); [];
$#1250 = f$__new__#14(); [];
$._assign_568#1245 = f$adjust_indices#123($#1246, $#1248, $#1249, $#1250); [];
$start#1251 = $._assign_568#1245.a1; [];
$stop#1252 = $._assign_568#1245.a2; [];
$step#1253 = $._assign_568#1245.a3; [];
$length#1254 = $._assign_568#1245.a4; [];
$#1255 = $self#1243.ptr; [];
$#1256 = f$__add__#118($#1255, $start#1251); [];
$#1257 = f$__new__#151($#1256, $length#1254); [];
return $#1257; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$2#148(
$what#362: str#0; [];
) -> str#0 [
$#363: str#0; [];
]{
bb#147 {
$#363 = f$__str__#161($what#362); [];
return $#363; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$2#149(
$what#364: int#4; [];
) -> str#0 [
$#365: str#0; [];
]{
bb#148 {
$#365 = f$__str__#267($what#364); [];
return $#365; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_time#150(
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#151(
$p#292: Pointer[byte]#505; [];
$l#293: int#4; [];
) -> str#0 [
]{
internal: str#0.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$1#152(
$self#360: int#4; [];
$other#361: float#3; [];
) -> float#3 [
]{
internal: int#4.__mul__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$atan#153(
$.a0#476: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$toupper#154(
$.a0#453: int#4; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$acosh#155(
$.a0#485: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_free#156(
$.a0#425: Pointer[byte]#505; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$asinh#157(
$.a0#486: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_gc_exclude_static_roots#158(
$.a0#430: Pointer[byte]#505; [];
$.a1#431: Pointer[byte]#505; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__ne__#159(
$self#344: int#4; [];
$other#345: int#4; [];
) -> bool#1 [
]{
internal: int#4.__ne__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$dlsym#160(
$.a0#532: Pointer[byte]#505; [];
$.a1#533: Pointer[byte]#505; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__str__#161(
$what#366: str#0; [];
) -> str#0 [
]{
bb#160 {
return $what#366; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$omp_get_thread_num#162(
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_alloc_atomic#163(
$.a0#422: int#4; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$log#164(
$.a0#467: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$len#165(
$x#740: .dict#485; [];
) -> int#4 [
$#741: int#4; [];
]{
bb#164 {
'
    len(x)

    Return the length of x
    '; [];
$#741 = f$__len__#20($x#740); [];
return $#741; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$len#166(
$x#742: str#0; [];
) -> int#4 [
$#743: int#4; [];
]{
bb#165 {
'
    len(x)

    Return the length of x
    '; [];
$#743 = f$__len__#124($x#742); [];
return $#743; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$len#167(
$x#744: Array[byte]#541; [];
) -> int#4 [
$#745: int#4; [];
]{
bb#166 {
'
    len(x)

    Return the length of x
    '; [];
$#745 = f$__len__#52($x#744); [];
return $#745; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$sqrt#168(
$.a0#470: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align_splice#169(
$.a0#578: .seq#621; [];
$.a1#579: .seq#621; [];
$.a2#580: Pointer[Int8]#643; [];
$.a3#581: Int8#642; [];
$.a4#582: Int8#642; [];
$.a5#583: Int8#642; [];
$.a6#584: Int8#642; [];
$.a7#585: int#4; [];
$.a8#586: int#4; [];
$.a9#587: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$asin#170(
$.a0#475: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_lock_acquire#171(
$.a0#434: Pointer[byte]#505; [];
$.a1#435: bool#1; [];
$.a2#436: float#3; [];
) -> bool#1 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$1#172(
) -> .EnvMap#486 [
$#1307: .Tuple.1#512; [];
]{
bb#171 {
$._typ_701#1306 = f$__new__#138(); [];
f$1#32($._typ_701#1306); [];
$#1307 = f$__new__#74($._typ_701#1306); [];
return $#1307; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$seq_gc_clear_roots#173(
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_str_ptr#174(
$.a0#433: Pointer[byte]#505; [];
) -> str#0 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_lock_new#175(
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#176(
$self#301: Pointer[byte]#505; [];
) -> bool#1 [
]{
internal: Pointer[byte]#505.__bool__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_stdin#177(
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_make_assert_error#178(
$msg#736: str#0; [];
) -> .AssertionError#607 [
]{
bb#177 {
$._typ_693#737 = f$__new__#192(); [];
f$2#260($._typ_693#737, $msg#736); [];
return $._typ_693#737; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$seq_check_errno#179(
) -> str#0 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_time_monotonic#180(
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__gt__#181(
$self#348: int#4; [];
$other#349: int#4; [];
) -> bool#1 [
]{
internal: int#4.__gt__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$erf#182(
$.a0#493: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$erfc#183(
$.a0#494: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$modf#184(
$.a0#501: float#3; [];
$.a1#502: Pointer[float]#645; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_raw_type_str#185(
$p#802: Pointer[byte]#505; [];
$name#803: str#0; [];
) -> str#0 [
$pstr#804: str#0; [];
$total#805: int#4; [];
$#806: str#0; [];
$#807: int#4; [];
$#808: int#4; [];
$#809: str#0; [];
$#810: int#4; [];
$buf#811: Pointer[byte]#505; [];
$where#812: int#4; [];
$#813: byte#8; [];
$#814: Pointer[byte]#505; [];
$#815: str#0; [];
$#816: str#0; [];
$#817: str#0; [];
$#818: byte#8; [];
$#819: byte#8; [];
$#820: byte#8; [];
$#821: byte#8; [];
$#822: Pointer[byte]#505; [];
$#823: str#0; [];
$#824: str#0; [];
$#825: str#0; [];
$#826: byte#8; [];
$#827: str#0; [];
$#828: str#0; [];
]{
bb#184 {
$pstr#804 = f$seq_str_ptr#174($p#802); [];
$#806 = $name#803.len; [];
$#807 = f$__add__#251(1, $#806); [];
$#808 = f$__add__#251($#807, 4); [];
$#809 = $pstr#804.len; [];
$#810 = f$__add__#251($#808, $#809); [];
$total#805 = f$__add__#251($#810, 1); [];
$buf#811 = f$2#200($total#805); [];
$where#812 = 0; [];
$#813 = f$2#247(60); [];
f$__setitem__#69($buf#811, $where#812, $#813); [];
$where#812 = f$__add__#251($where#812, 1); [];
$#814 = f$__add__#118($buf#811, $where#812); [];
$#815 = $name#803.ptr; [];
$#816 = $name#803.len; [];
f$memcpy#121($#814, $#815, $#816); [];
$#817 = $name#803.len; [];
$where#812 = f$__add__#251($where#812, $#817); [];
$#818 = f$2#247(32); [];
f$__setitem__#69($buf#811, $where#812, $#818); [];
$where#812 = f$__add__#251($where#812, 1); [];
$#819 = f$2#247(97); [];
f$__setitem__#69($buf#811, $where#812, $#819); [];
$where#812 = f$__add__#251($where#812, 1); [];
$#820 = f$2#247(116); [];
f$__setitem__#69($buf#811, $where#812, $#820); [];
$where#812 = f$__add__#251($where#812, 1); [];
$#821 = f$2#247(32); [];
f$__setitem__#69($buf#811, $where#812, $#821); [];
$where#812 = f$__add__#251($where#812, 1); [];
$#822 = f$__add__#118($buf#811, $where#812); [];
$#823 = $pstr#804.ptr; [];
$#824 = $pstr#804.len; [];
f$memcpy#121($#822, $#823, $#824); [];
$#825 = $pstr#804.len; [];
$where#812 = f$__add__#251($where#812, $#825); [];
$#826 = f$2#247(62); [];
f$__setitem__#69($buf#811, $where#812, $#826); [];
$#827 = $pstr#804.ptr; [];
f$1#264($#827); [];
$#828 = f$__new__#151($buf#811, $total#805); [];
return $#828; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$tgamma#186(
$.a0#495: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$remainder#187(
$.a0#497: float#3; [];
$.a1#498: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$frexp#188(
$.a0#499: float#3; [];
$.a1#500: Pointer[Int32]#644; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_resize_if_full#189(
$self#853: .list#479; [];
) -> void#7 [
$#854: .list#479; [];
$#855: .list#479; [];
$#856: .list#479; [];
$#857: bool#1; [];
$#858: bool#1; [];
$new_cap#859: int#4; [];
$#860: .list#479; [];
$#861: int#4; [];
$#862: int#4; [];
]{
bb#188 {
jmp bb#376; [];
}; []
bb#376 {
$#854 = $self#853.len; [];
$#855 = $self#853.arr; [];
$#856 = $#855.len; [];
$#857 = f$__eq__#38($#854, $#856); [];
$#858 = f$__bool__#263($#857); [];
condjump ($#858) bb#379 bb#378; [];
}; []
bb#377 {
return; [];
}; []
bb#378 {
jmp bb#377; [];
}; []
bb#379 {
$#860 = $self#853.len; [];
$#861 = f$__mul__#223(3, $#860); [];
$#862 = f$__add__#251(1, $#861); [];
$new_cap#859 = f$__div__#37($#862, 2); [];
f$_resize#36($self#853, $new_cap#859); [];
jmp bb#377; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$fclose#190(
$.a0#507: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$fgetc#191(
$.a0#504: Pointer[byte]#505; [];
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#192(
) -> .AssertionError#607 [
]{
internal: .AssertionError#607.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__contains__#193(
$self#959: .dict#485; [];
$key#960: str#0; [];
) -> bool#1 [
$#961: int#4; [];
$#962: int#4; [];
$#963: bool#1; [];
]{
bb#192 {
$#961 = f$_kh_get#8($self#959, $key#960); [];
$#962 = f$_kh_end#39($self#959); [];
$#963 = f$__ne__#159($#961, $#962); [];
return $#963; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$fwrite#194(
$.a0#512: Pointer[byte]#505; [];
$.a1#513: int#4; [];
$.a2#514: int#4; [];
$.a3#515: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_palign_dual#195(
$.a0#609: .pseq#673; [];
$.a1#610: .pseq#673; [];
$.a2#611: Pointer[Int8]#643; [];
$.a3#612: Int8#642; [];
$.a4#613: Int8#642; [];
$.a5#614: Int8#642; [];
$.a6#615: Int8#642; [];
$.a7#616: int#4; [];
$.a8#617: int#4; [];
$.a9#618: int#4; [];
$.a10#619: int#4; [];
$.a11#620: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_rlock_release#196(
$.a0#441: Pointer[byte]#505; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ftell#197(
$.a0#516: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__xor__#198(
$self#358: int#4; [];
$other#359: int#4; [];
) -> int#4 [
]{
internal: int#4.__xor__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$2#199(
$sz#299: int#4; [];
) -> Pointer[UInt32]#483 [
]{
internal: Pointer[UInt32]#483.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$2#200(
$sz#300: int#4; [];
) -> Pointer[byte]#505 [
]{
internal: Pointer[byte]#505.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$fgets#201(
$.a0#520: Pointer[byte]#505; [];
$.a1#521: int#4; [];
$.a2#522: Pointer[byte]#505; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$2#202(
$what#392: int#4; [];
) -> UInt32#482 [
]{
internal: UInt32#482.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$getline#203(
$.a0#523: Pointer[Pointer[byte]]#514; [];
$n#524: Pointer[int]#527; [];
$file#525: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$system#204(
$cmd#527: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$2#205(
$self#726: .KeyError#489; [];
$message#727: str#0; [];
) -> void#7 [
]{
bb#204 {
$self#726.self = f$__new__#261('KeyError', $message#727, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$free#206(
$.a0#528: Pointer[byte]#505; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$dlerror#207(
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ceil#208(
$.a0#458: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$omp_get_max_threads#209(
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$1#210(
$other#297: Pointer[byte]#505; [];
) -> Pointer[str]#484 [
]{
internal: Pointer[str]#484.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$1#211(
$other#298: Pointer[byte]#505; [];
) -> Pointer[int]#527 [
]{
internal: Pointer[int]#527.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ge__#212(
$self#352: int#4; [];
$other#353: int#4; [];
) -> bool#1 [
]{
internal: int#4.__ge__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$dlclose#213(
$.a0#534: Pointer[byte]#505; [];
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$atan2#214(
$.a0#477: float#3; [];
$.a1#478: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$lgamma#215(
$.a0#496: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzerror#216(
$.a0#539: Pointer[byte]#505; [];
$.a1#540: Pointer[Int32]#644; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$sizeof#217(
) -> int#4 [
$#631: int#4; [];
]{
bb#216 {
$#631 = f$__elemsize__#81(); [];
return $#631; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$sizeof#218(
) -> int#4 [
$#632: int#4; [];
]{
bb#217 {
$#632 = f$__elemsize__#82(); [];
return $#632; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$log1p#219(
$.a0#490: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzgets#220(
$.a0#542: Pointer[byte]#505; [];
$.a1#543: Pointer[byte]#505; [];
$.a2#544: Int32#558; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzclose#221(
$.a0#545: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__hash__#222(
$self#1175: str#0; [];
) -> int#4 [
$h#1176: int#4; [];
$#1178: str#0; [];
$#1179: str#0; [];
$p#1180: Pointer[byte]#505; [];
$n#1181: int#4; [];
$i#1182: int#4; [];
$#1183: bool#1; [];
$#1184: bool#1; [];
$#1185: int#4; [];
$#1186: byte#8; [];
$#1187: int#4; [];
]{
bb#221 {
$h#1176 = 0; [];
$#1178 = $self#1175.ptr; [];
$#1179 = $self#1175.len; [];
$._assign_564#1177 = f$__new__#241($#1178, $#1179); [];
$p#1180 = $._assign_564#1177.a1; [];
$n#1181 = $._assign_564#1177.a2; [];
$i#1182 = 0; [];
jmp bb#502; [];
}; []
bb#502 {
$#1183 = f$__lt__#274($i#1182, $n#1181); [];
$#1184 = f$__bool__#263($#1183); [];
condjump ($#1184) bb#503 bb#504; [];
}; []
bb#503 {
$#1185 = f$__mul__#223(31, $h#1176); [];
$#1186 = f$__getitem__#272($p#1180, $i#1182); [];
$#1187 = f$6#130($#1186); [];
$h#1176 = f$__add__#251($#1185, $#1187); [];
$i#1182 = f$__add__#251($i#1182, 1); [];
jmp bb#502; [];
}; [loopAttribute: loop(none, bb#502, bb#503, none, bb#504), ]
bb#504 {
return $h#1176; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__mul__#223(
$self#334: int#4; [];
$other#335: int#4; [];
) -> int#4 [
]{
internal: int#4.__mul__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$copysign#224(
$.a0#488: float#3; [];
$.a1#489: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_tuple_fix_index#225(
$idx#764: int#4; [];
$len#765: int#4; [];
) -> int#4 [
$#766: bool#1; [];
$#767: bool#1; [];
$._bin_res#768: bool#1; [];
$#769: bool#1; [];
$#770: bool#1; [];
$#771: bool#1; [];
$#772: bool#1; [];
$#773: bool#1; [];
]{
bb#224 {
jmp bb#346; [];
}; []
bb#346 {
$#766 = f$__lt__#274($idx#764, 0); [];
$#767 = f$__bool__#263($#766); [];
condjump ($#767) bb#349 bb#348; [];
}; []
bb#347 {
jmp bb#350; [];
}; []
bb#348 {
jmp bb#347; [];
}; []
bb#349 {
$idx#764 = f$__add__#251($idx#764, $len#765); [];
jmp bb#347; [];
}; []
bb#350 {
$#769 = f$__lt__#274($idx#764, 0); [];
$#770 = f$__bool__#263($#769); [];
condjump ($#770) bb#354 bb#357; [];
}; []
bb#351 {
return $idx#764; [];
}; []
bb#352 {
jmp bb#351; [];
}; []
bb#353 {
$._typ_695#774 = f$__new__#258(); [];
f$2#252($._typ_695#774, 'tuple index out of range'); [];
throw ($._typ_695#774); [];
}; []
bb#354 {
$._bin_res#768 = true; [];
jmp bb#356; [];
}; []
bb#355 {
$._bin_res#768 = false; [];
jmp bb#356; [];
}; []
bb#356 {
$#773 = f$__bool__#263($._bin_res#768); [];
condjump ($#773) bb#353 bb#352; [];
}; []
bb#357 {
$#771 = f$__ge__#212($idx#764, $len#765); [];
$#772 = f$__bool__#263($#771); [];
condjump ($#772) bb#354 bb#355; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$gzwrite#226(
$.a0#549: Pointer[byte]#505; [];
$.a1#550: Pointer[byte]#505; [];
$.a2#551: UInt32#482; [];
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gztell#227(
$.a0#552: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align#228(
$.a0#556: .seq#621; [];
$.a1#557: .seq#621; [];
$.a2#558: Pointer[Int8]#643; [];
$.a3#559: Int8#642; [];
$.a4#560: Int8#642; [];
$.a5#561: int#4; [];
$.a6#562: int#4; [];
$.a7#563: int#4; [];
$.a8#564: int#4; [];
$.a9#565: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_palign_global#229(
$.a0#621: .pseq#673; [];
$.a1#622: .pseq#673; [];
$.a2#623: Pointer[Int8]#643; [];
$.a3#624: Int8#642; [];
$.a4#625: Int8#642; [];
$.a5#626: int#4; [];
$.a6#627: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_kh_put#230(
$self#1099: .dict#485; [];
$key#1100: str#0; [];
) -> .Tuple.2#547 [
$#1101: .dict#485; [];
$#1102: .dict#485; [];
$#1103: bool#1; [];
$#1104: bool#1; [];
$#1105: .dict#485; [];
$#1106: .dict#485; [];
$#1107: int#4; [];
$#1108: bool#1; [];
$#1109: bool#1; [];
$#1110: .dict#485; [];
$#1111: int#4; [];
$#1112: .dict#485; [];
$#1113: int#4; [];
$mask#1114: int#4; [];
$#1115: .dict#485; [];
$step#1116: int#4; [];
$site#1117: int#4; [];
$x#1118: int#4; [];
$k#1119: int#4; [];
$i#1120: int#4; [];
$#1121: .dict#485; [];
$#1122: int#4; [];
$#1123: bool#1; [];
$last#1124: int#4; [];
$._bin_res#1125: bool#1; [];
$#1126: .dict#485; [];
$#1127: int#4; [];
$#1128: bool#1; [];
$#1129: bool#1; [];
$#1130: bool#1; [];
$._bin_res#1131: bool#1; [];
$#1132: .dict#485; [];
$#1133: int#4; [];
$#1134: bool#1; [];
$#1135: .dict#485; [];
$#1136: str#0; [];
$#1137: bool#1; [];
$#1138: bool#1; [];
$#1139: bool#1; [];
$#1140: bool#1; [];
$#1141: .dict#485; [];
$#1142: int#4; [];
$#1143: bool#1; [];
$#1144: int#4; [];
$#1145: bool#1; [];
$#1146: bool#1; [];
$#1147: .dict#485; [];
$#1148: bool#1; [];
$#1149: bool#1; [];
$._bin_res#1150: bool#1; [];
$#1151: .dict#485; [];
$#1152: int#4; [];
$#1153: bool#1; [];
$#1154: .dict#485; [];
$#1155: bool#1; [];
$#1156: bool#1; [];
$#1157: bool#1; [];
$ret#1158: int#4; [];
$#1159: .dict#485; [];
$#1160: int#4; [];
$#1161: bool#1; [];
$#1162: .dict#485; [];
$#1163: .dict#485; [];
$#1164: .dict#485; [];
$#1165: .dict#485; [];
$#1166: .dict#485; [];
$#1167: int#4; [];
$#1168: bool#1; [];
$#1169: .dict#485; [];
$#1170: .dict#485; [];
$#1171: .dict#485; [];
$#1172: .Tuple.2#547; [];
]{
bb#229 {
jmp bb#453; [];
}; []
bb#453 {
$#1101 = $self#1099._n_occupied; [];
$#1102 = $self#1099._upper_bound; [];
$#1103 = f$__ge__#212($#1101, $#1102); [];
$#1104 = f$__bool__#263($#1103); [];
condjump ($#1104) bb#456 bb#455; [];
}; []
bb#454 {
$#1115 = $self#1099._n_buckets; [];
$mask#1114 = f$__sub__#132($#1115, 1); [];
$step#1116 = 0; [];
$site#1117 = $self#1099._n_buckets; [];
$x#1118 = $site#1117; [];
$k#1119 = f$_dict_hash#86($key#1100); [];
$i#1120 = f$__and__#12($k#1119, $mask#1114); [];
jmp bb#461; [];
}; []
bb#455 {
jmp bb#454; [];
}; []
bb#456 {
jmp bb#457; [];
}; []
bb#457 {
$#1105 = $self#1099._n_buckets; [];
$#1106 = $self#1099._size; [];
$#1107 = f$__lshift__#125($#1106, 1); [];
$#1108 = f$__gt__#181($#1105, $#1107); [];
$#1109 = f$__bool__#263($#1108); [];
condjump ($#1109) bb#460 bb#459; [];
}; []
bb#458 {
jmp bb#454; [];
}; []
bb#459 {
$#1112 = $self#1099._n_buckets; [];
$#1113 = f$__add__#251($#1112, 1); [];
f$_kh_resize#256($self#1099, $#1113); [];
jmp bb#458; [];
}; []
bb#460 {
$#1110 = $self#1099._n_buckets; [];
$#1111 = f$__sub__#132($#1110, 1); [];
f$_kh_resize#256($self#1099, $#1111); [];
jmp bb#458; [];
}; []
bb#461 {
$#1121 = $self#1099._flags; [];
$#1122 = f$__ac_isempty#135($#1121, $i#1120); [];
$#1123 = f$__bool__#13($#1122); [];
condjump ($#1123) bb#464 bb#463; [];
}; []
bb#462 {
$ret#1158 = 0; [];
jmp bb#496; [];
}; []
bb#463 {
$last#1124 = $i#1120; [];
jmp bb#465; [];
}; []
bb#464 {
$x#1118 = $i#1120; [];
jmp bb#462; [];
}; []
bb#465 {
$#1126 = $self#1099._flags; [];
$#1127 = f$__ac_isempty#135($#1126, $i#1120); [];
$#1128 = f$__bool__#13($#1127); [];
$#1129 = f$__invert__#55($#1128); [];
$#1130 = f$__bool__#263($#1129); [];
condjump ($#1130) bb#471 bb#469; [];
}; []
bb#466 {
jmp bb#476; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#467 {
jmp bb#484; [];
}; []
bb#468 {
$._bin_res#1125 = true; [];
jmp bb#470; [];
}; []
bb#469 {
$._bin_res#1125 = false; [];
jmp bb#470; [];
}; []
bb#470 {
$#1140 = f$__bool__#263($._bin_res#1125); [];
condjump ($#1140) bb#466 bb#467; [];
}; []
bb#471 {
$#1132 = $self#1099._flags; [];
$#1133 = f$__ac_isdel#72($#1132, $i#1120); [];
$#1134 = f$__bool__#13($#1133); [];
condjump ($#1134) bb#472 bb#475; [];
}; []
bb#472 {
$._bin_res#1131 = true; [];
jmp bb#474; [];
}; []
bb#473 {
$._bin_res#1131 = false; [];
jmp bb#474; [];
}; []
bb#474 {
$#1139 = f$__bool__#263($._bin_res#1131); [];
condjump ($#1139) bb#468 bb#469; [];
}; []
bb#475 {
$#1135 = $self#1099._keys; [];
$#1136 = f$__getitem__#273($#1135, $i#1120); [];
$#1137 = f$__ne__#9($#1136, $key#1100); [];
$#1138 = f$__bool__#263($#1137); [];
condjump ($#1138) bb#472 bb#473; [];
}; []
bb#476 {
$#1141 = $self#1099._flags; [];
$#1142 = f$__ac_isdel#72($#1141, $i#1120); [];
$#1143 = f$__bool__#13($#1142); [];
condjump ($#1143) bb#479 bb#478; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#477 {
$step#1116 = f$__add__#251($step#1116, 1); [];
$#1144 = f$__add__#251($i#1120, $step#1116); [];
$i#1120 = f$__and__#12($#1144, $mask#1114); [];
jmp bb#480; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#478 {
jmp bb#477; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#479 {
$site#1117 = $i#1120; [];
jmp bb#477; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#480 {
$#1145 = f$__eq__#38($i#1120, $last#1124); [];
$#1146 = f$__bool__#263($#1145); [];
condjump ($#1146) bb#483 bb#482; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#481 {
jmp bb#465; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#482 {
jmp bb#481; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#483 {
$x#1118 = $site#1117; [];
jmp bb#467; [];
}; [loopAttribute: loop(none, bb#465, bb#466, none, bb#467), ]
bb#484 {
$#1147 = $self#1099._n_buckets; [];
$#1148 = f$__eq__#38($x#1118, $#1147); [];
$#1149 = f$__bool__#263($#1148); [];
condjump ($#1149) bb#487 bb#486; [];
}; []
bb#485 {
jmp bb#462; [];
}; []
bb#486 {
jmp bb#485; [];
}; []
bb#487 {
jmp bb#488; [];
}; []
bb#488 {
$#1151 = $self#1099._flags; [];
$#1152 = f$__ac_isempty#135($#1151, $i#1120); [];
$#1153 = f$__bool__#13($#1152); [];
condjump ($#1153) bb#495 bb#493; [];
}; []
bb#489 {
jmp bb#485; [];
}; []
bb#490 {
$x#1118 = $i#1120; [];
jmp bb#489; [];
}; []
bb#491 {
$x#1118 = $site#1117; [];
jmp bb#489; [];
}; []
bb#492 {
$._bin_res#1150 = true; [];
jmp bb#494; [];
}; []
bb#493 {
$._bin_res#1150 = false; [];
jmp bb#494; [];
}; []
bb#494 {
$#1157 = f$__bool__#263($._bin_res#1150); [];
condjump ($#1157) bb#491 bb#490; [];
}; []
bb#495 {
$#1154 = $self#1099._n_buckets; [];
$#1155 = f$__ne__#159($site#1117, $#1154); [];
$#1156 = f$__bool__#263($#1155); [];
condjump ($#1156) bb#492 bb#493; [];
}; []
bb#496 {
$#1159 = $self#1099._flags; [];
$#1160 = f$__ac_isempty#135($#1159, $x#1118); [];
$#1161 = f$__bool__#13($#1160); [];
condjump ($#1161) bb#499 bb#498; [];
}; []
bb#497 {
$#1172 = f$__new__#240($ret#1158, $x#1118); [];
return $#1172; [];
}; []
bb#498 {
$#1166 = $self#1099._flags; [];
$#1167 = f$__ac_isdel#72($#1166, $x#1118); [];
$#1168 = f$__bool__#13($#1167); [];
condjump ($#1168) bb#501 bb#500; [];
}; []
bb#499 {
$#1162 = $self#1099._keys; [];
f$__setitem__#68($#1162, $x#1118, $key#1100); [];
$#1163 = $self#1099._flags; [];
f$__ac_set_isboth_false#7($#1163, $x#1118); [];
$#1164 = $self#1099._size; [];
$self#1099.self = f$__add__#251($#1164, 1); [];
$#1165 = $self#1099._n_occupied; [];
$self#1099.self = f$__add__#251($#1165, 1); [];
$ret#1158 = 1; [];
jmp bb#497; [];
}; []
bb#500 {
jmp bb#497; [];
}; []
bb#501 {
$#1169 = $self#1099._keys; [];
f$__setitem__#68($#1169, $x#1118, $key#1100); [];
$#1170 = $self#1099._flags; [];
f$__ac_set_isboth_false#7($#1170, $x#1118); [];
$#1171 = $self#1099._size; [];
$self#1099.self = f$__add__#251($#1171, 1); [];
$ret#1158 = 2; [];
jmp bb#497; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align_dual#231(
$.a0#566: .seq#621; [];
$.a1#567: .seq#621; [];
$.a2#568: Pointer[Int8]#643; [];
$.a3#569: Int8#642; [];
$.a4#570: Int8#642; [];
$.a5#571: Int8#642; [];
$.a6#572: Int8#642; [];
$.a7#573: int#4; [];
$.a8#574: int#4; [];
$.a9#575: int#4; [];
$.a10#576: int#4; [];
$.a11#577: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$omp_get_num_threads#232(
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_align_global#233(
$.a0#588: .seq#621; [];
$.a1#589: .seq#621; [];
$.a2#590: Pointer[Int8]#643; [];
$.a3#591: Int8#642; [];
$.a4#592: Int8#642; [];
$.a5#593: int#4; [];
$.a6#594: bool#1; [];
$.a7#595: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_alloc#234(
$.a0#421: int#4; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_palign#235(
$.a0#599: .pseq#673; [];
$.a1#600: .pseq#673; [];
$.a2#601: Pointer[Int8]#643; [];
$.a3#602: Int8#642; [];
$.a4#603: Int8#642; [];
$.a5#604: int#4; [];
$.a6#605: int#4; [];
$.a7#606: int#4; [];
$.a8#607: int#4; [];
$.a9#608: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$seq_palign_default#236(
$.a0#628: .pseq#673; [];
$.a1#629: .pseq#673; [];
$.a2#630: Pointer[.Alignment]#623; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$ord#237(
$s#748: str#0; [];
) -> int#4 [
$#749: int#4; [];
$#750: bool#1; [];
$#751: bool#1; [];
$#753: int#4; [];
$#754: str#0; [];
$#755: str#0; [];
$#756: str#0; [];
$#757: str#0; [];
$#758: byte#8; [];
$#759: int#4; [];
]{
bb#236 {
'
    ord(s)

    Return an integer representing the Unicode code point of s
    '; [];
jmp bb#342; [];
}; []
bb#342 {
$#749 = f$len#166($s#748); [];
$#750 = f$__ne__#159($#749, 1); [];
$#751 = f$__bool__#263($#750); [];
condjump ($#751) bb#345 bb#344; [];
}; []
bb#343 {
$#757 = $s#748.ptr; [];
$#758 = f$__getitem__#272($#757, 0); [];
$#759 = f$6#130($#758); [];
return $#759; [];
}; []
bb#344 {
jmp bb#343; [];
}; []
bb#345 {
$._typ_694#752 = f$__new__#265(); [];
$#753 = f$len#166($s#748); [];
$#754 = f$2#149($#753); [];
$#755 = f$__add__#133('ord() expected a character, but string of length ', $#754); [];
$#756 = f$__add__#133($#755, ' found'); [];
f$2#269($._typ_694#752, $#756); [];
throw ($._typ_694#752); [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$seq_print#238(
$.a0#294: str#0; [];
) -> void#7 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$chr#239(
$i#760: int#4; [];
) -> str#0 [
$p#761: Pointer[byte]#505; [];
$#762: byte#8; [];
$#763: str#0; [];
]{
bb#238 {
'
    chr(i)

    Return a string representing a character whose Unicode
    code point is an integer
    '; [];
$p#761 = f$2#200(1); [];
$#762 = f$2#247($i#760); [];
f$__setitem__#69($p#761, 0, $#762); [];
$#763 = f$__new__#151($p#761, 1); [];
return $#763; [];
}; []
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#240(
$a1#276: int#4; [];
$a2#277: int#4; [];
) -> .Tuple.2#547 [
]{
internal: .Tuple.2#547.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#241(
$a1#278: Pointer[byte]#505; [];
$a2#279: int#4; [];
) -> .Tuple.2#546 [
]{
internal: .Tuple.2#546.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#242(
$a1#280: str#0; [];
$a2#281: str#0; [];
) -> .Tuple.2#544 [
]{
internal: .Tuple.2#544.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ne__#243(
$self#378: byte#8; [];
$other#379: byte#8; [];
) -> bool#1 [
]{
internal: byte#8.__ne__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$log10#244(
$.a0#469: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$gzseek#245(
$.a0#553: Pointer[byte]#505; [];
$.a1#554: int#4; [];
$.a2#555: Int32#558; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#246(
) -> .AttributeError#554 [
]{
internal: .AttributeError#554.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$2#247(
$i#377: int#4; [];
) -> byte#8 [
]{
internal: byte#8.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$gzgetc#248(
$.a0#541: Pointer[byte]#505; [];
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$trunc#249(
$.a0#491: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$omp_get_num_procs#250(
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__add__#251(
$self#330: int#4; [];
$other#331: int#4; [];
) -> int#4 [
]{
internal: int#4.__add__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$2#252(
$self#724: .IndexError#610; [];
$message#725: str#0; [];
) -> void#7 [
]{
bb#251 {
$self#724.self = f$__new__#261('IndexError', $message#725, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$3#253(
$f#323: float#3; [];
) -> int#4 [
]{
internal: int#4.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$_tuple_str#254(
$strs#775: Pointer[str]#484; [];
$n#776: int#4; [];
) -> str#0 [
$total#777: int#4; [];
$i#778: int#4; [];
$#779: bool#1; [];
$#780: bool#1; [];
$#781: str#0; [];
$#782: str#0; [];
$#783: int#4; [];
$#784: bool#1; [];
$#785: bool#1; [];
$buf#786: Pointer[byte]#505; [];
$where#787: int#4; [];
$#788: byte#8; [];
$#789: bool#1; [];
$#790: bool#1; [];
$s#791: str#0; [];
$l#792: int#4; [];
$#793: Pointer[byte]#505; [];
$#794: str#0; [];
$#795: int#4; [];
$#796: bool#1; [];
$#797: bool#1; [];
$#798: byte#8; [];
$#799: byte#8; [];
$#800: byte#8; [];
$#801: str#0; [];
]{
bb#253 {
$total#777 = 2; [];
$i#778 = 0; [];
jmp bb#358; [];
}; []
bb#358 {
$#779 = f$__lt__#274($i#778, $n#776); [];
$#780 = f$__bool__#263($#779); [];
condjump ($#780) bb#359 bb#360; [];
}; []
bb#359 {
$#781 = f$__getitem__#273($strs#775, $i#778); [];
$#782 = $#781.len; [];
$total#777 = f$__add__#251($total#777, $#782); [];
jmp bb#361; [];
}; [loopAttribute: loop(none, bb#358, bb#359, none, bb#360), ]
bb#360 {
$buf#786 = f$2#200($total#777); [];
$where#787 = 0; [];
$#788 = f$2#247(40); [];
f$__setitem__#69($buf#786, $where#787, $#788); [];
$where#787 = f$__add__#251($where#787, 1); [];
$i#778 = 0; [];
jmp bb#365; [];
}; []
bb#361 {
$#783 = f$__sub__#132($n#776, 1); [];
$#784 = f$__lt__#274($i#778, $#783); [];
$#785 = f$__bool__#263($#784); [];
condjump ($#785) bb#364 bb#363; [];
}; [loopAttribute: loop(none, bb#358, bb#359, none, bb#360), ]
bb#362 {
$i#778 = f$__add__#251($i#778, 1); [];
jmp bb#358; [];
}; [loopAttribute: loop(none, bb#358, bb#359, none, bb#360), ]
bb#363 {
jmp bb#362; [];
}; [loopAttribute: loop(none, bb#358, bb#359, none, bb#360), ]
bb#364 {
$total#777 = f$__add__#251($total#777, 2); [];
jmp bb#362; [];
}; [loopAttribute: loop(none, bb#358, bb#359, none, bb#360), ]
bb#365 {
$#789 = f$__lt__#274($i#778, $n#776); [];
$#790 = f$__bool__#263($#789); [];
condjump ($#790) bb#366 bb#367; [];
}; []
bb#366 {
$s#791 = f$__getitem__#273($strs#775, $i#778); [];
$l#792 = $s#791.len; [];
$#793 = f$__add__#118($buf#786, $where#787); [];
$#794 = $s#791.ptr; [];
f$memcpy#121($#793, $#794, $l#792); [];
$where#787 = f$__add__#251($where#787, $l#792); [];
jmp bb#368; [];
}; [loopAttribute: loop(none, bb#365, bb#366, none, bb#367), ]
bb#367 {
$#800 = f$2#247(41); [];
f$__setitem__#69($buf#786, $where#787, $#800); [];
$#801 = f$__new__#151($buf#786, $total#777); [];
return $#801; [];
}; []
bb#368 {
$#795 = f$__sub__#132($n#776, 1); [];
$#796 = f$__lt__#274($i#778, $#795); [];
$#797 = f$__bool__#263($#796); [];
condjump ($#797) bb#371 bb#370; [];
}; [loopAttribute: loop(none, bb#365, bb#366, none, bb#367), ]
bb#369 {
$i#778 = f$__add__#251($i#778, 1); [];
jmp bb#365; [];
}; [loopAttribute: loop(none, bb#365, bb#366, none, bb#367), ]
bb#370 {
jmp bb#369; [];
}; [loopAttribute: loop(none, bb#365, bb#366, none, bb#367), ]
bb#371 {
$#798 = f$2#247(44); [];
f$__setitem__#69($buf#786, $where#787, $#798); [];
$where#787 = f$__add__#251($where#787, 1); [];
$#799 = f$2#247(32); [];
f$__setitem__#69($buf#786, $where#787, $#799); [];
$where#787 = f$__add__#251($where#787, 1); [];
jmp bb#369; [];
}; [loopAttribute: loop(none, bb#365, bb#366, none, bb#367), ]
}; [funcAttributes: builtin, srcInfoAttribute: <internal>:0:0, ]
def f$dlopen#255(
$.a0#530: Pointer[byte]#505; [];
$.a1#531: int#4; [];
) -> Pointer[byte]#505 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$_kh_resize#256(
$self#1001: .dict#485; [];
$new_n_buckets#1002: int#4; [];
) -> void#7 [
$HASH_UPPER#1003: float#3; [];
$new_flags#1004: Pointer[UInt32]#483; [];
$j#1005: int#4; [];
$#1006: int#4; [];
$#1007: int#4; [];
$#1008: int#4; [];
$#1009: int#4; [];
$#1010: int#4; [];
$#1011: int#4; [];
$#1012: bool#1; [];
$#1013: bool#1; [];
$#1014: .dict#485; [];
$#1015: float#3; [];
$#1016: float#3; [];
$#1017: int#4; [];
$#1018: bool#1; [];
$#1019: bool#1; [];
$fsize#1020: int#4; [];
$i#1021: int#4; [];
$#1022: bool#1; [];
$#1023: bool#1; [];
$#1024: UInt32#482; [];
$#1025: .dict#485; [];
$#1026: bool#1; [];
$#1027: bool#1; [];
$#1028: .dict#485; [];
$#1029: Pointer[byte]#505; [];
$#1030: int#4; [];
$#1031: int#4; [];
$#1032: Pointer[byte]#505; [];
$#1033: .dict#485; [];
$#1034: Pointer[byte]#505; [];
$#1035: int#4; [];
$#1036: int#4; [];
$#1037: Pointer[byte]#505; [];
$#1038: bool#1; [];
$#1039: .dict#485; [];
$#1040: bool#1; [];
$#1041: bool#1; [];
$#1042: .dict#485; [];
$#1043: int#4; [];
$#1044: bool#1; [];
$#1045: bool#1; [];
$key#1046: str#0; [];
$#1047: .dict#485; [];
$val#1048: str#0; [];
$#1049: .dict#485; [];
$new_mask#1050: int#4; [];
$#1051: .dict#485; [];
$#1052: bool#1; [];
$step#1053: int#4; [];
$k#1054: int#4; [];
$i#1055: int#4; [];
$#1056: int#4; [];
$#1057: bool#1; [];
$#1058: bool#1; [];
$#1059: bool#1; [];
$#1060: int#4; [];
$._bin_res#1061: bool#1; [];
$#1062: .dict#485; [];
$#1063: bool#1; [];
$#1064: bool#1; [];
$#1065: .dict#485; [];
$#1066: int#4; [];
$#1067: bool#1; [];
$#1068: bool#1; [];
$#1069: bool#1; [];
$#1071: .dict#485; [];
$#1072: str#0; [];
$#1073: .dict#485; [];
$#1074: .Tuple.2#544; [];
$#1076: .dict#485; [];
$#1077: str#0; [];
$#1078: .dict#485; [];
$#1079: .Tuple.2#544; [];
$#1080: .dict#485; [];
$#1081: .dict#485; [];
$#1082: .dict#485; [];
$#1083: .dict#485; [];
$#1084: bool#1; [];
$#1085: bool#1; [];
$#1086: .dict#485; [];
$#1087: Pointer[byte]#505; [];
$#1088: int#4; [];
$#1089: int#4; [];
$#1090: Pointer[byte]#505; [];
$#1091: .dict#485; [];
$#1092: Pointer[byte]#505; [];
$#1093: int#4; [];
$#1094: int#4; [];
$#1095: Pointer[byte]#505; [];
$#1096: .dict#485; [];
$#1097: float#3; [];
$#1098: float#3; [];
]{
bb#255 {
$HASH_UPPER#1003 = 0.770000; [];
$new_flags#1004 = f$__new__#51(); [];
$j#1005 = 1; [];
$new_n_buckets#1002 = f$__sub__#132($new_n_buckets#1002, 1); [];
$#1006 = f$__rshift__#112($new_n_buckets#1002, 1); [];
$new_n_buckets#1002 = f$__or__#25($new_n_buckets#1002, $#1006); [];
$#1007 = f$__rshift__#112($new_n_buckets#1002, 2); [];
$new_n_buckets#1002 = f$__or__#25($new_n_buckets#1002, $#1007); [];
$#1008 = f$__rshift__#112($new_n_buckets#1002, 4); [];
$new_n_buckets#1002 = f$__or__#25($new_n_buckets#1002, $#1008); [];
$#1009 = f$__rshift__#112($new_n_buckets#1002, 8); [];
$new_n_buckets#1002 = f$__or__#25($new_n_buckets#1002, $#1009); [];
$#1010 = f$__rshift__#112($new_n_buckets#1002, 16); [];
$new_n_buckets#1002 = f$__or__#25($new_n_buckets#1002, $#1010); [];
$#1011 = f$__rshift__#112($new_n_buckets#1002, 32); [];
$new_n_buckets#1002 = f$__or__#25($new_n_buckets#1002, $#1011); [];
$new_n_buckets#1002 = f$__add__#251($new_n_buckets#1002, 1); [];
jmp bb#409; [];
}; []
bb#409 {
$#1012 = f$__lt__#274($new_n_buckets#1002, 4); [];
$#1013 = f$__bool__#263($#1012); [];
condjump ($#1013) bb#412 bb#411; [];
}; []
bb#410 {
jmp bb#413; [];
}; []
bb#411 {
jmp bb#410; [];
}; []
bb#412 {
$new_n_buckets#1002 = 4; [];
jmp bb#410; [];
}; []
bb#413 {
$#1014 = $self#1001._size; [];
$#1015 = f$1#152($new_n_buckets#1002, $HASH_UPPER#1003); [];
$#1016 = f$__add__#23($#1015, 0.500000); [];
$#1017 = f$3#253($#1016); [];
$#1018 = f$__ge__#212($#1014, $#1017); [];
$#1019 = f$__bool__#263($#1018); [];
condjump ($#1019) bb#416 bb#415; [];
}; []
bb#414 {
jmp bb#424; [];
}; []
bb#415 {
$fsize#1020 = f$__ac_fsize#40($new_n_buckets#1002); [];
$new_flags#1004 = f$2#199($fsize#1020); [];
$i#1021 = 0; [];
jmp bb#417; [];
}; []
bb#416 {
$j#1005 = 0; [];
jmp bb#414; [];
}; []
bb#417 {
$#1022 = f$__lt__#274($i#1021, $fsize#1020); [];
$#1023 = f$__bool__#263($#1022); [];
condjump ($#1023) bb#418 bb#419; [];
}; []
bb#418 {
$#1024 = f$2#202(2863311530); [];
f$__setitem__#70($new_flags#1004, $i#1021, $#1024); [];
$i#1021 = f$__add__#251($i#1021, 1); [];
jmp bb#417; [];
}; [loopAttribute: loop(none, bb#417, bb#418, none, bb#419), ]
bb#419 {
jmp bb#420; [];
}; []
bb#420 {
$#1025 = $self#1001._n_buckets; [];
$#1026 = f$__lt__#274($#1025, $new_n_buckets#1002); [];
$#1027 = f$__bool__#263($#1026); [];
condjump ($#1027) bb#423 bb#422; [];
}; []
bb#421 {
jmp bb#414; [];
}; []
bb#422 {
jmp bb#421; [];
}; []
bb#423 {
$#1028 = $self#1001._keys; [];
$#1029 = f$as_byte#126($#1028); [];
$#1030 = f$sizeof#217(); [];
$#1031 = f$__mul__#223($new_n_buckets#1002, $#1030); [];
$#1032 = f$realloc#107($#1029, $#1031); [];
$self#1001.self = f$1#210($#1032); [];
$#1033 = $self#1001._vals; [];
$#1034 = f$as_byte#126($#1033); [];
$#1035 = f$sizeof#217(); [];
$#1036 = f$__mul__#223($new_n_buckets#1002, $#1035); [];
$#1037 = f$realloc#107($#1034, $#1036); [];
$self#1001.self = f$1#210($#1037); [];
jmp bb#421; [];
}; []
bb#424 {
$#1038 = f$__bool__#13($j#1005); [];
condjump ($#1038) bb#427 bb#426; [];
}; []
bb#425 {
return; [];
}; []
bb#426 {
jmp bb#425; [];
}; []
bb#427 {
$j#1005 = 0; [];
jmp bb#428; [];
}; []
bb#428 {
$#1039 = $self#1001._n_buckets; [];
$#1040 = f$__ne__#159($j#1005, $#1039); [];
$#1041 = f$__bool__#263($#1040); [];
condjump ($#1041) bb#429 bb#430; [];
}; []
bb#429 {
jmp bb#431; [];
}; [loopAttribute: loop(none, bb#428, bb#429, none, bb#430), ]
bb#430 {
jmp bb#449; [];
}; []
bb#431 {
$#1042 = $self#1001._flags; [];
$#1043 = f$__ac_iseither#60($#1042, $j#1005); [];
$#1044 = f$__eq__#38($#1043, 0); [];
$#1045 = f$__bool__#263($#1044); [];
condjump ($#1045) bb#434 bb#433; [];
}; [loopAttribute: loop(none, bb#428, bb#429, none, bb#430), ]
bb#432 {
$j#1005 = f$__add__#251($j#1005, 1); [];
jmp bb#428; [];
}; [loopAttribute: loop(none, bb#428, bb#429, none, bb#430), ]
bb#433 {
jmp bb#432; [];
}; [loopAttribute: loop(none, bb#428, bb#429, none, bb#430), ]
bb#434 {
$#1047 = $self#1001._keys; [];
$key#1046 = f$__getitem__#273($#1047, $j#1005); [];
$#1049 = $self#1001._vals; [];
$val#1048 = f$__getitem__#273($#1049, $j#1005); [];
$new_mask#1050 = f$__sub__#132($new_n_buckets#1002, 1); [];
$#1051 = $self#1001._flags; [];
f$__ac_set_isdel_true#10($#1051, $j#1005); [];
jmp bb#435; [];
}; [loopAttribute: loop(none, bb#428, bb#429, none, bb#430), ]
bb#435 {
$#1052 = f$__bool__#263(true); [];
condjump ($#1052) bb#436 bb#437; [];
}; [loopAttribute: loop(none, bb#428, bb#429, none, bb#430), ]
bb#436 {
$step#1053 = 0; [];
$k#1054 = f$_dict_hash#86($key#1046); [];
$i#1055 = f$__and__#12($k#1054, $new_mask#1050); [];
jmp bb#438; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#437 {
jmp bb#432; [];
}; [loopAttribute: loop(none, bb#428, bb#429, none, bb#430), ]
bb#438 {
$#1056 = f$__ac_isempty#135($new_flags#1004, $i#1055); [];
$#1057 = f$__bool__#13($#1056); [];
$#1058 = f$__invert__#55($#1057); [];
$#1059 = f$__bool__#263($#1058); [];
condjump ($#1059) bb#439 bb#440; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#439 {
$step#1053 = f$__add__#251($step#1053, 1); [];
$#1060 = f$__add__#251($i#1055, $step#1053); [];
$i#1055 = f$__and__#12($#1060, $new_mask#1050); [];
jmp bb#438; [];
}; [loopAttribute: loop(none, bb#438, bb#439, none, bb#440), ]
bb#440 {
f$__ac_set_isempty_false#257($new_flags#1004, $i#1055); [];
jmp bb#441; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#441 {
$#1062 = $self#1001._n_buckets; [];
$#1063 = f$__lt__#274($i#1055, $#1062); [];
$#1064 = f$__bool__#263($#1063); [];
condjump ($#1064) bb#448 bb#446; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#442 {
jmp bb#435; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#443 {
$#1081 = $self#1001._keys; [];
f$__setitem__#68($#1081, $i#1055, $key#1046); [];
$#1082 = $self#1001._vals; [];
f$__setitem__#68($#1082, $i#1055, $val#1048); [];
jmp bb#437; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#444 {
$#1071 = $self#1001._keys; [];
$#1072 = f$__getitem__#273($#1071, $i#1055); [];
$._assign_562#1070 = f$__new__#242($key#1046, $#1072); [];
$#1073 = $self#1001._keys; [];
$#1074 = $._assign_562#1070.a1; [];
f$__setitem__#68($#1073, $i#1055, $#1074); [];
$key#1046 = $._assign_562#1070.a2; [];
$#1076 = $self#1001._vals; [];
$#1077 = f$__getitem__#273($#1076, $i#1055); [];
$._assign_563#1075 = f$__new__#242($val#1048, $#1077); [];
$#1078 = $self#1001._vals; [];
$#1079 = $._assign_563#1075.a1; [];
f$__setitem__#68($#1078, $i#1055, $#1079); [];
$val#1048 = $._assign_563#1075.a2; [];
$#1080 = $self#1001._flags; [];
f$__ac_set_isdel_true#10($#1080, $i#1055); [];
jmp bb#442; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#445 {
$._bin_res#1061 = true; [];
jmp bb#447; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#446 {
$._bin_res#1061 = false; [];
jmp bb#447; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#447 {
$#1069 = f$__bool__#263($._bin_res#1061); [];
condjump ($#1069) bb#444 bb#443; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#448 {
$#1065 = $self#1001._flags; [];
$#1066 = f$__ac_iseither#60($#1065, $i#1055); [];
$#1067 = f$__eq__#38($#1066, 0); [];
$#1068 = f$__bool__#263($#1067); [];
condjump ($#1068) bb#445 bb#446; [];
}; [loopAttribute: loop(none, bb#435, bb#436, none, bb#437), ]
bb#449 {
$#1083 = $self#1001._n_buckets; [];
$#1084 = f$__gt__#181($#1083, $new_n_buckets#1002); [];
$#1085 = f$__bool__#263($#1084); [];
condjump ($#1085) bb#452 bb#451; [];
}; []
bb#450 {
$self#1001.self = $new_flags#1004; [];
$self#1001.self = $new_n_buckets#1002; [];
$self#1001.self = $self#1001._size; [];
$#1096 = $self#1001._n_buckets; [];
$#1097 = f$1#152($#1096, $HASH_UPPER#1003); [];
$#1098 = f$__add__#23($#1097, 0.500000); [];
$self#1001.self = f$3#253($#1098); [];
jmp bb#425; [];
}; []
bb#451 {
jmp bb#450; [];
}; []
bb#452 {
$#1086 = $self#1001._keys; [];
$#1087 = f$as_byte#126($#1086); [];
$#1088 = f$sizeof#217(); [];
$#1089 = f$__mul__#223($new_n_buckets#1002, $#1088); [];
$#1090 = f$realloc#107($#1087, $#1089); [];
$self#1001.self = f$1#210($#1090); [];
$#1091 = $self#1001._vals; [];
$#1092 = f$as_byte#126($#1091); [];
$#1093 = f$sizeof#217(); [];
$#1094 = f$__mul__#223($new_n_buckets#1002, $#1093); [];
$#1095 = f$realloc#107($#1092, $#1094); [];
$self#1001.self = f$1#210($#1095); [];
jmp bb#450; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__ac_set_isempty_false#257(
$flag#893: Pointer[UInt32]#483; [];
$i#894: int#4; [];
) -> void#7 [
$#895: int#4; [];
$#896: int#4; [];
$#897: UInt32#482; [];
$#898: int#4; [];
$#899: int#4; [];
$#900: int#4; [];
$#901: int#4; [];
$#902: UInt32#482; [];
$#903: UInt32#482; [];
]{
bb#256 {
$#895 = f$__rshift__#112($i#894, 4); [];
$#896 = f$__rshift__#112($i#894, 4); [];
$#897 = f$__getitem__#270($flag#893, $#896); [];
$#898 = f$__and__#12($i#894, 15); [];
$#899 = f$__lshift__#125($#898, 1); [];
$#900 = f$__lshift__#125(2, $#899); [];
$#901 = f$__invert__#66($#900); [];
$#902 = f$2#202($#901); [];
$#903 = f$__and__#96($#897, $#902); [];
f$__setitem__#70($flag#893, $#895, $#903); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__new__#258(
) -> .IndexError#610 [
]{
internal: .IndexError#610.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$gzread#259(
$.a0#546: Pointer[byte]#505; [];
$.a1#547: Pointer[byte]#505; [];
$.a2#548: UInt32#482; [];
) -> Int32#558 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$2#260(
$self#732: .AssertionError#607; [];
$message#733: str#0; [];
) -> void#7 [
]{
bb#259 {
$self#732.self = f$__new__#261('AssertionError', $message#733, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__new__#261(
$a1#286: str#0; [];
$a2#287: str#0; [];
$a3#288: str#0; [];
$a4#289: str#0; [];
$a5#290: int#4; [];
$a6#291: int#4; [];
) -> .Tuple.6#657 [
]{
internal: .Tuple.6#657.__new__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$cos#262(
$.a0#479: float#3; [];
) -> float#3 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$__bool__#263(
$self#375: bool#1; [];
) -> bool#1 [
]{
internal: bool#1.__bool__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$1#264(
$p#638: Pointer[byte]#505; [];
) -> void#7 [
]{
bb#263 {
f$seq_free#156($p#638); [];
return; [];
}; []
}; [funcAttributes: , srcInfoAttribute: <internal>:0:0, ]
def f$__new__#265(
) -> .TypeError#618 [
]{
internal: .TypeError#618.__new__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#266(
$self#942: .dict#485; [];
$key#943: str#0; [];
) -> str#0 [
$x#944: int#4; [];
$#945: int#4; [];
$#946: bool#1; [];
$#947: bool#1; [];
$#948: .dict#485; [];
$#949: str#0; [];
$#951: str#0; [];
]{
bb#265 {
$x#944 = f$_kh_get#8($self#942, $key#943); [];
jmp bb#383; [];
}; []
bb#383 {
$#945 = f$_kh_end#39($self#942); [];
$#946 = f$__ne__#159($x#944, $#945); [];
$#947 = f$__bool__#263($#946); [];
condjump ($#947) bb#386 bb#385; [];
}; []
bb#384 {
$._typ_703#950 = f$__new__#6(); [];
$#951 = f$2#148($key#943); [];
f$2#205($._typ_703#950, $#951); [];
throw ($._typ_703#950); [];
}; []
bb#385 {
jmp bb#384; [];
}; []
bb#386 {
$#948 = $self#942._vals; [];
$#949 = f$__getitem__#273($#948, $x#944); [];
return $#949; [];
}; []
}; [funcAttributes: .class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__str__#267(
$self#326: int#4; [];
) -> str#0 [
]{
internal: int#4.__str__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
def f$fread#268(
$.a0#508: Pointer[byte]#505; [];
$.a1#509: int#4; [];
$.a2#510: int#4; [];
$.a3#511: Pointer[byte]#505; [];
) -> int#4 [
]{
external
}; [funcAttributes: .c, srcInfoAttribute: <internal>:0:0, ]
def f$2#269(
$self#728: .TypeError#618; [];
$message#729: str#0; [];
) -> void#7 [
]{
bb#268 {
$self#728.self = f$__new__#261('TypeError', $message#729, '', '', 0, 0); [];
return; [];
}; []
}; [funcAttributes: .class, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#270(
$self#302: Pointer[UInt32]#483; [];
$index#303: int#4; [];
) -> UInt32#482 [
]{
internal: Pointer[UInt32]#483.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#271(
$self#304: Pointer[Pointer[byte]]#514; [];
$index#305: int#4; [];
) -> Pointer[byte]#505 [
]{
internal: Pointer[Pointer[byte]]#514.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#272(
$self#306: Pointer[byte]#505; [];
$index#307: int#4; [];
) -> byte#8 [
]{
internal: Pointer[byte]#505.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__getitem__#273(
$self#308: Pointer[str]#484; [];
$index#309: int#4; [];
) -> str#0 [
]{
internal: Pointer[str]#484.__getitem__
}; [funcAttributes: internal,.class,.method, srcInfoAttribute: <internal>:0:0, ]
def f$__lt__#274(
$self#346: int#4; [];
$other#347: int#4; [];
) -> bool#1 [
]{
internal: int#4.__lt__
}; [funcAttributes: internal,.class, srcInfoAttribute: <internal>:0:0, ]
$.RTLD_NOW#535: int#4; [];
$.RTLD_GLOBAL#536: int#4; [];
$._typ_693#737: .AssertionError#607; [];
$._typ_694#752: .TypeError#618; [];
$._typ_695#774: .IndexError#610; [];
$._typ_696#834: .AttributeError#554; [];
$._typ_703#950: .KeyError#489; [];
$._assign_547#955: .Tuple.2#547; [];
$._assign_562#1070: .Tuple.2#544; [];
$._assign_563#1075: .Tuple.2#544; [];
$._assign_564#1177: .Tuple.2#546; [];
$._typ_702#1223: .IndexError#610; [];
$._assign_566#1229: .Tuple.4#499; [];
$._assign_568#1245: .Tuple.4#499; [];
$._typ_697#1281: .ValueError#531; [];
$.BLOCK_SIZE#1283: int#4; [];
$.CACHELINE_SIZE#1284: int#4; [];
$.MIN_GALLOP#1285: int#4; [];
$.INSERTION_SORT_THRESHOLD#1286: int#4; [];
$.NINTHER_THRESHOLD#1287: int#4; [];
$.PARTIAL_INSERTION_SORT_LIMIT#1288: int#4; [];
$.e#1289: float#3; [];
$.pi#1290: float#3; [];
$.tau#1291: float#3; [];
$.inf#1292: float#3; [];
$.nan#1293: float#3; [];
$._typ_698#1294: .list#479; [];
$._lst_646#1295: .list#479; [];
$._F#1296: .list#479; [];
$._typ_699#1299: .dict#515; [];
$._DLOPEN_CACHE#1300: .dict#515; [];
$._typ_700#1301: .dict#515; [];
$._DLSYM_CACHE#1302: .dict#515; [];
$.SEEK_SET#1303: int#4; [];
$.SEEK_CUR#1304: int#4; [];
$.SEEK_END#1305: int#4; [];
$._typ_701#1306: .dict#485; [];
$.environ#1347: .EnvMap#486; [];
$.LD#1354: str#0; [];
$._PY_INITIALIZED#1357: bool#1; [];
$._typ_704#1358: .dict#519; [];
$._PY_MODULE_CACHE#1359: .dict#519; [];
$._typ_705#1360: .ValueError#531; [];
}; []

try#0[
try#1[
]{
.ValueError#531 -> $e#1361: bb#572
}
finally bb#573; []
]{
}; []