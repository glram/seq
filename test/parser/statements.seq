#%% pass
pass

#%% expr
a = 5; b = 3
print a, b  #: 5 3

#%% assign
a = 1
print a  #: 1

x, y = 1, 2
print x, y  #: 1 2
(x, y) = (3, 4)
print x, y  #: 3 4
x, y = (1, 2)
print x, y  #: 1 2
(x, y) = 3, 4
print x, y  #: 3 4
(x, y) = [3, 4]
print x, y  #: 3 4
[x, y] = [1, 2]
print x, y  #: 1 2

l = list(iter(range(10)))
[a, b, *lx, c, d] = l
print a, b, lx, c, d  #: 0 1 [2, 3, 4, 5, 6, 7] 8 9
a, b, *lx = l
print a, b, lx  #: 0 1 [2, 3, 4, 5, 6, 7, 8, 9]
*lx, a, b = l
print lx, a, b  #: [0, 1, 2, 3, 4, 5, 6, 7] 8 9
*xz, a, b = (1, 2, 3, 4, 5)
print xz, a, b  #: (1, 2, 3) 4 5
(*ex,) = [1, 2, 3]
print ex  #: [1, 2, 3]

#%% assign_str
sa, sb = 'XY'
print sa, sb  #: X Y
(sa, sb), sc = 'XY', 'Z'
print sa, sb, sc  #: X Y Z
sa, *la = 'X'
print sa, la, 1  #: X  1
sa, *la = 'XYZ'
print sa, la  #: X YZ
(xa,xb), *xc, xd = [1,2],'this'
print xa, xb, xc, xd  #: 1 2 () this
(a, b), (sc, *sl) = [1,2], 'this'
print a, b, sc, sl  #: 1 2 t his

#%% assign_err
*x = range(5)  #! ERROR: invalid assignment

#%% assign_types
a: list[int] = []
print a  #: []

#%% assign_types_err
a = 5
a = 3.3  #! ERROR: cannot unify int and float

#%% assign_err_2
try:
    (sa, sb), sc = 'XYZ'
except IndexError:
    print "assign failed"  #: assign failed

#%% assign_err_3
a, *b, c, *d = 1,2,3,4,5  #! ERROR: multiple unpack expressions

#%% assign_shadow
a = 5
print a  #: 5
a : str = 's'
print a  #: s

#%% assign_update_eq
a = 5
a += 3
print a  #: 8
a -= 1; print a  #: 7

#%% assign_comprehension
g = ((b, a, c) for a, *b, c in ['ABC','DEEEEF','FHGIJ'])
x, *q, y = list(g)  # TODO: auto-unroll as in Python
print x, y, q  #: (B, A, C) (HGI, F, J) [(EEEE, D, F)]

#%% del
a = 5
del a
print a  #! ERROR: identifier 'a' not found

#%% del_index
y = {1: 'jedan', 2: 'dva'}
del y[2]
print y  #: {1: jedan}

#%% print
print 1,
print 1, 2  #: 1 1 2

#%% return
def foo():
    return 1
print foo()  #: 1

def bar():
    print 2
    return
    print 1
bar()  #: 2

#%% return_fail
return 5  #! ERROR: expected function body

#%% yield
def foo():
    yield 1
print [i for i in foo()], str(foo())[:16]  #: [1] <generator at 0x

#%% yield_void
def foo():
    yield
    print 1
y = foo()
print y.done()  #: False
y.next()  #: 1
# TODO: next() should work here!
print y.done()  #: True

#%% yield_return
def foo():
    yield 1
    return
    yield 2
print list(foo())  #: [1]

#%% yield_fail
yield 5  #! ERROR: expected function body

#%% assert
assert bool(2) == True
try:
    assert 3 == 4
except AssertionError:
    print 'assert failed'  #: assert failed

#%% while
a = 3
while a:
    print a
    a -= 1
#: 3
#: 2
#: 1

#%% for_break_continue
for i in range(10):
    if i % 2 == 0:
        continue
    print i
    if i >= 5:
        break
#: 1
#: 3
#: 5

#%% for_assignment
l = [[1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11]]
for a, *m, b in l:
    print a + b, len(m)
#: 5 2
#: 14 3
#: 21 0

#%% if
for a, b in [(1, 2), (3, 3), (5, 4)]:
    if a > b:
        print '1',
    elif a == b:
        print '=',
    else:
        print '2',
print '_'  #: 2 = 1 _

#%% extend
@extend
class int:
    def run_lola_run(self):
        while self > 0:
            yield self
            self -= 1
print list((5).run_lola_run())  #: [5, 4, 3, 2, 1]

#%% import

#%% try_throw
class MyError:
    _hdr: ExcHeader
    def __init__(self, message: str):
        self._hdr = ('MyError', message, '', '', 0, 0)
try:
    raise MyError("hello!")
except MyError as e:
    print e._hdr.msg  #: hello!
try:
    raise OSError("hello os!")
# TODO: except (MyError, OSError) as e:
#     print e._hdr.msg
except MyError:
    print "my"
except OSError:
    print "os"  #: os
finally:
    print "whoa"  #: whoa

#%% global
a = 1
def foo():
    global a
    a += 1
print a,
foo()
print a  #: 1 2

#%% global_scope_err
a = 1
def foo():
    a += 1
foo()  #! ERROR: variable 'a' is not global

#%% global_err
a = 1
global a  #! ERROR: global outside of a function

#%% global_ref
a = [1]
def foo():
    a.append(2)
foo()
print a  #: [1, 2]

#%% yield_from
def foo():
    yield from range(3)
    yield from range(10, 13)
    yield -1
print list(foo())  #: [0, 1, 2, 10, 11, 12, -1]

#%% with
class Foo:
    i: int
    def __enter__(self: Foo):
        print '> foo! ' + str(self.i)
    def __exit__(self: Foo):
        print '< foo! ' + str(self.i)
    def foo(self: Foo):
        print 'woof'
class Bar:
    s: str
    def __enter__(self: Bar):
        print '> bar! ' + self.s
    def __exit__(self: Bar):
        print '< bar! ' + self.s
    def bar(self: Bar):
        print 'meow'
with Foo(0) as f:
#: > foo! 0
    f.foo()  #: woof
#: < foo! 0
with Foo(1) as f, Bar('s') as b:
#: > foo! 1
#: > bar! s
    f.foo()  #: woof
    b.bar()  #: meow
#: < bar! s
#: < foo! 1
with Foo(2), Bar('t') as q:
#: > foo! 2
#: > bar! t
    print 'eeh'  #: eeh
    q.bar()  #: meow
#: < bar! t
#: < foo! 2


#%% auto_init
class X[T]:
    a: int = 4
    b: int
    c: T
    d: str = 'oops'

    def __str__(self):
        return f'X({self.a},{self.b},{self.c},{self.d})'

x = X[float]()
print x  #: X(4,0,0,oops)

y = X(c='darius',a=5)
print y  #: X(5,0,darius,oops)
