#%% none
a = None
print a  #: None
a = 5
print a  #: 5

#%% none_unbound
a = None
#! ERROR: cannot resolve 1 unbound variables

#%% bool
a = True
print a  #: True

#%% int
a = 51
print a  #: 51

#%% float
a = 5.15
print a  #: 5.15

#%% float_error
print 5.__str__()  #! ERROR: parsing error: '__str__'

#%% string
a = 'kthxbai'
print a  #: kthxbai

#%% fstring
a, b = 1, True
c = f'and this is {a} followed by {b}'
print c, f'{b}{a}', f'.. {1+a=} .. {b} ...'  #: and this is 1 followed by True True1 .. 1+a=2 .. True ...

#%% seq
a = s'ACGT'
print a  #: ACGT

#%% tuple_tupleindex
# IdExpr deep test
# KmerExpr
# UnpackExpr
e = ('str', 1, True, 5.15)
print e, e[1]  #: (str, 1, True, 5.15) 1

#%% list
g = []
f = [1, 2, 3, 1, 2, 3]
g.append(('str', 1, True, 5.15))
print f, g  #: [1, 2, 3, 1, 2, 3] [(str, 1, True, 5.15)]

#%% set
gs = {1.12}
print gs  #: {1.12}
fs = {1, 2, 3, 1, 2, 3}
gs.add(1.12)
gs.add(1.13)
print fs, gs  #: {1, 2, 3} {1.13, 1.12}

#%% dict
gd = {1: 'jedan', 2: 'dva', 2: 'two', 3: 'tri'}
fd = {}
fd['jedan'] = 1
fd['dva'] = 2
print gd, fd  #: {1: jedan, 2: two, 3: tri} {jedan: 1, dva: 2}

# #%%

#%% collection_generator
l = [(i, j, f'i{i}/{j}')
     for i in range(50) if i % 2 == 0 if i % 3 == 0
     for j in range(2) if j == 1]
print l #: [(0, 1, i0/1), (6, 1, i6/1), (12, 1, i12/1), (18, 1, i18/1), (24, 1, i24/1), (30, 1, i30/1), (36, 1, i36/1), (42, 1, i42/1), (48, 1, i48/1)]

s = {i%3 for i in range(20)}
print s #: {0, 1, 2}

d = {i: j for i in range(10) if i < 1 for j in range(10)}
print d  #: {0: 9}

#%% generator
z = 3
g = (e for e in range(20) if e % z == 1)
print str(g)[:13], list(g)  #: <generator at [1, 4, 7, 10, 13, 16, 19]

#%% if
c = 5
a = 1 if c < 5 else 2
b = -(1 if c >= 5 else 2)
print a, b  #: 2 -1

#%% unary
a, b = False, 1
print not a, ~b, +b, -b, -(+(-b))  #: True -2 1 -1 1

#%% binary
x, y = True, False
a, b = 1, 2
c = [1, 2, 3]

print x and y, x or y  #: False True
print a+b, a-b, a*b, 5**b, a/b, a//b  #: 3 -1 2 25 0.5 0
print a&b, a|b, a<<b, a>>b, a^b  #: 0 3 4 0 3
print a in c, a not in c  #: True False

# Todo: type instance

#%% pipe
def foo(a, b):
    return a+b
bar = lambda c, d: c+d
def hai(e):
    while e > 0:
        yield e
        e -= 2
def echo(s):
    print s
foo(1,2) |> bar(4) |> echo  #: 7
foo(1,2) |> bar(4) |> hai |> echo
#: 7
#: 5
#: 3
#: 1

#%% slice
z = [1, 2, 3, 4, 5]
y = (1, 'foo', True)
print z[2], y[1]  #: 3 foo
print z[:1], z[1:], z[1:3], z[:4:2], z[::-1]  #: [1] [2, 3, 4, 5] [2, 3] [1, 3] [5, 4, 3, 2, 1]

#%% typeof
a = 5
z = list[typeof(a)]()
z.append(6)
print z  #: [6]

#%% ptr
v = 5
c = __ptr__(v)
print int(c) > 0  #: True

#%% yield
def mysum(start):
    m = start
    while True:
        a = (yield)
        if a == -1:
            break
        m += a
    yield m
iadder = mysum(0)
next(iadder)
for i in range(10):
    iadder.send(i)
print iadder.send(-1)  #: 45

